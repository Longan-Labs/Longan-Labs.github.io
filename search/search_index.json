{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation for Longan Labs Here you can find all the Documentation for Longan Labs. The Documentation system is drive by MkDocs and Material . Contributions This Documentation is managed by Longan Labs, and we warmly welcome contribution to this documentation project. Improve grammar or fix wrong typing. Additional content to help provide a better understanding for the users A better image for a better performance Translations to other languages Others edits that is necessary. MkDocs Project documentation with Markdown. View the MkDocs documentation . Project release notes . Visit the MkDocs wiki for community resources, including third party themes and a list of MkDocs users. IRC channel: #mkdocs on freenode. Discussions and support: https://groups.google.com/forum/#!forum/mkdocs LICENSE Copyright 2016-2017 Longan Labs ( https://longan-labs.cc ) Documents and Images This work (product documents and associated images) are licensed under a Creative Commons Attribution-ShareAlike 4.0 International License . Third-party content The resources provided with the product documents also contains datasheets, software examples and other content copyrighted by 3 rd party authors and companies. All such items are copyright of respective owners. The use of such items are governed by their respective licenses. All trademarks are the property of their respective owners. To Contact Write to us at stephen@longan-labs.cc with subject line \"Longan Docs\". Thanks","title":"About"},{"location":"#documentation-for-longan-labs","text":"Here you can find all the Documentation for Longan Labs. The Documentation system is drive by MkDocs and Material .","title":"Documentation for Longan Labs"},{"location":"#contributions","text":"This Documentation is managed by Longan Labs, and we warmly welcome contribution to this documentation project. Improve grammar or fix wrong typing. Additional content to help provide a better understanding for the users A better image for a better performance Translations to other languages Others edits that is necessary.","title":"Contributions"},{"location":"#mkdocs","text":"Project documentation with Markdown. View the MkDocs documentation . Project release notes . Visit the MkDocs wiki for community resources, including third party themes and a list of MkDocs users. IRC channel: #mkdocs on freenode. Discussions and support: https://groups.google.com/forum/#!forum/mkdocs","title":"MkDocs"},{"location":"#license","text":"Copyright 2016-2017 Longan Labs ( https://longan-labs.cc )","title":"LICENSE"},{"location":"#documents-and-images","text":"This work (product documents and associated images) are licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Documents and Images"},{"location":"#third-party-content","text":"The resources provided with the product documents also contains datasheets, software examples and other content copyrighted by 3 rd party authors and companies. All such items are copyright of respective owners. The use of such items are governed by their respective licenses. All trademarks are the property of their respective owners.","title":"Third-party content"},{"location":"#to-contact","text":"Write to us at stephen@longan-labs.cc with subject line \"Longan Docs\". Thanks","title":"To Contact"},{"location":"1011001/","text":"Introduction The temperature card features LM75A which is a temperature-to-digital converter using an on-chip band gap temperature sensor and Sigma-delta A-to-D conversion technique. It supports two wire I2C bus interface. The front of the temperature card has following components. LM75A digital temperature sensor Gold fingers (edge connector) Connectors Module card LED indicator Specifications Voltage: 5V Resolution: 0.125 degrees Temperature Range: -55\u00b0 C to 125\u00b0 C Supports two wire I2C bus interface Error of \u00b1 3 \u00b0 C I2C Address The Temperature card at the factory default I2C address of 0x01. The factory default I2C address is printed on the back of the card. Pins The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the temperature card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the temperature card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. I2C Following pins can be used for I2C communication. SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL : Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24) Power Following pins connect with the common power bus of the board. VCC : Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND : To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28) I2C Bus and UART Test Point You can solder a break away header (straight, 0.1\u201d pin spacing) to the I2C bus test point. The I2C bus requires two wires to communicate with the device, a serial data line (SDA) and a serial clock line (SCL). There is an additional RX, TX, VCC, and GND that is not part of the I2C interface. How to Use The temperature card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board Pi Hap When you plugging, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board. Getting Ready You can use the extension board to connect any Longan card with the Carduino. First take the Extension board. Next, plug the temperature card in to one of the edge connector slot. Then plug the Carduino in to another edge connector slot. Finally, connect the extension board with your computer using a Type-C USB cable (you can use either USB connector on the Carduino or the Extension board). Reading Temperature The sample code can be loaded to your Arduino IDE by clicking on File Examples LonganCards ReadSensor . If you have trouble loading the ReadSensor sketch from the examples, you can copy and paste the code below into the Arduino editor. #include Wire.h #include CardsDfs.h #include LonganCards.h CARD_INFO card; int addr = 0; int cntSensor = 0; float sensorValue[10]; float str2num(unsigned char *str) { float num = 0; memcpy((unsigned char *)( num), str, 4); return num; } void setup() { // put your setup code here, to run once: Serial.begin(115200); Wire.begin(); while(!Serial.available()); addr = card.scan(); if(0 == addr) { Serial.println( NO DEVICE! ); while(1); } card.getInfo(); card.disp(); cntSensor = card.senCnt; } void loop() { for(int i=0; i cntSensor; i++) { sensorValue[i] = getValue(i); Serial.print(sensorValue[i], 2); Serial.print( \\t ); } Serial.println(); delay(100); } float getValue(int s) { unsigned char dta[10]; unsigned long len = 0; Wire.beginTransmission(addr); Wire.write(REG_VALUE_START+s); // ADDR_DATA_START = 0x30 Wire.endTransmission(); delay(1); Wire.requestFrom(addr, 6); delay(1); while(Wire.available()) { dta[len++] = Wire.read(); } return str2num( dta[1]); } // END FILE Connect the Type-C USB cable to the USB connector of the Carduino and connect the other end to your computer. Next, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards. Then select the proper port in Tools Port (the Serial/COM port of your Carduino) . Next, upload the program by clicking Sketch Upload . It will take some time to compile and upload the sketch into the Carduino. Once uploaded, open the Serial Monitor by clicking Tools Serial Monitor . In the Serial Monitor, select 115200 baud from the drop-down list. Then type any number or character (E.g. 1) and click Send button. First, it will output the device information of your temperature card such as I2C address, device id, number of sensors, name length, name, SKU, and version. Then it will continually output the temperature. The blue LED on the ATmega 168P module will blink quickly and continually during the temperature reading from Carduino using I2C communication protocol.","title":"Temperature Card"},{"location":"1011001/#introduction","text":"The temperature card features LM75A which is a temperature-to-digital converter using an on-chip band gap temperature sensor and Sigma-delta A-to-D conversion technique. It supports two wire I2C bus interface. The front of the temperature card has following components. LM75A digital temperature sensor Gold fingers (edge connector) Connectors Module card LED indicator","title":"Introduction"},{"location":"1011001/#specifications","text":"Voltage: 5V Resolution: 0.125 degrees Temperature Range: -55\u00b0 C to 125\u00b0 C Supports two wire I2C bus interface Error of \u00b1 3 \u00b0 C","title":"Specifications"},{"location":"1011001/#i2c-address","text":"The Temperature card at the factory default I2C address of 0x01. The factory default I2C address is printed on the back of the card.","title":"I2C Address"},{"location":"1011001/#pins","text":"The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the temperature card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the temperature card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers.","title":"Pins"},{"location":"1011001/#i2c","text":"Following pins can be used for I2C communication. SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL : Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24)","title":"I2C"},{"location":"1011001/#power","text":"Following pins connect with the common power bus of the board. VCC : Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND : To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28)","title":"Power"},{"location":"1011001/#i2c-bus-and-uart-test-point","text":"You can solder a break away header (straight, 0.1\u201d pin spacing) to the I2C bus test point. The I2C bus requires two wires to communicate with the device, a serial data line (SDA) and a serial clock line (SCL). There is an additional RX, TX, VCC, and GND that is not part of the I2C interface.","title":"I2C Bus and UART Test Point"},{"location":"1011001/#how-to-use","text":"The temperature card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board Pi Hap When you plugging, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board.","title":"How to Use"},{"location":"1011001/#getting-ready","text":"You can use the extension board to connect any Longan card with the Carduino. First take the Extension board. Next, plug the temperature card in to one of the edge connector slot. Then plug the Carduino in to another edge connector slot. Finally, connect the extension board with your computer using a Type-C USB cable (you can use either USB connector on the Carduino or the Extension board).","title":"Getting Ready"},{"location":"1011001/#reading-temperature","text":"The sample code can be loaded to your Arduino IDE by clicking on File Examples LonganCards ReadSensor . If you have trouble loading the ReadSensor sketch from the examples, you can copy and paste the code below into the Arduino editor. #include Wire.h #include CardsDfs.h #include LonganCards.h CARD_INFO card; int addr = 0; int cntSensor = 0; float sensorValue[10]; float str2num(unsigned char *str) { float num = 0; memcpy((unsigned char *)( num), str, 4); return num; } void setup() { // put your setup code here, to run once: Serial.begin(115200); Wire.begin(); while(!Serial.available()); addr = card.scan(); if(0 == addr) { Serial.println( NO DEVICE! ); while(1); } card.getInfo(); card.disp(); cntSensor = card.senCnt; } void loop() { for(int i=0; i cntSensor; i++) { sensorValue[i] = getValue(i); Serial.print(sensorValue[i], 2); Serial.print( \\t ); } Serial.println(); delay(100); } float getValue(int s) { unsigned char dta[10]; unsigned long len = 0; Wire.beginTransmission(addr); Wire.write(REG_VALUE_START+s); // ADDR_DATA_START = 0x30 Wire.endTransmission(); delay(1); Wire.requestFrom(addr, 6); delay(1); while(Wire.available()) { dta[len++] = Wire.read(); } return str2num( dta[1]); } // END FILE Connect the Type-C USB cable to the USB connector of the Carduino and connect the other end to your computer. Next, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards. Then select the proper port in Tools Port (the Serial/COM port of your Carduino) . Next, upload the program by clicking Sketch Upload . It will take some time to compile and upload the sketch into the Carduino. Once uploaded, open the Serial Monitor by clicking Tools Serial Monitor . In the Serial Monitor, select 115200 baud from the drop-down list. Then type any number or character (E.g. 1) and click Send button. First, it will output the device information of your temperature card such as I2C address, device id, number of sensors, name length, name, SKU, and version. Then it will continually output the temperature. The blue LED on the ATmega 168P module will blink quickly and continually during the temperature reading from Carduino using I2C communication protocol.","title":"Reading Temperature"},{"location":"1011007/","text":"Introduction The Rotary Angle card produces digital output between 0 and 1023 with Carduino. The angular range of the potentiometer is 300 degrees with a linear change in value. The Rotary Angle card converts the analog potentiometer reading to digital using the internal ADC converter. The output ranges from 0-1023 and can be read via I2C. Specifications Voltage: 5V Output: 0 - 1023 Resistance: 10k ohms Angular range: 300 degrees I2C Address The default I2C address of the Rotary Angle card is printed on the back side which is 0x07. However, you can modify it to a different address with the card firmware. The Rotary Angle card has an ATmaga168PA microprocessor running the card firmware ( https://github.com/Longan-Labs/Card_Firmware/tree/master/SKU1011007_Rotary_Angle_Card ). The card firmware reads data from the Potentiometer and write to the I2C bus using Software I2C. The Rotary Angle card card works as an I2C slave device. You can use Wire library ( https://www.arduino.cc/en/reference/wire ) to read data from the card. The data can be retrieved from the \u2018Sensor value' register at 0x30. The sensor value returns 4 bytes. Following figure presents the Sensor value format. Pins The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the Rotary Angle card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the Rotary Angle card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. I2C Following pins can be used for I2C communication. The I2C bus requires two wires to communicate with the device, a serial data line (SDA) and a serial clock line (SCL). SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL: Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24) Power Following pins connect with the common power bus of a board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28) Updating Card Firmware There may be times when you may want to update the card firmware. If that's the case, this section will show you how to do it. Take the Rotary Angle card and solder the two UART pads on the back side. Plug the Rotary Angle card into one of the edge connector slots of the Extension board. Connect the Extension board with your computer using a Type-C USB cable. Download the card firmware from https://github.com/Longan-Labs/Card_Firmware/blob/master/SKU1011007_Rotary_Angle_Card/ Open the firmware file named SKU1011007_Rotary_Angle_Card.ino with the Arduino IDE. Choose Tools Board LonganCard (Atmega 168PA) Choose Tools Port (the Serial/COM port of your Atmega 168PA). clicking Sketch Upload. It will take some time to compile and upload the sketch into the ATmega 168PA. How to Use The Rotary Angle card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board Pi Hap When you plug, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board. Getting Ready You can use the extension board to connect any Longan card with the Carduino. First take the Extension board. Next, plug the Rotary Angle card in to one of the edge connector slot. Then plug the Carduino in to another edge connector slot. Finally, connect the extension board with your computer using a Type-C USB cable (you can use either USB connector on the Carduino or the Extension board). Reading Senosr Data The sample code can be loaded to your Arduino IDE by clicking on File Examples LonganCards ReadSensor . If you have trouble loading the ReadSensor sketch from the examples, you can copy and paste the code below into the Arduino editor. #include Wire.h #include CardsDfs.h #include LonganCards.h CARD_INFO card; int addr = 0; int cntSensor = 0; float sensorValue[10]; float str2num(unsigned char *str) { float num = 0; memcpy((unsigned char *)( num), str, 4); return num; } void setup() { // put your setup code here, to run once: Serial.begin(115200); Wire.begin(); while(!Serial.available()); addr = card.scan(); if(0 == addr) { Serial.println( NO DEVICE! ); while(1); } card.getInfo(); card.disp(); cntSensor = card.senCnt; } void loop() { for(int i=0; i cntSensor; i++) { sensorValue[i] = getValue(i); Serial.print(sensorValue[i], 2); Serial.print( \\t ); } Serial.println(); delay(100); } float getValue(int s) { unsigned char dta[10]; unsigned long len = 0; Wire.beginTransmission(addr); Wire.write(REG_VALUE_START+s); // ADDR_DATA_START = 0x30 Wire.endTransmission(); delay(1); Wire.requestFrom(addr, 6); delay(1); while(Wire.available()) { dta[len++] = Wire.read(); } return str2num( dta[1]); } // END FILE First, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards . Next, select the proper port in Tools Port (the Serial/COM port of your Carduino) . Then upload the program by clicking Sketch Upload . It will take some time to compile and upload the sketch into the Carduino. Once uploaded, open the Serial Monitor by clicking Tools Serial Monitor . In the Serial Monitor, select 115200 baud from the drop-down list. Then type any number or character (E.g. 1) and click Send button. First, it will output the device information of your Rotary Angle card such as I2C address, device id, number of sensors, name length, name, SKU, and version. Now rotate the potentiometer knob clockwise. The Serial Monitor will output the potentiometer readings between 0 -1023. (Rotating the knob clockwose increases the values and counter clockwise decreses the values.) The blue LED on the ATmega 168PA module will blink quickly and continually during the sensor data reading from Carduino using I2C communication protocol. Resources Eagle files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1014001_OLED_Display_Card Card firmware: https://github.com/Longan-Labs/Card_Firmware/tree/master/SKU1011007_Rotary_Angle_Card","title":"Rotary Angle Card"},{"location":"1011007/#introduction","text":"The Rotary Angle card produces digital output between 0 and 1023 with Carduino. The angular range of the potentiometer is 300 degrees with a linear change in value. The Rotary Angle card converts the analog potentiometer reading to digital using the internal ADC converter. The output ranges from 0-1023 and can be read via I2C.","title":"Introduction"},{"location":"1011007/#specifications","text":"Voltage: 5V Output: 0 - 1023 Resistance: 10k ohms Angular range: 300 degrees","title":"Specifications"},{"location":"1011007/#i2c-address","text":"The default I2C address of the Rotary Angle card is printed on the back side which is 0x07. However, you can modify it to a different address with the card firmware. The Rotary Angle card has an ATmaga168PA microprocessor running the card firmware ( https://github.com/Longan-Labs/Card_Firmware/tree/master/SKU1011007_Rotary_Angle_Card ). The card firmware reads data from the Potentiometer and write to the I2C bus using Software I2C. The Rotary Angle card card works as an I2C slave device. You can use Wire library ( https://www.arduino.cc/en/reference/wire ) to read data from the card. The data can be retrieved from the \u2018Sensor value' register at 0x30. The sensor value returns 4 bytes. Following figure presents the Sensor value format.","title":"I2C Address"},{"location":"1011007/#pins","text":"The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the Rotary Angle card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the Rotary Angle card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers.","title":"Pins"},{"location":"1011007/#i2c","text":"Following pins can be used for I2C communication. The I2C bus requires two wires to communicate with the device, a serial data line (SDA) and a serial clock line (SCL). SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL: Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24)","title":"I2C"},{"location":"1011007/#power","text":"Following pins connect with the common power bus of a board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28)","title":"Power"},{"location":"1011007/#updating-card-firmware","text":"There may be times when you may want to update the card firmware. If that's the case, this section will show you how to do it. Take the Rotary Angle card and solder the two UART pads on the back side. Plug the Rotary Angle card into one of the edge connector slots of the Extension board. Connect the Extension board with your computer using a Type-C USB cable. Download the card firmware from https://github.com/Longan-Labs/Card_Firmware/blob/master/SKU1011007_Rotary_Angle_Card/ Open the firmware file named SKU1011007_Rotary_Angle_Card.ino with the Arduino IDE. Choose Tools Board LonganCard (Atmega 168PA) Choose Tools Port (the Serial/COM port of your Atmega 168PA). clicking Sketch Upload. It will take some time to compile and upload the sketch into the ATmega 168PA.","title":"Updating Card Firmware"},{"location":"1011007/#how-to-use","text":"The Rotary Angle card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board Pi Hap When you plug, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board.","title":"How to Use"},{"location":"1011007/#getting-ready","text":"You can use the extension board to connect any Longan card with the Carduino. First take the Extension board. Next, plug the Rotary Angle card in to one of the edge connector slot. Then plug the Carduino in to another edge connector slot. Finally, connect the extension board with your computer using a Type-C USB cable (you can use either USB connector on the Carduino or the Extension board).","title":"Getting Ready"},{"location":"1011007/#reading-senosr-data","text":"The sample code can be loaded to your Arduino IDE by clicking on File Examples LonganCards ReadSensor . If you have trouble loading the ReadSensor sketch from the examples, you can copy and paste the code below into the Arduino editor. #include Wire.h #include CardsDfs.h #include LonganCards.h CARD_INFO card; int addr = 0; int cntSensor = 0; float sensorValue[10]; float str2num(unsigned char *str) { float num = 0; memcpy((unsigned char *)( num), str, 4); return num; } void setup() { // put your setup code here, to run once: Serial.begin(115200); Wire.begin(); while(!Serial.available()); addr = card.scan(); if(0 == addr) { Serial.println( NO DEVICE! ); while(1); } card.getInfo(); card.disp(); cntSensor = card.senCnt; } void loop() { for(int i=0; i cntSensor; i++) { sensorValue[i] = getValue(i); Serial.print(sensorValue[i], 2); Serial.print( \\t ); } Serial.println(); delay(100); } float getValue(int s) { unsigned char dta[10]; unsigned long len = 0; Wire.beginTransmission(addr); Wire.write(REG_VALUE_START+s); // ADDR_DATA_START = 0x30 Wire.endTransmission(); delay(1); Wire.requestFrom(addr, 6); delay(1); while(Wire.available()) { dta[len++] = Wire.read(); } return str2num( dta[1]); } // END FILE First, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards . Next, select the proper port in Tools Port (the Serial/COM port of your Carduino) . Then upload the program by clicking Sketch Upload . It will take some time to compile and upload the sketch into the Carduino. Once uploaded, open the Serial Monitor by clicking Tools Serial Monitor . In the Serial Monitor, select 115200 baud from the drop-down list. Then type any number or character (E.g. 1) and click Send button. First, it will output the device information of your Rotary Angle card such as I2C address, device id, number of sensors, name length, name, SKU, and version. Now rotate the potentiometer knob clockwise. The Serial Monitor will output the potentiometer readings between 0 -1023. (Rotating the knob clockwose increases the values and counter clockwise decreses the values.) The blue LED on the ATmega 168PA module will blink quickly and continually during the sensor data reading from Carduino using I2C communication protocol.","title":"Reading Senosr Data"},{"location":"1011007/#resources","text":"Eagle files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1014001_OLED_Display_Card Card firmware: https://github.com/Longan-Labs/Card_Firmware/tree/master/SKU1011007_Rotary_Angle_Card","title":"Resources"},{"location":"1011008/","text":"Introduction The BME280 card features BOSCH BME280 sensor which provides humidity, pressure, and temperature. The BME280 card provides following sensors through the Software I2C. Temperature Humidity Pressure Altitude The altitude is calculated on the fly. The front side of the BME280 card has following things. BME280 \u2013 has 3 sensors for temperature, humidity, and preassue ATmega 168PA microprocessor \u2013 runs card firmware 30 gold fingers \u2013 connects with any Longan board LED indicator \u2013 flashes when Carduino read/write data to the card via I2C Two 4 pin SH1.0 connectors \u2013 allows you to connect with MCUs or cards using dupont cables and communicates via I2C. I2C Address The default I2C address of the BME card is printed on the back side which is 0x08. However, you can modify it to a different address with the card firmware. The BME280 card has an ATmaga168PA microprocessor running the card firmware ( https://github.com/Longan-Labs/Card_Firmware/tree/master/SKU1011008_BME280_Card ). The card firmware reads data from the BME280 (from all 3 sensors; temperature, humidity, and pressure) and write to the I2C bus using Software I2C. The BME280 card works as an I2C slave device. You can use Wire library ( https://www.arduino.cc/en/reference/wire ) to read data from the card. The data can be retrieved from the \u2018Sensor value' registers ranging from 0x30 \u2013 0x33F. Each sensor value returns 4 bytes. Following figure presents the Sensor value format. Each sensor has its own data format as shown in the following figure. Pins The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the BME280 card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the BME280 card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. I2C Following pins can be used for I2C communication. The I2C bus requires two wires to communicate with the device, a serial data line (SDA) and a serial clock line (SCL). SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL: Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24) Power Following pins connect with the common power bus of a board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28) I2C and UART Test Point You can solder a break away header (straight, 0.1\u201d pin spacing) to the I2C and UART test point. You can connect any I2C device with SAL and SCL pins. You can also connect a device has a serial port with RX and TX pins. The VCC and GND pins can be used to power any device requires 5V to operate. Updating Card Firmware There may be times when you may want to update the card firmware. If that's the case, this section will show you how to do it. Take the BME280 card and solder the two UART pads on the back side. Plug the BME280 card into one of the edge connector slots of the Extension board. Connect the Extension board with your computer using a Type-C USB cable. Download the card firmware from https://github.com/Longan-Labs/Card_Firmware/tree/master/SKU1011008_BME280_Card Open the firmware file named SKU1011008_BME280_Card.ino with the Arduino IDE. Choose Tools Board LonganCard (Atmega 168PA) Choose Tools Port (the Serial/COM port of your Atmega 168PA). clicking Sketch Upload. It will take some time to compile and upload the sketch into the ATmega 168PA. How to Use The BME280 card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board Pi Hap When you plug, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board. Getting Ready You can use the extension board to connect any Longan card with the Carduino. First take the Extension board. Next, plug the BME280 card in to one of the edge connector slot. Then plug the Carduino in to another edge connector slot. Finally, connect the extension board with your computer using a Type-C USB cable (you can use either USB connector on the Carduino or the Extension board). Reading Senosr Data The sample code can be loaded to your Arduino IDE by clicking on File Examples LonganCards ReadSensor. If you have trouble loading the ReadSensor sketch from the examples, you can copy and paste the code below into the Arduino editor. #include Wire.h #include CardsDfs.h #include LonganCards.h CARD_INFO card; int addr = 0; int cntSensor = 0; float sensorValue[10]; float str2num(unsigned char *str) { float num = 0; memcpy((unsigned char *)( num), str, 4); return num; } void setup() { // put your setup code here, to run once: Serial.begin(115200); Wire.begin(); while(!Serial.available()); addr = card.scan(); if(0 == addr) { Serial.println( NO DEVICE! ); while(1); } card.getInfo(); card.disp(); cntSensor = card.senCnt; } void loop() { for(int i=0; i cntSensor; i++) { sensorValue[i] = getValue(i); Serial.print(sensorValue[i], 2); Serial.print( \\t ); } Serial.println(); delay(100); } float getValue(int s) { unsigned char dta[10]; unsigned long len = 0; Wire.beginTransmission(addr); Wire.write(REG_VALUE_START+s); // ADDR_DATA_START = 0x30 Wire.endTransmission(); delay(1); Wire.requestFrom(addr, 6); delay(1); while(Wire.available()) { dta[len++] = Wire.read(); } return str2num( dta[1]); } // END FILE Connect the Type-C USB cable to the USB connector of the Carduino and connect the other end to your computer. Next, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards. Then select the proper port in Tools Port (the Serial/COM port of your Carduino). Next, upload the program by clicking Sketch Upload. It will take some time to compile and upload the sketch into the Carduino. Once uploaded, open the Serial Monitor by clicking Tools Serial Monitor. In the Serial Monitor, select 115200 baud from the drop-down list. Then type any number or character (E.g. 1) and click Send button. First, it will output the device information of your BME280 card such as I2C address, device id, number of sensors, name length, name, SKU, and version. Then it will continually output the temperature, humidity, pressure, and altitude. Here is the list of units associated with each sensor reading. Temperature - Celsius (\u00b0C) Humidity - Relative Humidity (RH) Pressure - Pascal (Pa) Altitude - meter (m) The blue LED on the ATmega 168PA module will blink quickly and continually during the sensor data reading from Carduino using I2C communication protocol. Resources Eagle files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1011008_BME280_Card Card firmware: https://github.com/Longan-Labs/Card_Firmware/tree/master/SKU1011008_BME280_Card","title":"BME280 Card"},{"location":"1011008/#introduction","text":"The BME280 card features BOSCH BME280 sensor which provides humidity, pressure, and temperature. The BME280 card provides following sensors through the Software I2C. Temperature Humidity Pressure Altitude The altitude is calculated on the fly. The front side of the BME280 card has following things. BME280 \u2013 has 3 sensors for temperature, humidity, and preassue ATmega 168PA microprocessor \u2013 runs card firmware 30 gold fingers \u2013 connects with any Longan board LED indicator \u2013 flashes when Carduino read/write data to the card via I2C Two 4 pin SH1.0 connectors \u2013 allows you to connect with MCUs or cards using dupont cables and communicates via I2C.","title":"Introduction"},{"location":"1011008/#i2c-address","text":"The default I2C address of the BME card is printed on the back side which is 0x08. However, you can modify it to a different address with the card firmware. The BME280 card has an ATmaga168PA microprocessor running the card firmware ( https://github.com/Longan-Labs/Card_Firmware/tree/master/SKU1011008_BME280_Card ). The card firmware reads data from the BME280 (from all 3 sensors; temperature, humidity, and pressure) and write to the I2C bus using Software I2C. The BME280 card works as an I2C slave device. You can use Wire library ( https://www.arduino.cc/en/reference/wire ) to read data from the card. The data can be retrieved from the \u2018Sensor value' registers ranging from 0x30 \u2013 0x33F. Each sensor value returns 4 bytes. Following figure presents the Sensor value format. Each sensor has its own data format as shown in the following figure.","title":"I2C Address"},{"location":"1011008/#pins","text":"The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the BME280 card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the BME280 card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers.","title":"Pins"},{"location":"1011008/#i2c","text":"Following pins can be used for I2C communication. The I2C bus requires two wires to communicate with the device, a serial data line (SDA) and a serial clock line (SCL). SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL: Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24)","title":"I2C"},{"location":"1011008/#power","text":"Following pins connect with the common power bus of a board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28)","title":"Power"},{"location":"1011008/#i2c-and-uart-test-point","text":"You can solder a break away header (straight, 0.1\u201d pin spacing) to the I2C and UART test point. You can connect any I2C device with SAL and SCL pins. You can also connect a device has a serial port with RX and TX pins. The VCC and GND pins can be used to power any device requires 5V to operate.","title":"I2C and UART Test Point"},{"location":"1011008/#updating-card-firmware","text":"There may be times when you may want to update the card firmware. If that's the case, this section will show you how to do it. Take the BME280 card and solder the two UART pads on the back side. Plug the BME280 card into one of the edge connector slots of the Extension board. Connect the Extension board with your computer using a Type-C USB cable. Download the card firmware from https://github.com/Longan-Labs/Card_Firmware/tree/master/SKU1011008_BME280_Card Open the firmware file named SKU1011008_BME280_Card.ino with the Arduino IDE. Choose Tools Board LonganCard (Atmega 168PA) Choose Tools Port (the Serial/COM port of your Atmega 168PA). clicking Sketch Upload. It will take some time to compile and upload the sketch into the ATmega 168PA.","title":"Updating Card Firmware"},{"location":"1011008/#how-to-use","text":"The BME280 card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board Pi Hap When you plug, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board.","title":"How to Use"},{"location":"1011008/#getting-ready","text":"You can use the extension board to connect any Longan card with the Carduino. First take the Extension board. Next, plug the BME280 card in to one of the edge connector slot. Then plug the Carduino in to another edge connector slot. Finally, connect the extension board with your computer using a Type-C USB cable (you can use either USB connector on the Carduino or the Extension board).","title":"Getting Ready"},{"location":"1011008/#reading-senosr-data","text":"The sample code can be loaded to your Arduino IDE by clicking on File Examples LonganCards ReadSensor. If you have trouble loading the ReadSensor sketch from the examples, you can copy and paste the code below into the Arduino editor. #include Wire.h #include CardsDfs.h #include LonganCards.h CARD_INFO card; int addr = 0; int cntSensor = 0; float sensorValue[10]; float str2num(unsigned char *str) { float num = 0; memcpy((unsigned char *)( num), str, 4); return num; } void setup() { // put your setup code here, to run once: Serial.begin(115200); Wire.begin(); while(!Serial.available()); addr = card.scan(); if(0 == addr) { Serial.println( NO DEVICE! ); while(1); } card.getInfo(); card.disp(); cntSensor = card.senCnt; } void loop() { for(int i=0; i cntSensor; i++) { sensorValue[i] = getValue(i); Serial.print(sensorValue[i], 2); Serial.print( \\t ); } Serial.println(); delay(100); } float getValue(int s) { unsigned char dta[10]; unsigned long len = 0; Wire.beginTransmission(addr); Wire.write(REG_VALUE_START+s); // ADDR_DATA_START = 0x30 Wire.endTransmission(); delay(1); Wire.requestFrom(addr, 6); delay(1); while(Wire.available()) { dta[len++] = Wire.read(); } return str2num( dta[1]); } // END FILE Connect the Type-C USB cable to the USB connector of the Carduino and connect the other end to your computer. Next, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards. Then select the proper port in Tools Port (the Serial/COM port of your Carduino). Next, upload the program by clicking Sketch Upload. It will take some time to compile and upload the sketch into the Carduino. Once uploaded, open the Serial Monitor by clicking Tools Serial Monitor. In the Serial Monitor, select 115200 baud from the drop-down list. Then type any number or character (E.g. 1) and click Send button. First, it will output the device information of your BME280 card such as I2C address, device id, number of sensors, name length, name, SKU, and version. Then it will continually output the temperature, humidity, pressure, and altitude. Here is the list of units associated with each sensor reading. Temperature - Celsius (\u00b0C) Humidity - Relative Humidity (RH) Pressure - Pascal (Pa) Altitude - meter (m) The blue LED on the ATmega 168PA module will blink quickly and continually during the sensor data reading from Carduino using I2C communication protocol.","title":"Reading Senosr Data"},{"location":"1011008/#resources","text":"Eagle files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1011008_BME280_Card Card firmware: https://github.com/Longan-Labs/Card_Firmware/tree/master/SKU1011008_BME280_Card","title":"Resources"},{"location":"1011010/","text":"Introduction The Longan Light Sensor Card features TEMT6000 ambient light sensor. It is sensitive to the visible spectrum. With Longan Light Sensor Card, you can bring the ability to detect light level to any project. The light sensor on the Light Sensor Card will detect the intensity of light of its surroundings. It outputs values ranging from 0 - 1023 where 0 indicates dark and 1023 indicates bright light. If you want to get the visible light intensity in lux (lx), check out our other version here. NOTE: The Light sensor card supports two wire I2C bus interface. The front of the Light Sensor Card has following components. TEMT6000 silicon NPN epitaxial planar phototransistor ( http://pdf1.alldatasheet.com/datasheet-pdf/view/117488/VISHAY/TEMT6000.html ) 30 gold fingers (30 pin edge connector) - allows you to plug the card into any edge connector slot of a Longan board. ATmega 168PA microprocessor - runs card firmware. LED indicator \u2013 flashes when Carduino read/write data from/to the card through I2C. Two 4 pin SH1.0 connectors - allows you to connect MCUs or cards which support I2C communication protocol with dupont cables. Specifications Voltage: 5V Adapted to human eye responsivity Wide angle of half sensitivity \u03d5 = \u00b1 60\u00b0 Supports two wire I2C bus interface I2C Address The default I2C address is printed on the back side of the card which is 0x08. However, you can change it to a different address with the card firmware (Read our wiki for how to change the default I2C address of a card.). Pins The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the Light sensor card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the Light sensor card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. Among the 30 pins, following pins can be used for I2C communication. SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL: Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24) Also, following pins connect with the common power bus of the board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28) How to Use The Light sensor card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board PI Hap When you plug, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board. Use with Extension Board You can use the extension board to connect any Longan card with the Carduino. Take the Extension board. Plug the Light sensor card into one of the edge connector slot. Plug the Carduino into another edge connector slot. Connect the extension board with your computer using a Type-C USB cable (you can use either USB connector on the Carduino or the Extension board). Reading Visible Light Intensity The sample code can be loaded to your Arduino IDE by clicking on File Examples LonganCards ReadSensor . If you have trouble loading the sketch from the examples, you can copy and paste the code below into the Arduino editor. #include Wire.h #include CardsDfs.h #include LonganCards.h CARD_INFO card; int addr = 0; int cntSensor = 0; float sensorValue[10]; float str2num(unsigned char *str) { float num = 0; memcpy((unsigned char *)( num), str, 4); return num; } void setup() { // put your setup code here, to run once: Serial.begin(115200); Wire.begin(); while(!Serial.available()); addr = card.scan(); if(0 == addr) { Serial.println( NO DEVICE! ); while(1); } card.getInfo(); card.disp(); cntSensor = card.senCnt; } void loop() { for(int i=0; i cntSensor; i++) { sensorValue[i] = getValue(i); Serial.print(sensorValue[i], 2); Serial.print( \\t ); } Serial.println(); delay(100); } float getValue(int s) { unsigned char dta[10]; unsigned long len = 0; Wire.beginTransmission(addr); Wire.write(REG_VALUE_START+s); // ADDR_DATA_START = 0x30 Wire.endTransmission(); delay(1); Wire.requestFrom(addr, 6); delay(1); while(Wire.available()) { dta[len++] = Wire.read(); } return str2num( dta[1]); } // END FILE Next, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards . Then select the proper port in Tools Port (the Serial/COM port of your Carduino) . Next, upload the program by clicking Sketch Upload . It will take some time to compile and upload the sketch in to the Carduino. Once uploaded, open the Serial Monitor by clicking Tools Serial Monitor . In the Serial Monitor, type any number or character and click Send button. First, it will print the device information of your Light sensor card such as I2C address, device id, number of sensors, name length, name, SKU, and version to Serial Monitor. Then the real-time light sensor levels will print to Serial Monitor repeatedly. The values will fall between 0 - 1023. The blue LED on the ATmega 168P module will blink quickly and continually during the illuminance reading through I2C. Labs Lab 01 To perform this lab you will need: Light Sensor Card Carduino 32U4 OLED Display Card Extension Board USB to Type-C Cable ( https://www.longan-labs.cc/2140001.html ) Assembly Plug your cards into the slots of the Extension Board. The Extension Board will work no matter which cards are attached where. Then connect the Cardiono to the computer using USB to Type-C cable. NOTE: The Light Sensor Card outputs values ranging from 0 - 1023 where 0 indicates dark and 1023 indicates bright light. Applications Can you think of an application where a light sensor would be useful? Light sensors can be used for automatic lighting applications, such as your mobile phone that automatically adjust the brightness of the screen according to the amount of light that reaches it's light sensor and your car automatically turn on lights at dark depending on the amount of light that reaches to it's rain-light sensor. Images coming soon. Code Copy and paste the code from below into your Arduino IDE. Verify and upload the program onto your Carduino 32U4. You will see the real-time light sensor levels (0 - 1023) will print to screen repeatedly. Place the light sensor unit under a lamp. Now gently cover the Light Sensor Card with your hand. This will reduce the amount of light that reaches the sensor to nearly zero.","title":"Light Sensor Card"},{"location":"1011010/#introduction","text":"The Longan Light Sensor Card features TEMT6000 ambient light sensor. It is sensitive to the visible spectrum. With Longan Light Sensor Card, you can bring the ability to detect light level to any project. The light sensor on the Light Sensor Card will detect the intensity of light of its surroundings. It outputs values ranging from 0 - 1023 where 0 indicates dark and 1023 indicates bright light. If you want to get the visible light intensity in lux (lx), check out our other version here. NOTE: The Light sensor card supports two wire I2C bus interface. The front of the Light Sensor Card has following components. TEMT6000 silicon NPN epitaxial planar phototransistor ( http://pdf1.alldatasheet.com/datasheet-pdf/view/117488/VISHAY/TEMT6000.html ) 30 gold fingers (30 pin edge connector) - allows you to plug the card into any edge connector slot of a Longan board. ATmega 168PA microprocessor - runs card firmware. LED indicator \u2013 flashes when Carduino read/write data from/to the card through I2C. Two 4 pin SH1.0 connectors - allows you to connect MCUs or cards which support I2C communication protocol with dupont cables.","title":"Introduction"},{"location":"1011010/#specifications","text":"Voltage: 5V Adapted to human eye responsivity Wide angle of half sensitivity \u03d5 = \u00b1 60\u00b0 Supports two wire I2C bus interface","title":"Specifications"},{"location":"1011010/#i2c-address","text":"The default I2C address is printed on the back side of the card which is 0x08. However, you can change it to a different address with the card firmware (Read our wiki for how to change the default I2C address of a card.).","title":"I2C Address"},{"location":"1011010/#pins","text":"The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the Light sensor card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the Light sensor card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. Among the 30 pins, following pins can be used for I2C communication. SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL: Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24) Also, following pins connect with the common power bus of the board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28)","title":"Pins"},{"location":"1011010/#how-to-use","text":"The Light sensor card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board PI Hap When you plug, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board.","title":"How to Use"},{"location":"1011010/#use-with-extension-board","text":"You can use the extension board to connect any Longan card with the Carduino. Take the Extension board. Plug the Light sensor card into one of the edge connector slot. Plug the Carduino into another edge connector slot. Connect the extension board with your computer using a Type-C USB cable (you can use either USB connector on the Carduino or the Extension board).","title":"Use with Extension Board"},{"location":"1011010/#reading-visible-light-intensity","text":"The sample code can be loaded to your Arduino IDE by clicking on File Examples LonganCards ReadSensor . If you have trouble loading the sketch from the examples, you can copy and paste the code below into the Arduino editor. #include Wire.h #include CardsDfs.h #include LonganCards.h CARD_INFO card; int addr = 0; int cntSensor = 0; float sensorValue[10]; float str2num(unsigned char *str) { float num = 0; memcpy((unsigned char *)( num), str, 4); return num; } void setup() { // put your setup code here, to run once: Serial.begin(115200); Wire.begin(); while(!Serial.available()); addr = card.scan(); if(0 == addr) { Serial.println( NO DEVICE! ); while(1); } card.getInfo(); card.disp(); cntSensor = card.senCnt; } void loop() { for(int i=0; i cntSensor; i++) { sensorValue[i] = getValue(i); Serial.print(sensorValue[i], 2); Serial.print( \\t ); } Serial.println(); delay(100); } float getValue(int s) { unsigned char dta[10]; unsigned long len = 0; Wire.beginTransmission(addr); Wire.write(REG_VALUE_START+s); // ADDR_DATA_START = 0x30 Wire.endTransmission(); delay(1); Wire.requestFrom(addr, 6); delay(1); while(Wire.available()) { dta[len++] = Wire.read(); } return str2num( dta[1]); } // END FILE Next, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards . Then select the proper port in Tools Port (the Serial/COM port of your Carduino) . Next, upload the program by clicking Sketch Upload . It will take some time to compile and upload the sketch in to the Carduino. Once uploaded, open the Serial Monitor by clicking Tools Serial Monitor . In the Serial Monitor, type any number or character and click Send button. First, it will print the device information of your Light sensor card such as I2C address, device id, number of sensors, name length, name, SKU, and version to Serial Monitor. Then the real-time light sensor levels will print to Serial Monitor repeatedly. The values will fall between 0 - 1023. The blue LED on the ATmega 168P module will blink quickly and continually during the illuminance reading through I2C.","title":"Reading Visible Light Intensity"},{"location":"1011010/#labs","text":"","title":"Labs"},{"location":"1011010/#lab-01","text":"To perform this lab you will need: Light Sensor Card Carduino 32U4 OLED Display Card Extension Board USB to Type-C Cable ( https://www.longan-labs.cc/2140001.html )","title":"Lab 01"},{"location":"1011010/#assembly","text":"Plug your cards into the slots of the Extension Board. The Extension Board will work no matter which cards are attached where. Then connect the Cardiono to the computer using USB to Type-C cable. NOTE: The Light Sensor Card outputs values ranging from 0 - 1023 where 0 indicates dark and 1023 indicates bright light.","title":"Assembly"},{"location":"1011010/#applications","text":"Can you think of an application where a light sensor would be useful? Light sensors can be used for automatic lighting applications, such as your mobile phone that automatically adjust the brightness of the screen according to the amount of light that reaches it's light sensor and your car automatically turn on lights at dark depending on the amount of light that reaches to it's rain-light sensor. Images coming soon.","title":"Applications"},{"location":"1011010/#code","text":"Copy and paste the code from below into your Arduino IDE. Verify and upload the program onto your Carduino 32U4. You will see the real-time light sensor levels (0 - 1023) will print to screen repeatedly. Place the light sensor unit under a lamp. Now gently cover the Light Sensor Card with your hand. This will reduce the amount of light that reaches the sensor to nearly zero.","title":"Code"},{"location":"1011027/","text":"Introduction The button card provides two programmable push buttons for your project. They can be found on the back of the card. These buttons are large by comparing the standard pushbuttons and labelled as A and B. Specification Two programmable push buttons, A and B Supports two wire I2C bus interface Two 4 pin SH1.0 connectors -allows you to connect MCUs or cards which support I2C communication protocol with dupont cables. 30 gold fingers ATmega 168PA microprocessor - runs card firmware. LED indicator \u2013 flashes when Carduino read/write data from/to the card through I2C. Voltage: 5V I2C Address The default I2C address is printed on the back side of the card which is 0x1B. However, you can change it to a different address with the card firmware (Read our wiki for how to change the default I2C address of a card.). Pins The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the Button Input card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the Button Input card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. Among the 30 pins, following pins can be used for I2C communication. SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL: Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24) Also, following pins connect with the common power bus of the board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28) How to Use The Button Input card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board PI Hap When you plug, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board. Example 1 Coming soon. References *Eagle Files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1011027_Button_Input_Card","title":"Button Input Card"},{"location":"1011027/#introduction","text":"The button card provides two programmable push buttons for your project. They can be found on the back of the card. These buttons are large by comparing the standard pushbuttons and labelled as A and B.","title":"Introduction"},{"location":"1011027/#specification","text":"Two programmable push buttons, A and B Supports two wire I2C bus interface Two 4 pin SH1.0 connectors -allows you to connect MCUs or cards which support I2C communication protocol with dupont cables. 30 gold fingers ATmega 168PA microprocessor - runs card firmware. LED indicator \u2013 flashes when Carduino read/write data from/to the card through I2C. Voltage: 5V","title":"Specification"},{"location":"1011027/#i2c-address","text":"The default I2C address is printed on the back side of the card which is 0x1B. However, you can change it to a different address with the card firmware (Read our wiki for how to change the default I2C address of a card.).","title":"I2C Address"},{"location":"1011027/#pins","text":"The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the Button Input card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the Button Input card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. Among the 30 pins, following pins can be used for I2C communication. SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL: Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24) Also, following pins connect with the common power bus of the board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28)","title":"Pins"},{"location":"1011027/#how-to-use","text":"The Button Input card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board PI Hap When you plug, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board.","title":"How to Use"},{"location":"1011027/#example-1","text":"Coming soon.","title":"Example 1"},{"location":"1011027/#references","text":"*Eagle Files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1011027_Button_Input_Card","title":"References"},{"location":"1011029/","text":"Introduction The IR Receiver card allows you to detect infrared (E.g., IR signal from a remote controller). There is an IR detector on the IR Receiver card which is used to get the infrared light emitted by the Infrared Emitter. It can detect a modulated IR signal at 38 KHz. The distance between the IR Receiver card and the IR source should be less than 10 meters. NOTE: The IR Receiver Card supports two wire I2C bus interface. The front of the IR Receiver Card has following things. RS-171 IR receiver 30 gold fingers (30 pin edge connector) - allows you to plug the card into any edge connector slot of a Longan board. ATmega 168PA microprocessor - runs card firmware. LED indicator \u2013 flashes when Carduino read/write data from/to the card through I2C. Two 4 pin SH1.0 connectors - allows you to connect MCUs or cards which support I2C communication protocol with dupont cables. Specifications Voltage: 5V Range: About 10m Supports two wire I2C bus interface I2C Address The default I2C address is printed on the back side of the card which is 0x1D. However, you can change it to a different address with the card firmware (Read our wiki for how to change the default I2C address of a card.). Pins The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the IR Receiver card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the IR Receiver card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. Among the 30 pins, following pins can be used for I2C communication. SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL: Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24) Also, following pins connect with the common power bus of the board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28) How to Use The IR Receiver card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board PI Hap When you plug, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board. Example 1 Coming soon.","title":"IR Receiver Card"},{"location":"1011029/#introduction","text":"The IR Receiver card allows you to detect infrared (E.g., IR signal from a remote controller). There is an IR detector on the IR Receiver card which is used to get the infrared light emitted by the Infrared Emitter. It can detect a modulated IR signal at 38 KHz. The distance between the IR Receiver card and the IR source should be less than 10 meters. NOTE: The IR Receiver Card supports two wire I2C bus interface. The front of the IR Receiver Card has following things. RS-171 IR receiver 30 gold fingers (30 pin edge connector) - allows you to plug the card into any edge connector slot of a Longan board. ATmega 168PA microprocessor - runs card firmware. LED indicator \u2013 flashes when Carduino read/write data from/to the card through I2C. Two 4 pin SH1.0 connectors - allows you to connect MCUs or cards which support I2C communication protocol with dupont cables.","title":"Introduction"},{"location":"1011029/#specifications","text":"Voltage: 5V Range: About 10m Supports two wire I2C bus interface","title":"Specifications"},{"location":"1011029/#i2c-address","text":"The default I2C address is printed on the back side of the card which is 0x1D. However, you can change it to a different address with the card firmware (Read our wiki for how to change the default I2C address of a card.).","title":"I2C Address"},{"location":"1011029/#pins","text":"The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the IR Receiver card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the IR Receiver card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. Among the 30 pins, following pins can be used for I2C communication. SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL: Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24) Also, following pins connect with the common power bus of the board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28)","title":"Pins"},{"location":"1011029/#how-to-use","text":"The IR Receiver card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board PI Hap When you plug, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board.","title":"How to Use"},{"location":"1011029/#example-1","text":"Coming soon.","title":"Example 1"},{"location":"1012002/","text":"Introduction Buzzer card allows you to make sounds and music, or alerts when something interesting happens. The buzzer card works by making use of a single I/O pins on a Carduino. Specifications Small SMD buzzer Supports ADC Two way switch LED indicator 30 pin gold fingers I2C extension connectoor I2C and UART test point Pins The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the Buzzer card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the Buzzer card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. I2C Following pins can be used for I2C communication. SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL: Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24) Power Following pins connect with the common power bus of the board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28) Modes Buzzer card offers two modes. BUZ_ CARD mode BUZ_MCU mode BUZ_CARD Mode The BUZ_CARD mode allows you to control your Buzzer card with the Carduino pin 11 which is equivalent to the Arduino Leonardo digital pin 5. To enable this mode, slide the switch of the Buzzer card to the GAME BOARD position. Following figure shows the BUZ_CARD mode in detail. When you slide the switch to the GAME BOARD position, the BUZ and BUZ_CARD will connect together. Also, BUZ_CARD connects with the Carduino pin 11 (Arduino Leonardo digital pin 5, this is also a PWM pin). When you write a sketch, initialize the digital pin 5 as an output. BUZ_MCU Mode BUZ_MCU mode connects the buzzer with the ATmega 168P (Arduino Mini digital pin 9) and allows you to program your Carduino to communicate the Buzzer card with I2C communication protocol. Slide the switch of the Buzzer card to the NORMAL position. Following figure shows the BUZ_MCU mode in detail. When you slide the switch to the NORMAL position, the BUZ and BUZ_MCU will connect together. Also, BUZ_MCU connects with the ATmega 168P (Arduino Mini digital pin 9, this is also a PWM pin). The I2C address of the Buzzer card which is 0x42 can be found on the back of the card. How to Use The Buzzer card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board Pi Hap When you plugging, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line and I/O line of the board. It will also connect to the common power bus of the board. Getting Ready You can use the extension board to connect any Longan card with the Carduino. First take the Extension board. Next, plug the Buzzer card in to one of the edge connector slot. Then plug the Carduino in to another edge connector slot. Finally, connect the extension board with your computer using a Type-C USB cable (you can use either USB connector on the Carduino or the Extension board). Playing Sounds Copy and paste the sketch below into the Arduino editor. const int buzzer = 5; //buzzer is connected to Carduino pin 11 (Leonardo digital pin 5) void setup(){ pinMode(buzzer, OUTPUT); // define pin 5 as an output } void loop(){ tone(buzzer, 1000); // Play 1KHz tone delay(1000); // for 1 second noTone(buzzer); // Stop tone delay(1000); // for 1sec } Save the file to your computer's hard drive as buzzer_1. Connect the Type-C USB cable to the USB connector of the Carduino and connect the other end to your computer. Slide the switch on the Buzzer card to the GAME BOARD position. Next, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards . After that, select the proper port in Tools Port (the Serial/COM port of your Carduino) . Then upload the program by clicking Sketch Upload . It will take some time to compile and upload the sketch into the Carduino. Once uploaded, the buzzer will play a beep-beep sound at 1000 Hz continually.","title":"Buzzer Card"},{"location":"1012002/#introduction","text":"Buzzer card allows you to make sounds and music, or alerts when something interesting happens. The buzzer card works by making use of a single I/O pins on a Carduino.","title":"Introduction"},{"location":"1012002/#specifications","text":"Small SMD buzzer Supports ADC Two way switch LED indicator 30 pin gold fingers I2C extension connectoor I2C and UART test point","title":"Specifications"},{"location":"1012002/#pins","text":"The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the Buzzer card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the Buzzer card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers.","title":"Pins"},{"location":"1012002/#i2c","text":"Following pins can be used for I2C communication. SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL: Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24)","title":"I2C"},{"location":"1012002/#power","text":"Following pins connect with the common power bus of the board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28)","title":"Power"},{"location":"1012002/#modes","text":"Buzzer card offers two modes. BUZ_ CARD mode BUZ_MCU mode","title":"Modes"},{"location":"1012002/#buz_card-mode","text":"The BUZ_CARD mode allows you to control your Buzzer card with the Carduino pin 11 which is equivalent to the Arduino Leonardo digital pin 5. To enable this mode, slide the switch of the Buzzer card to the GAME BOARD position. Following figure shows the BUZ_CARD mode in detail. When you slide the switch to the GAME BOARD position, the BUZ and BUZ_CARD will connect together. Also, BUZ_CARD connects with the Carduino pin 11 (Arduino Leonardo digital pin 5, this is also a PWM pin). When you write a sketch, initialize the digital pin 5 as an output.","title":"BUZ_CARD Mode"},{"location":"1012002/#buz_mcu-mode","text":"BUZ_MCU mode connects the buzzer with the ATmega 168P (Arduino Mini digital pin 9) and allows you to program your Carduino to communicate the Buzzer card with I2C communication protocol. Slide the switch of the Buzzer card to the NORMAL position. Following figure shows the BUZ_MCU mode in detail. When you slide the switch to the NORMAL position, the BUZ and BUZ_MCU will connect together. Also, BUZ_MCU connects with the ATmega 168P (Arduino Mini digital pin 9, this is also a PWM pin). The I2C address of the Buzzer card which is 0x42 can be found on the back of the card.","title":"BUZ_MCU Mode"},{"location":"1012002/#how-to-use","text":"The Buzzer card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board Pi Hap When you plugging, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line and I/O line of the board. It will also connect to the common power bus of the board.","title":"How to Use"},{"location":"1012002/#getting-ready","text":"You can use the extension board to connect any Longan card with the Carduino. First take the Extension board. Next, plug the Buzzer card in to one of the edge connector slot. Then plug the Carduino in to another edge connector slot. Finally, connect the extension board with your computer using a Type-C USB cable (you can use either USB connector on the Carduino or the Extension board).","title":"Getting Ready"},{"location":"1012002/#playing-sounds","text":"Copy and paste the sketch below into the Arduino editor. const int buzzer = 5; //buzzer is connected to Carduino pin 11 (Leonardo digital pin 5) void setup(){ pinMode(buzzer, OUTPUT); // define pin 5 as an output } void loop(){ tone(buzzer, 1000); // Play 1KHz tone delay(1000); // for 1 second noTone(buzzer); // Stop tone delay(1000); // for 1sec } Save the file to your computer's hard drive as buzzer_1. Connect the Type-C USB cable to the USB connector of the Carduino and connect the other end to your computer. Slide the switch on the Buzzer card to the GAME BOARD position. Next, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards . After that, select the proper port in Tools Port (the Serial/COM port of your Carduino) . Then upload the program by clicking Sketch Upload . It will take some time to compile and upload the sketch into the Carduino. Once uploaded, the buzzer will play a beep-beep sound at 1000 Hz continually.","title":"Playing Sounds"},{"location":"1013001/","text":"Introduction Carduino 328 is the new development board belongs to the Longan Cards Family. As its name implies it is small as of a credit card, thin, and light weight. Carduino 328 is a microcontroller board based on the ATmega328P. You can use it with any Longan board by plugging it into one of the edge connector slots. Carduino 328 supports all the Longan cards. Carduino 328 is pluggable, which means you can plug it to one of the following boards. Extension board Sensor display board Game board Car board Pi Hap There is a wide array of cards support with the Carduino 328. All cards are pluggable and share the same board to communicate with the Carduino 328. Carduino 328 allow you to quickly build prototypes and develop applications. At the Carduino\u2019s heart is an ATmega328P microprocessor and powered with the Arduino UNO bootloader allows you to program it using the Arduino IDE. We have written some exciting Arduino libraries that lets you to quickly develop applications. Here is a list of things that can be found on the front of the Carduino board. ATmega328P microprocessor Programmable LED \u2013 Connects with digital pin 13 Reset button \u2013 Re-starts the Arduino sketch Gold fingers (Edge connector) Specifications Measures 41mm x 33mm ATmega328P @16Mhz clock speed with 3.3V or 5V logic/power (datasheet: http://www.atmel.com/devices/atmega32u4.aspx ) 32KB of flash memory which 4KB used by bootloader Programmable LED - emits blue light Power indicator LED -emits green light Preloaded with the Arduino UNO bootloader Edge connector (Golden fingers) exposes 30 pins (power, digital, analog, PWM, I2C, SPI, UART) Reset button Two mounting holes PH1.0 connector Carduino comes with fully assembled and tested, with a USB interface that lets you quickly use it with the Arduino IDE. Pins Carduino 238P provides group of pins. Gold Fingers / Edge Connector The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the Carduino 328, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the Carduino 328, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. Table below presents the pin numbers and their functions. The pin functions of Carduino is exactly same with the pin functions of Arduino UNO. Power connections Carduino 328 can be powered through one of the boards with AAA battery card with 5V. Following pins allow you to power the Carduino with batteries (AAA battery card) through one of the Longan boards. VCC \u2013 5V regulated supply voltage (Front: pin #1, #29 / Back: pin #2, #30) GND \u2013 This is the common ground for all power and logic (Front: pin #3, #27 / Back: pin #4, #28) You can also hack the power pins to power the Carduino 328 with a regulated 3.3V or 5V power source. GPIO pins This is the general purpose I/O pin set for the Carduino. GPIO consists of digital, analog, I2C, SPI, and UART pins. Most pins can do PWM output. Also, all pins can be used as interrupt pins. Digital (Front: pin #9, #11, #21 / Back: pin #10, #12, #22) Analog (Front: pin #13, #19 / Back: pin #14, #20) I2C pins You can use I2C pins allow Carduino 328 to communicate with all the Longan cards (all cards are I2C enabled and comes with a factory default unique I2C address). SDA \u2013 The I2C data pin (Front: pin #5, #25 / Back: pin #6, #26) SCL \u2013 The I2C clock pin (Front: pin #7, #23 / Back: pin #8, #24) Hardware SPI pins These are the hardware SPI pins that can be used to communicate with high speed. SCK \u2013 Serial Clock (Front: pin #17) MISO - Master In Slave Out, takes data from the Carduino to the SPI device (Front: pin #15) MOSI \u2013 Master Out Slave In, takes data to the Carduino from the SPI device (Back: pin #16) Hardware UART / Serial These pins can be used to connect devices support with UART using two wires. TX \u2013 Transmits data (Front: pin #21) RX \u2013 Receives data (Back: pin #22) 10-pin Connector The 10-pin connector allows the Carduino to connect with sensors, actuators, and other devices. Table below presents the type of pins of the 10-pin connector. The pin numbers are equivalent to the pin numbers of the Arduino UNO. Pin Type V Power G Power 2 Digital 3 Digital 4 Digital 5 Digital 6 Digital 0 Analog 1 Analog 2 Analog Arduino IDE Setup First download the Arduino IDE from https://www.arduino.cc/en/Main/Software . Arduino IDE can be installed and run on Windows, Linux, and Mac OS X operating systems. Download the installer or zip file (Windows only) and install (if you have the zip file, extract it to your Windows computer\u2019s hard drive) it on your operating system. Once finished, start the Arduino IDE. Copy and paste the link below into the Additional Boards Manager URLs option in the Arduino IDE preferences ( File Preferences ). https://raw.githubusercontent.com/Longan-Labs/Longan-Board/master/package_longan_boards_index.json The Longan AVR boards supplied package includes supports for Longan Card, Carduino 328, Carduino 32U4. Once done, click OK button to save the new preference settings. Now open the Boards Manager by navigating to the Tools - Board menu. Select All from the Type drop-down menu. Then type longan in the top search bar. While typing, you will see the Longan AVR package . Click on the Longan AVR by Longan Labs and then click on Install button. Once installed, close the Boards Manager window. How to Use Carduino 328 can be plugged in to one of the edge connector slots available in the following boards. Game board Car board Sensor display board Extension board Pi Hap All Longan cards are polarized, and every pin is unique in terms of both location and function. On the front side of the Carduino, a white arrow is printed near the edge connector indicates the pin #1. Using with Extension Board We will be using Longan Extension board demonstrate how you can insert the Carduino 328 in to an edge connector slot. Take the Carduino 328, programmer card, and Extension board. Plug the Carduino 328 into one of the edge connector slots of the Extension board. Also, plug the Programmer card into another edge connector slot of the Extension board. Connect the Type-C USB cable to the USB connector of the Programmer card and connect the other end to your computer. Blink We will start off with something very simple with an LED, turning on and off, repeatedly, producing a pleasant blinking effect. The Carduino 328 has a built-in LED on digital pin 13 (Arduino UNO equivalent) emits bright blue light when turned on. You can find it on the front of the Carduino 328. Now you can upload your first Blink sketch to the Carduino 328. The Arduino IDE provides a great example for blinking a LED. There is no need to type anything, just click File Example 01.Basics Blink under Built-in Examples in the Arduino IDE. Next, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Arduino/Genuino UNOi under Longen AVR Boards . Then select the proper port in Tools Port (the Serial/COM port of your Carduino 238) . Next, upload the program by clicking Sketch Upload . It will take some time to compile and upload the sketch in to the Carduino. If you have trouble loading the Blink sketch from the examples, you can copy and paste the code below into the Arduino editor. /* Blink Turns an LED on for one second, then off for one second, repeatedly. Most Arduinos have an on-board LED you can control. On the UNO, MEGA and ZERO it is attached to digital pin 13, on MKR1000 on pin 6. LED_BUILTIN is set to the correct LED pin independent of which board is used. If you want to know what pin the on-board LED is connected to on your Arduino model, check the Technical Specs of your board at: https://www.arduino.cc/en/Main/Products modified 8 May 2014 by Scott Fitzgerald modified 2 Sep 2016 by Arturo Guadalupi modified 8 Sep 2016 by Colby Newman This example code is in the public domain. http://www.arduino.cc/en/Tutorial/Blink */ // the setup function runs once when you press reset or power the board void setup() { // initialize digital pin LED_BUILTIN as an output. pinMode(LED_BUILTIN, OUTPUT); } // the loop function runs repeatedly forever void loop() { digitalWrite(LED_BUILTIN, HIGH); // turn the LED on (HIGH is the voltage level) delay(1000); // wait for a second digitalWrite(LED_BUILTIN, LOW); // turn the LED off by making the voltage LOW delay(1000); // wait for a second } After uploading the sketch to the Carduino 328, you should see the LED on the card is blinking. Resources Eagle Files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1013001_Carduino_328 Longan AVR boards supplied package: https://raw.githubusercontent.com/Longan-Labs/Longan-Board/master/package_longan_boards_index.json Arduino IDE: https://www.arduino.cc/en/Main/Software Sample Arduino Code: https://github.com/Longan-Labs/LonganCard","title":"Carduino 328"},{"location":"1013001/#introduction","text":"Carduino 328 is the new development board belongs to the Longan Cards Family. As its name implies it is small as of a credit card, thin, and light weight. Carduino 328 is a microcontroller board based on the ATmega328P. You can use it with any Longan board by plugging it into one of the edge connector slots. Carduino 328 supports all the Longan cards. Carduino 328 is pluggable, which means you can plug it to one of the following boards. Extension board Sensor display board Game board Car board Pi Hap There is a wide array of cards support with the Carduino 328. All cards are pluggable and share the same board to communicate with the Carduino 328. Carduino 328 allow you to quickly build prototypes and develop applications. At the Carduino\u2019s heart is an ATmega328P microprocessor and powered with the Arduino UNO bootloader allows you to program it using the Arduino IDE. We have written some exciting Arduino libraries that lets you to quickly develop applications. Here is a list of things that can be found on the front of the Carduino board. ATmega328P microprocessor Programmable LED \u2013 Connects with digital pin 13 Reset button \u2013 Re-starts the Arduino sketch Gold fingers (Edge connector)","title":"Introduction"},{"location":"1013001/#specifications","text":"Measures 41mm x 33mm ATmega328P @16Mhz clock speed with 3.3V or 5V logic/power (datasheet: http://www.atmel.com/devices/atmega32u4.aspx ) 32KB of flash memory which 4KB used by bootloader Programmable LED - emits blue light Power indicator LED -emits green light Preloaded with the Arduino UNO bootloader Edge connector (Golden fingers) exposes 30 pins (power, digital, analog, PWM, I2C, SPI, UART) Reset button Two mounting holes PH1.0 connector Carduino comes with fully assembled and tested, with a USB interface that lets you quickly use it with the Arduino IDE.","title":"Specifications"},{"location":"1013001/#pins","text":"Carduino 238P provides group of pins.","title":"Pins"},{"location":"1013001/#gold-fingers-edge-connector","text":"The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the Carduino 328, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the Carduino 328, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. Table below presents the pin numbers and their functions. The pin functions of Carduino is exactly same with the pin functions of Arduino UNO.","title":"Gold Fingers / Edge Connector"},{"location":"1013001/#power-connections","text":"Carduino 328 can be powered through one of the boards with AAA battery card with 5V. Following pins allow you to power the Carduino with batteries (AAA battery card) through one of the Longan boards. VCC \u2013 5V regulated supply voltage (Front: pin #1, #29 / Back: pin #2, #30) GND \u2013 This is the common ground for all power and logic (Front: pin #3, #27 / Back: pin #4, #28) You can also hack the power pins to power the Carduino 328 with a regulated 3.3V or 5V power source.","title":"Power connections"},{"location":"1013001/#gpio-pins","text":"This is the general purpose I/O pin set for the Carduino. GPIO consists of digital, analog, I2C, SPI, and UART pins. Most pins can do PWM output. Also, all pins can be used as interrupt pins. Digital (Front: pin #9, #11, #21 / Back: pin #10, #12, #22) Analog (Front: pin #13, #19 / Back: pin #14, #20)","title":"GPIO pins"},{"location":"1013001/#i2c-pins","text":"You can use I2C pins allow Carduino 328 to communicate with all the Longan cards (all cards are I2C enabled and comes with a factory default unique I2C address). SDA \u2013 The I2C data pin (Front: pin #5, #25 / Back: pin #6, #26) SCL \u2013 The I2C clock pin (Front: pin #7, #23 / Back: pin #8, #24)","title":"I2C pins"},{"location":"1013001/#hardware-spi-pins","text":"These are the hardware SPI pins that can be used to communicate with high speed. SCK \u2013 Serial Clock (Front: pin #17) MISO - Master In Slave Out, takes data from the Carduino to the SPI device (Front: pin #15) MOSI \u2013 Master Out Slave In, takes data to the Carduino from the SPI device (Back: pin #16)","title":"Hardware SPI pins"},{"location":"1013001/#hardware-uart-serial","text":"These pins can be used to connect devices support with UART using two wires. TX \u2013 Transmits data (Front: pin #21) RX \u2013 Receives data (Back: pin #22)","title":"Hardware UART / Serial"},{"location":"1013001/#10-pin-connector","text":"The 10-pin connector allows the Carduino to connect with sensors, actuators, and other devices. Table below presents the type of pins of the 10-pin connector. The pin numbers are equivalent to the pin numbers of the Arduino UNO. Pin Type V Power G Power 2 Digital 3 Digital 4 Digital 5 Digital 6 Digital 0 Analog 1 Analog 2 Analog","title":"10-pin Connector"},{"location":"1013001/#arduino-ide-setup","text":"First download the Arduino IDE from https://www.arduino.cc/en/Main/Software . Arduino IDE can be installed and run on Windows, Linux, and Mac OS X operating systems. Download the installer or zip file (Windows only) and install (if you have the zip file, extract it to your Windows computer\u2019s hard drive) it on your operating system. Once finished, start the Arduino IDE. Copy and paste the link below into the Additional Boards Manager URLs option in the Arduino IDE preferences ( File Preferences ). https://raw.githubusercontent.com/Longan-Labs/Longan-Board/master/package_longan_boards_index.json The Longan AVR boards supplied package includes supports for Longan Card, Carduino 328, Carduino 32U4. Once done, click OK button to save the new preference settings. Now open the Boards Manager by navigating to the Tools - Board menu. Select All from the Type drop-down menu. Then type longan in the top search bar. While typing, you will see the Longan AVR package . Click on the Longan AVR by Longan Labs and then click on Install button. Once installed, close the Boards Manager window.","title":"Arduino IDE Setup"},{"location":"1013001/#how-to-use","text":"Carduino 328 can be plugged in to one of the edge connector slots available in the following boards. Game board Car board Sensor display board Extension board Pi Hap All Longan cards are polarized, and every pin is unique in terms of both location and function. On the front side of the Carduino, a white arrow is printed near the edge connector indicates the pin #1.","title":"How to Use"},{"location":"1013001/#using-with-extension-board","text":"We will be using Longan Extension board demonstrate how you can insert the Carduino 328 in to an edge connector slot. Take the Carduino 328, programmer card, and Extension board. Plug the Carduino 328 into one of the edge connector slots of the Extension board. Also, plug the Programmer card into another edge connector slot of the Extension board. Connect the Type-C USB cable to the USB connector of the Programmer card and connect the other end to your computer.","title":"Using with Extension Board"},{"location":"1013001/#blink","text":"We will start off with something very simple with an LED, turning on and off, repeatedly, producing a pleasant blinking effect. The Carduino 328 has a built-in LED on digital pin 13 (Arduino UNO equivalent) emits bright blue light when turned on. You can find it on the front of the Carduino 328. Now you can upload your first Blink sketch to the Carduino 328. The Arduino IDE provides a great example for blinking a LED. There is no need to type anything, just click File Example 01.Basics Blink under Built-in Examples in the Arduino IDE. Next, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Arduino/Genuino UNOi under Longen AVR Boards . Then select the proper port in Tools Port (the Serial/COM port of your Carduino 238) . Next, upload the program by clicking Sketch Upload . It will take some time to compile and upload the sketch in to the Carduino. If you have trouble loading the Blink sketch from the examples, you can copy and paste the code below into the Arduino editor. /* Blink Turns an LED on for one second, then off for one second, repeatedly. Most Arduinos have an on-board LED you can control. On the UNO, MEGA and ZERO it is attached to digital pin 13, on MKR1000 on pin 6. LED_BUILTIN is set to the correct LED pin independent of which board is used. If you want to know what pin the on-board LED is connected to on your Arduino model, check the Technical Specs of your board at: https://www.arduino.cc/en/Main/Products modified 8 May 2014 by Scott Fitzgerald modified 2 Sep 2016 by Arturo Guadalupi modified 8 Sep 2016 by Colby Newman This example code is in the public domain. http://www.arduino.cc/en/Tutorial/Blink */ // the setup function runs once when you press reset or power the board void setup() { // initialize digital pin LED_BUILTIN as an output. pinMode(LED_BUILTIN, OUTPUT); } // the loop function runs repeatedly forever void loop() { digitalWrite(LED_BUILTIN, HIGH); // turn the LED on (HIGH is the voltage level) delay(1000); // wait for a second digitalWrite(LED_BUILTIN, LOW); // turn the LED off by making the voltage LOW delay(1000); // wait for a second } After uploading the sketch to the Carduino 328, you should see the LED on the card is blinking.","title":"Blink"},{"location":"1013001/#resources","text":"Eagle Files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1013001_Carduino_328 Longan AVR boards supplied package: https://raw.githubusercontent.com/Longan-Labs/Longan-Board/master/package_longan_boards_index.json Arduino IDE: https://www.arduino.cc/en/Main/Software Sample Arduino Code: https://github.com/Longan-Labs/LonganCard","title":"Resources"},{"location":"1013007/","text":"Introduction Carduino is the new development board belongs to the Longan Cards Family. As its name implies it is small as of a credit card, thin, and light weight. Carduino is pluggable, which means you can plug it to one of the following boards. Extension board Sensor display board Game board Car board Pi Hap There is a wide array of cards support with the Carduino. All cards are pluggable and share the same board to communicate with the Carduino. Carduino allow you to quickly build prototypes and develop applications. At the Carduino\u2019s heart is an ATmega32u4 microprocessor and powered with the Arduino Leonardo bootloader allows you to program it using the Arduino IDE. We have written some exciting Arduino libraries that lets you to quickly develop applications. Here is a list of things that can be found on the front of the Carduino board. ATmega32u4 microprocessor Type-C USB connector \u2013 You will need USB to Type-C cable ( https://www.longan-labs.cc/2140001.html ) Programmable LED \u2013 Connects with digital pin 13 Reset button \u2013 Re-starts the Arduino sketch Three-way selectable switch \u2013 Slide this switch to the D position to use with the Longan game board. Gold fingers (Edge connector) Specifications Measures 41mm x 33mm ATmega32u4 @16Mhz clock speed with 3.3V or 5V logic/power (datasheet: http://www.atmel.com/devices/atmega32u4.aspx ) 32KB of flash memory which 4KB used by bootloader Programmable LED Preloaded with the Arduino Leonardo bootloader Edge connector (Golden fingers) exposes 30 pins (power, digital, analog, PWM, I2C, SPI, UART) Built-in USB communication Type-C USB connector Reset button Three-way selectable switch to use with game board currently supports game board, car board, sensor display board, extension board, and Pi Hap Two mounting holes Carduino comes with fully assembled and tested, with a USB interface that lets you quickly use it with the Arduino IDE. Pins The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the Carduino, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the Carduino, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. Table below presents the pin numbers and their functions. The pin functions of Carduino is exactly same with the pin functions of Arduino Leonardo. Power connections There are two main ways to power the Carduino. Through the micro-C USB port with 5V Through one of the boards with AAA battery card with 5V Following pins allow you to power the Carduino with batteries (AAA battery card) through one of the Longan boards. VCC \u2013 5V regulated supply voltage (Front: pin #1, #29 / Back: pin #2, #30) GND \u2013 This is the common ground for all power and logic (Front: pin #3, #27 / Back: pin #4, #28) You can also hack the power pins to power the Carduino with a regulated 3.3V or 5V power source. GPIO pins This is the general purpose I/O pin set for the Carduino. GPIO consists of digital, analog, I2C, SPI, and UART pins. Most pins can do PWM output. Also, all pins can be used as interrupt pins. Digital (Front: pin #9, #11, #21 / Back: pin #10, #12, #22) Analog (Front: pin #13, #19 / Back: pin #14, #20) I2C pins You can use I2C pins allow Carduino to communicate with all the Longan cards (all cards are I2C enabled and comes with a factory default unique I2C address). SDA \u2013 The I2C data pin (Front: pin #5, #25 / Back: pin #6, #26) SCL \u2013 The I2C clock pin (Front: pin #7, #23 / Back: pin #8, #24) Hardware SPI pins These are the hardware SPI pins that can be used to communicate with high speed. SCK \u2013 Serial Clock (Front: pin #17) MISO - Master In Slave Out, takes data from the Carduino to the SPI device (Front: pin #15) MOSI \u2013 Master Out Slave In, takes data to the Carduino from the SPI device (Back: pin #16) Hardware UART / Serial These pins can be used to connect devices support with UART using two wires. TX \u2013 Transmits data (Front: pin #21) RX \u2013 Receives data (Back: pin #22) Arduino IDE Setup First download the Arduino IDE from https://www.arduino.cc/en/Main/Software . Arduino IDE can be installed and run on Windows, Linux, and Mac OS X operating systems. Download the installer or zip file (Windows only) and install (if you have the zip file, extract it to your Windows computer\u2019s hard drive) it on your operating system. Once finished, start the Arduino IDE. Copy and paste the link below into the Additional Boards Manager URLs option in the Arduino IDE preferences ( File Preferences ). https://raw.githubusercontent.com/Longan-Labs/Longan-Board/master/package_longan_boards_index.json The Longan AVR boards supplied package includes supports for Longan Card, Carduino 328, Carduino 32U4. Once done, click OK button to save the new preference settings. Now open the Boards Manager by navigating to the Tools - Board menu. Select All from the Type drop-down menu. Then type longan in the top search bar. While typing, you will see the Longan AVR package. Click on the Longan AVR by Longan Labs and then click on Install button. Once installed, close the Boards Manager window. How to Use Carduino can be plugged in to one of the edge connector slots available in the following boards. Game board Car board Sensor display board Extension board Pi Hap All Longan cards are polarized, and every pin is unique in terms of both location and function. On the front side of the Carduino, a white arrow is printed near the edge connector indicates the pin #1. Using with Extension Board We will be using Longan Extension board demonstrate how you can insert the Carduino in to an edge connector slot. Take the Carduino and Extension board. Then plug the Carduino into the edge connector slot of the Extension board as shown in the picture below. Next, take the AAA battery card and insert two 1.5V or 1.2V, AAA sized batteries. Then insert it in to another edge connector slot on the Extension board. Make sure to slide the power switch of the battery card to the ON position. Now your Carduino can use the battery power to function correctly. Blink We will start off with something very simple with an LED, turning on and off, repeatedly, producing a pleasant blinking effect. The Carduino has a built-in LED on digital pin 13 (Arduino Leonardo equivalent) emits bright blue light when turned on. You can find it on the front of the Carduino (labelled as D13) very close to the Type-C USB connector. Now you can upload your first Blink sketch to the Carduino. The Arduino IDE provides a great example for blinking a LED. There is no need to type anything, just click File Example 01.Basics Blink under Built-in Examples in the Arduino IDE. Connect the Type-C USB cable to the USB connector of the Carduino and connect the other end to your computer. Next, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards. Then select the proper port in Tools Port (the Serial/COM port of your Carduino) . Next, upload the program by clicking Sketch Upload . It will take some time to compile and upload the sketch in to the Carduino. If you have trouble loading the Blink sketch from the examples, you can copy and paste the code below into the Arduino editor. /* Blink Turns an LED on for one second, then off for one second, repeatedly. Most Arduinos have an on-board LED you can control. On the UNO, MEGA and ZERO it is attached to digital pin 13, on MKR1000 on pin 6. LED_BUILTIN is set to the correct LED pin independent of which board is used. If you want to know what pin the on-board LED is connected to on your Arduino model, check the Technical Specs of your board at: https://www.arduino.cc/en/Main/Products modified 8 May 2014 by Scott Fitzgerald modified 2 Sep 2016 by Arturo Guadalupi modified 8 Sep 2016 by Colby Newman This example code is in the public domain. http://www.arduino.cc/en/Tutorial/Blink */ // the setup function runs once when you press reset or power the board void setup() { // initialize digital pin LED_BUILTIN as an output. pinMode(LED_BUILTIN, OUTPUT); } // the loop function runs repeatedly forever void loop() { digitalWrite(LED_BUILTIN, HIGH); // turn the LED on (HIGH is the voltage level) delay(1000); // wait for a second digitalWrite(LED_BUILTIN, LOW); // turn the LED off by making the voltage LOW delay(1000); // wait for a second } After uploading the sketch to the Carduino, you should see the LED on the Carduino blinking. When you press the reset button during running your sketch, the Carduino will take some time to re-start the program and blinks the LED very slowly with a fading effect. Now, you can firmly remove the Type-C USB cable from the Carduino to allow to use the battery power with the Longan AAA battery card. When you remove the USB power, the Carduino will automatically switch to the battery power and continually executes the program without resetting the microcontroller. If you want to turn off the Carduino, simply slide the switch to the off position on the AAA battery card. Resources Eagle Files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1013007_Carduino_32U4 Longan AVR boards supplied package: https://raw.githubusercontent.com/Longan-Labs/Longan-Board/master/package_longan_boards_index.json Arduino IDE: https://www.arduino.cc/en/Main/Software Sample Arduino Code: https://github.com/Longan-Labs/LonganCard","title":"Carduino 32U4"},{"location":"1013007/#introduction","text":"Carduino is the new development board belongs to the Longan Cards Family. As its name implies it is small as of a credit card, thin, and light weight. Carduino is pluggable, which means you can plug it to one of the following boards. Extension board Sensor display board Game board Car board Pi Hap There is a wide array of cards support with the Carduino. All cards are pluggable and share the same board to communicate with the Carduino. Carduino allow you to quickly build prototypes and develop applications. At the Carduino\u2019s heart is an ATmega32u4 microprocessor and powered with the Arduino Leonardo bootloader allows you to program it using the Arduino IDE. We have written some exciting Arduino libraries that lets you to quickly develop applications. Here is a list of things that can be found on the front of the Carduino board. ATmega32u4 microprocessor Type-C USB connector \u2013 You will need USB to Type-C cable ( https://www.longan-labs.cc/2140001.html ) Programmable LED \u2013 Connects with digital pin 13 Reset button \u2013 Re-starts the Arduino sketch Three-way selectable switch \u2013 Slide this switch to the D position to use with the Longan game board. Gold fingers (Edge connector)","title":"Introduction"},{"location":"1013007/#specifications","text":"Measures 41mm x 33mm ATmega32u4 @16Mhz clock speed with 3.3V or 5V logic/power (datasheet: http://www.atmel.com/devices/atmega32u4.aspx ) 32KB of flash memory which 4KB used by bootloader Programmable LED Preloaded with the Arduino Leonardo bootloader Edge connector (Golden fingers) exposes 30 pins (power, digital, analog, PWM, I2C, SPI, UART) Built-in USB communication Type-C USB connector Reset button Three-way selectable switch to use with game board currently supports game board, car board, sensor display board, extension board, and Pi Hap Two mounting holes Carduino comes with fully assembled and tested, with a USB interface that lets you quickly use it with the Arduino IDE.","title":"Specifications"},{"location":"1013007/#pins","text":"The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the Carduino, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the Carduino, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. Table below presents the pin numbers and their functions. The pin functions of Carduino is exactly same with the pin functions of Arduino Leonardo.","title":"Pins"},{"location":"1013007/#power-connections","text":"There are two main ways to power the Carduino. Through the micro-C USB port with 5V Through one of the boards with AAA battery card with 5V Following pins allow you to power the Carduino with batteries (AAA battery card) through one of the Longan boards. VCC \u2013 5V regulated supply voltage (Front: pin #1, #29 / Back: pin #2, #30) GND \u2013 This is the common ground for all power and logic (Front: pin #3, #27 / Back: pin #4, #28) You can also hack the power pins to power the Carduino with a regulated 3.3V or 5V power source.","title":"Power connections"},{"location":"1013007/#gpio-pins","text":"This is the general purpose I/O pin set for the Carduino. GPIO consists of digital, analog, I2C, SPI, and UART pins. Most pins can do PWM output. Also, all pins can be used as interrupt pins. Digital (Front: pin #9, #11, #21 / Back: pin #10, #12, #22) Analog (Front: pin #13, #19 / Back: pin #14, #20)","title":"GPIO pins"},{"location":"1013007/#i2c-pins","text":"You can use I2C pins allow Carduino to communicate with all the Longan cards (all cards are I2C enabled and comes with a factory default unique I2C address). SDA \u2013 The I2C data pin (Front: pin #5, #25 / Back: pin #6, #26) SCL \u2013 The I2C clock pin (Front: pin #7, #23 / Back: pin #8, #24)","title":"I2C pins"},{"location":"1013007/#hardware-spi-pins","text":"These are the hardware SPI pins that can be used to communicate with high speed. SCK \u2013 Serial Clock (Front: pin #17) MISO - Master In Slave Out, takes data from the Carduino to the SPI device (Front: pin #15) MOSI \u2013 Master Out Slave In, takes data to the Carduino from the SPI device (Back: pin #16)","title":"Hardware SPI pins"},{"location":"1013007/#hardware-uart-serial","text":"These pins can be used to connect devices support with UART using two wires. TX \u2013 Transmits data (Front: pin #21) RX \u2013 Receives data (Back: pin #22)","title":"Hardware UART / Serial"},{"location":"1013007/#arduino-ide-setup","text":"First download the Arduino IDE from https://www.arduino.cc/en/Main/Software . Arduino IDE can be installed and run on Windows, Linux, and Mac OS X operating systems. Download the installer or zip file (Windows only) and install (if you have the zip file, extract it to your Windows computer\u2019s hard drive) it on your operating system. Once finished, start the Arduino IDE. Copy and paste the link below into the Additional Boards Manager URLs option in the Arduino IDE preferences ( File Preferences ). https://raw.githubusercontent.com/Longan-Labs/Longan-Board/master/package_longan_boards_index.json The Longan AVR boards supplied package includes supports for Longan Card, Carduino 328, Carduino 32U4. Once done, click OK button to save the new preference settings. Now open the Boards Manager by navigating to the Tools - Board menu. Select All from the Type drop-down menu. Then type longan in the top search bar. While typing, you will see the Longan AVR package. Click on the Longan AVR by Longan Labs and then click on Install button. Once installed, close the Boards Manager window.","title":"Arduino IDE Setup"},{"location":"1013007/#how-to-use","text":"Carduino can be plugged in to one of the edge connector slots available in the following boards. Game board Car board Sensor display board Extension board Pi Hap All Longan cards are polarized, and every pin is unique in terms of both location and function. On the front side of the Carduino, a white arrow is printed near the edge connector indicates the pin #1.","title":"How to Use"},{"location":"1013007/#using-with-extension-board","text":"We will be using Longan Extension board demonstrate how you can insert the Carduino in to an edge connector slot. Take the Carduino and Extension board. Then plug the Carduino into the edge connector slot of the Extension board as shown in the picture below. Next, take the AAA battery card and insert two 1.5V or 1.2V, AAA sized batteries. Then insert it in to another edge connector slot on the Extension board. Make sure to slide the power switch of the battery card to the ON position. Now your Carduino can use the battery power to function correctly.","title":"Using with Extension Board"},{"location":"1013007/#blink","text":"We will start off with something very simple with an LED, turning on and off, repeatedly, producing a pleasant blinking effect. The Carduino has a built-in LED on digital pin 13 (Arduino Leonardo equivalent) emits bright blue light when turned on. You can find it on the front of the Carduino (labelled as D13) very close to the Type-C USB connector. Now you can upload your first Blink sketch to the Carduino. The Arduino IDE provides a great example for blinking a LED. There is no need to type anything, just click File Example 01.Basics Blink under Built-in Examples in the Arduino IDE. Connect the Type-C USB cable to the USB connector of the Carduino and connect the other end to your computer. Next, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards. Then select the proper port in Tools Port (the Serial/COM port of your Carduino) . Next, upload the program by clicking Sketch Upload . It will take some time to compile and upload the sketch in to the Carduino. If you have trouble loading the Blink sketch from the examples, you can copy and paste the code below into the Arduino editor. /* Blink Turns an LED on for one second, then off for one second, repeatedly. Most Arduinos have an on-board LED you can control. On the UNO, MEGA and ZERO it is attached to digital pin 13, on MKR1000 on pin 6. LED_BUILTIN is set to the correct LED pin independent of which board is used. If you want to know what pin the on-board LED is connected to on your Arduino model, check the Technical Specs of your board at: https://www.arduino.cc/en/Main/Products modified 8 May 2014 by Scott Fitzgerald modified 2 Sep 2016 by Arturo Guadalupi modified 8 Sep 2016 by Colby Newman This example code is in the public domain. http://www.arduino.cc/en/Tutorial/Blink */ // the setup function runs once when you press reset or power the board void setup() { // initialize digital pin LED_BUILTIN as an output. pinMode(LED_BUILTIN, OUTPUT); } // the loop function runs repeatedly forever void loop() { digitalWrite(LED_BUILTIN, HIGH); // turn the LED on (HIGH is the voltage level) delay(1000); // wait for a second digitalWrite(LED_BUILTIN, LOW); // turn the LED off by making the voltage LOW delay(1000); // wait for a second } After uploading the sketch to the Carduino, you should see the LED on the Carduino blinking. When you press the reset button during running your sketch, the Carduino will take some time to re-start the program and blinks the LED very slowly with a fading effect. Now, you can firmly remove the Type-C USB cable from the Carduino to allow to use the battery power with the Longan AAA battery card. When you remove the USB power, the Carduino will automatically switch to the battery power and continually executes the program without resetting the microcontroller. If you want to turn off the Carduino, simply slide the switch to the off position on the AAA battery card.","title":"Blink"},{"location":"1013007/#resources","text":"Eagle Files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1013007_Carduino_32U4 Longan AVR boards supplied package: https://raw.githubusercontent.com/Longan-Labs/Longan-Board/master/package_longan_boards_index.json Arduino IDE: https://www.arduino.cc/en/Main/Software Sample Arduino Code: https://github.com/Longan-Labs/LonganCard","title":"Resources"},{"location":"1014001/","text":"Introduction The OLED Display card features UG-2864KSWLG01 folding type OELD module which provides 128x64 monochrome pixels. The OLED card uses SPI protocol to communicate with the Carduinol. Specifications Voltage: 5V 128x64 monochrome pixels Supports SPI interface Diagonal Screen Size\uff1a1.30\" Number of Pixels\uff1a128 \u00d7 64 Color Depth\uff1aMonochrome (White) Pins The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the OLED Display card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the OLED Display card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. SPI Following pins can be used for SPI communication. MOSI: (Back: pin #16) SCK: (Front: pin #17) CS_OLED (Front: pin #9) DC_OLED (Back: pin #12) RST_OLED (Back: pin #10) Power Following pins connect with the common power bus of the board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28) How to Use The OLED Display card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board Pi Hap When you plug, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board. Getting Ready We will be using the Extension board to demonstrate how to use the OLED Display card with the Carduino. First take the Extension board. Next, plug the OLED Display card in to one of the edge connector slot. Then plug the Carduino in to another edge connector slot. Finally, connect the Extension board with your computer using a Type-C USB cable (you can use either USB connector on the Carduino or the Extension board). Sample Code The OLED Display card requires two libraries to work: Adafruit_SSD1306, which handles the low-level communication with the hardware, and Adafruit_GFX, which builds a top this to add graphics functions like lines, circles and text. You don't need to install them seperatly. They will install on your Arduino IDE during the installation of Longan AVR Boards. The sample code can be loaded to your Arduino IDE by clicking on File Examples Adafruit SSD1306 ssd1306_128x64_spi. Make sure to load the SPI sample, not the I2C. First, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards. Then select the proper port in Tools Port (the Serial/COM port of your Carduino). Next, upload the program by clicking Sketch Upload. It will take some time to compile and upload the sketch into the Carduino. Once uploaded, first the OLED Display card will display the 'LONGAN CARDS' logo (a bitmap) followed by some interesting graphic objects such as pixels, lines, circles, triangles, text, animating bitmaps etc. Resources Eagle files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1014001_OLED_Display_Card Adafruit SSD1306 library: https://github.com/adafruit/Adafruit_SSD1306 Adafurit_GFX library: https://github.com/adafruit/Adafruit-GFX-Library","title":"OLED Display Card"},{"location":"1014001/#introduction","text":"The OLED Display card features UG-2864KSWLG01 folding type OELD module which provides 128x64 monochrome pixels. The OLED card uses SPI protocol to communicate with the Carduinol.","title":"Introduction"},{"location":"1014001/#specifications","text":"Voltage: 5V 128x64 monochrome pixels Supports SPI interface Diagonal Screen Size\uff1a1.30\" Number of Pixels\uff1a128 \u00d7 64 Color Depth\uff1aMonochrome (White)","title":"Specifications"},{"location":"1014001/#pins","text":"The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the OLED Display card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the OLED Display card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers.","title":"Pins"},{"location":"1014001/#spi","text":"Following pins can be used for SPI communication. MOSI: (Back: pin #16) SCK: (Front: pin #17) CS_OLED (Front: pin #9) DC_OLED (Back: pin #12) RST_OLED (Back: pin #10)","title":"SPI"},{"location":"1014001/#power","text":"Following pins connect with the common power bus of the board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28)","title":"Power"},{"location":"1014001/#how-to-use","text":"The OLED Display card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board Pi Hap When you plug, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board.","title":"How to Use"},{"location":"1014001/#getting-ready","text":"We will be using the Extension board to demonstrate how to use the OLED Display card with the Carduino. First take the Extension board. Next, plug the OLED Display card in to one of the edge connector slot. Then plug the Carduino in to another edge connector slot. Finally, connect the Extension board with your computer using a Type-C USB cable (you can use either USB connector on the Carduino or the Extension board).","title":"Getting Ready"},{"location":"1014001/#sample-code","text":"The OLED Display card requires two libraries to work: Adafruit_SSD1306, which handles the low-level communication with the hardware, and Adafruit_GFX, which builds a top this to add graphics functions like lines, circles and text. You don't need to install them seperatly. They will install on your Arduino IDE during the installation of Longan AVR Boards. The sample code can be loaded to your Arduino IDE by clicking on File Examples Adafruit SSD1306 ssd1306_128x64_spi. Make sure to load the SPI sample, not the I2C. First, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards. Then select the proper port in Tools Port (the Serial/COM port of your Carduino). Next, upload the program by clicking Sketch Upload. It will take some time to compile and upload the sketch into the Carduino. Once uploaded, first the OLED Display card will display the 'LONGAN CARDS' logo (a bitmap) followed by some interesting graphic objects such as pixels, lines, circles, triangles, text, animating bitmaps etc.","title":"Sample Code"},{"location":"1014001/#resources","text":"Eagle files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1014001_OLED_Display_Card Adafruit SSD1306 library: https://github.com/adafruit/Adafruit_SSD1306 Adafurit_GFX library: https://github.com/adafruit/Adafruit-GFX-Library","title":"Resources"},{"location":"1016006/","text":"Introduction The Longan Programmer card features FTDI FT232RL USB to serial IC. It allows you to program cards like Carduino 328 which doesn't come with an onboard USB-to-Serial converter IC. How to Use You can use the programmer card with any Longan board. However, the Extension board is an ideal option. Plug the Programmer card into one of the slots on the Extension board. Plug the card that you want to program (E.g., Carduino 328) into another slot on the Extension board. Connect the programmer card to your computer using USB Type-C cable (Don't use the Type-C USB port on the back of the Extension board. It doesn't work for that.). Useful Things on the Card We'll mention few things that would be useful to you. LED Indicators The board has three LED indicators. TX and RX - allow you to see the serial traffic on the LEDs to verify if the board is working. PWR - indicates the power. Selectable Switches The board has two selectable switches. Power - slide the switch to 5V position to work with 5V based cards (E.g., Carduino 328). Slide the switch to 3V3 position to work with 3.3V based cards. Card type - allow you to select the card type that you are going to use. As an example, if you are going to program the Carduino 328, slide the switch to the MCU position. For other Longan cards, slide the switch to the CARD position. 6-pin connector Allows you to program MCUs that doesn't have FTDI chip (only those have a DTR pin). GND - connects with GND of the MCU CTS- connects with GND of the MCU VCC - connects with VCC of the MCU TX - connects with RX of the MCU RX - connects with TX of the MCU DTR - connects with DTR pin of the MCU Resources Eagle Files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1016006_Programmer_Card","title":"Programmer Card"},{"location":"1016006/#introduction","text":"The Longan Programmer card features FTDI FT232RL USB to serial IC. It allows you to program cards like Carduino 328 which doesn't come with an onboard USB-to-Serial converter IC.","title":"Introduction"},{"location":"1016006/#how-to-use","text":"You can use the programmer card with any Longan board. However, the Extension board is an ideal option. Plug the Programmer card into one of the slots on the Extension board. Plug the card that you want to program (E.g., Carduino 328) into another slot on the Extension board. Connect the programmer card to your computer using USB Type-C cable (Don't use the Type-C USB port on the back of the Extension board. It doesn't work for that.).","title":"How to Use"},{"location":"1016006/#useful-things-on-the-card","text":"We'll mention few things that would be useful to you.","title":"Useful Things on the Card"},{"location":"1016006/#led-indicators","text":"The board has three LED indicators. TX and RX - allow you to see the serial traffic on the LEDs to verify if the board is working. PWR - indicates the power.","title":"LED Indicators"},{"location":"1016006/#selectable-switches","text":"The board has two selectable switches. Power - slide the switch to 5V position to work with 5V based cards (E.g., Carduino 328). Slide the switch to 3V3 position to work with 3.3V based cards. Card type - allow you to select the card type that you are going to use. As an example, if you are going to program the Carduino 328, slide the switch to the MCU position. For other Longan cards, slide the switch to the CARD position.","title":"Selectable Switches"},{"location":"1016006/#6-pin-connector","text":"Allows you to program MCUs that doesn't have FTDI chip (only those have a DTR pin). GND - connects with GND of the MCU CTS- connects with GND of the MCU VCC - connects with VCC of the MCU TX - connects with RX of the MCU RX - connects with TX of the MCU DTR - connects with DTR pin of the MCU","title":"6-pin connector"},{"location":"1016006/#resources","text":"Eagle Files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1016006_Programmer_Card","title":"Resources"},{"location":"1016007/","text":"Introduction The AAA battery card efficiently provides 5V@500mA from two alkaline or rechargeable batteries. The card measures only 41mm \u00d7 33mm. It is based on the PS7516 high efficiency PWM DC/DC converter, allowing the output to remain 5V regulated for input voltages down to 1.9V, depending on the load current. The AAA battery card is well suited for build battery powered applications with the Longan Cards Family. Some of them are, Arduboy game controller Toy car The AAA battery card can be plugged in to an edge connector slot on one of the following boards. Game board Car board Sensor board Extension board PI Hap The back side of the AAA battery card has a battery holder for two AAA cells. The front side of the battery card has following components. Power switch \u2013 This is a two-way slide switch allows you to open and close the electrical connection between the batteries and the DC/DC converter. Power indicator \u2013 Samll LED emits green light to indicate \u2018power is good\u2019. DC/DC converter \u2013 Converts battery power to regulated 5V. Gold fingers (edge connector) \u2013 Connects with the edge connector slot (only with the power bus). Specifications Size: 41mm x 33mm Featured PS7516 DC/DC converter Output: 5V@500 mA 2x AAA battery holder 30 pin edge connector (gold fingers) Power indicator LED Power ON/OFF switch Batteries You will need two AAA alkaline batteries (each battery provides 1.5V)You will need two AAA alkaline batteries (each battery provides 1.5V) or two AAA rechargeable batteries (each battery provides 1.2V). The DC/DC converter of the battery card takes power from the batteries and outputs regulated 5V @ 500mA which allows Carduino and other cards to function properly. Pins The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the AAA battery card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the battery card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. Among the 30 pins, only 8 pins used for the regulated power output (4 x VCC and 4 x GND). When you insert the battery card in to an edge connector slot of a Longan board and slide the power switch to the on position, all other Longan cards connected to the board can get power through the common power bus. VCC (Front: pin #1, #29 / Back: pin #2, #30) GND (Front: pin #3, #27 / Back: pin #4, #28) How to Use Slide the power switch of the battery card to the OFF position. Insert the two AAA batterers. Plug the battery card in to an edge connector of the Extension board. Slide the power switch of the battery card to the ON position. The power indicator LED will emit soft green light to indicate the regulated power. You can also see the power indicator on the Extension board will emit bright blue light to indicate the connection between battery card and the extension board is correct. Resources Eagle Files","title":"AAA Battery Card"},{"location":"1016007/#introduction","text":"The AAA battery card efficiently provides 5V@500mA from two alkaline or rechargeable batteries. The card measures only 41mm \u00d7 33mm. It is based on the PS7516 high efficiency PWM DC/DC converter, allowing the output to remain 5V regulated for input voltages down to 1.9V, depending on the load current. The AAA battery card is well suited for build battery powered applications with the Longan Cards Family. Some of them are, Arduboy game controller Toy car The AAA battery card can be plugged in to an edge connector slot on one of the following boards. Game board Car board Sensor board Extension board PI Hap The back side of the AAA battery card has a battery holder for two AAA cells. The front side of the battery card has following components. Power switch \u2013 This is a two-way slide switch allows you to open and close the electrical connection between the batteries and the DC/DC converter. Power indicator \u2013 Samll LED emits green light to indicate \u2018power is good\u2019. DC/DC converter \u2013 Converts battery power to regulated 5V. Gold fingers (edge connector) \u2013 Connects with the edge connector slot (only with the power bus).","title":"Introduction"},{"location":"1016007/#specifications","text":"Size: 41mm x 33mm Featured PS7516 DC/DC converter Output: 5V@500 mA 2x AAA battery holder 30 pin edge connector (gold fingers) Power indicator LED Power ON/OFF switch","title":"Specifications"},{"location":"1016007/#batteries","text":"You will need two AAA alkaline batteries (each battery provides 1.5V)You will need two AAA alkaline batteries (each battery provides 1.5V) or two AAA rechargeable batteries (each battery provides 1.2V). The DC/DC converter of the battery card takes power from the batteries and outputs regulated 5V @ 500mA which allows Carduino and other cards to function properly.","title":"Batteries"},{"location":"1016007/#pins","text":"The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the AAA battery card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the battery card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. Among the 30 pins, only 8 pins used for the regulated power output (4 x VCC and 4 x GND). When you insert the battery card in to an edge connector slot of a Longan board and slide the power switch to the on position, all other Longan cards connected to the board can get power through the common power bus. VCC (Front: pin #1, #29 / Back: pin #2, #30) GND (Front: pin #3, #27 / Back: pin #4, #28)","title":"Pins"},{"location":"1016007/#how-to-use","text":"Slide the power switch of the battery card to the OFF position. Insert the two AAA batterers. Plug the battery card in to an edge connector of the Extension board. Slide the power switch of the battery card to the ON position. The power indicator LED will emit soft green light to indicate the regulated power. You can also see the power indicator on the Extension board will emit bright blue light to indicate the connection between battery card and the extension board is correct.","title":"How to Use"},{"location":"1016007/#resources","text":"Eagle Files","title":"Resources"},{"location":"1017002/","text":"Introduction As the name implies, the Extension board provides additional edge connector slots and allows you to add more Longan cards to your project. You can use the Extension board, with another Longan board: When your Longan board runs out of free edge connector slots, simply plug an Extension card into one of the available edge connector slot. as a stand-alone board: You can use the Extension board to connect any Longan card with the Carduino. If you need more edge connector slots, plug another Extension board into one of the available slots. What's on There are 4 edge connector slots can be found on the front side of the Extension board: (three vertical slots and one horizontal slot). On the back side of the Extension board, you can see following things. USB Type-C connector \u2013 connects with your computer through a Type-C USB cable. LED \u2013 Emits blue light to indicate power. Buses Extension board shares following buses with all the edge connector slots. I2C bus Power bus How to Use Following figure shows how to plug an Extension board into a sensor board (same for any Longan board). When you plug, the white arrow head printed on the board near the gold fingers (edge connector) should be pointing toward the white arrow head printed near the edge connector slot of the second board. Resources Eagle Files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1016002_Extension_Board","title":"Extension Board"},{"location":"1017002/#introduction","text":"As the name implies, the Extension board provides additional edge connector slots and allows you to add more Longan cards to your project. You can use the Extension board, with another Longan board: When your Longan board runs out of free edge connector slots, simply plug an Extension card into one of the available edge connector slot. as a stand-alone board: You can use the Extension board to connect any Longan card with the Carduino. If you need more edge connector slots, plug another Extension board into one of the available slots.","title":"Introduction"},{"location":"1017002/#whats-on","text":"There are 4 edge connector slots can be found on the front side of the Extension board: (three vertical slots and one horizontal slot). On the back side of the Extension board, you can see following things. USB Type-C connector \u2013 connects with your computer through a Type-C USB cable. LED \u2013 Emits blue light to indicate power.","title":"What's on"},{"location":"1017002/#buses","text":"Extension board shares following buses with all the edge connector slots. I2C bus Power bus","title":"Buses"},{"location":"1017002/#how-to-use","text":"Following figure shows how to plug an Extension board into a sensor board (same for any Longan board). When you plug, the white arrow head printed on the board near the gold fingers (edge connector) should be pointing toward the white arrow head printed near the edge connector slot of the second board.","title":"How to Use"},{"location":"1017002/#resources","text":"Eagle Files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1016002_Extension_Board","title":"Resources"},{"location":"1017007/","text":"Introduction The Sensor Display board allows you to connect Longan cards with Carduino for read sensor data, and display them with the OLED card. If you need more edge connector slots to connect more Longan card, plug an Extension board into one of the available slots. NOTE: Jue (vessel) A jue is a shape of Chinese ritual bronze, a tripod vessel or goblet used to serve warm wine. It was used for ceremonial purposes by the Chinese of the Xia, Shang, and Zhou dynasties. - Wikipedia What's on There are 4 edge connector slots can be found on the front side of the Extension board: (three vertical slots and one horizontal slot). On the back side of the Sensor Display board, you can see following things. USB Type-C connector \u2013 connects with your computer through a Type-C USB cable. LED \u2013 Emits blue light to indicate power. Two programmable buttons \u2013 can be labelled an left button and right button. Buses Sensor display board shares following buses with all the edge connector slots. I2C bus Power bus How to Use First, plug a Longan card into one of the vertical edge connector slot of the sensor display board. When you plug, the white arrow head printed on the card near the gold fingers (edge connector) should be pointing toward the white arrow head printed near the edge connector slot of the board. Next, plug the Carduino into another horizontal edge connector slot. Then plud the OLED display card into the horizontal edge connector slot of the Sensor display board. Displaying Sensor Data The sample code can be loaded to your Arduino IDE by clicking on File Examples LonganCards SensorBoard. If you have trouble loading the ReadSensor sketch from the examples, you can copy and paste the code below into the Arduino editor. // get data from card sensor #include Wire.h #include SPI.h #include Adafruit_GFX.h #include Adafruit_SSD1306.h #include LonganCards.h #include CardsDfs.h #include cardBasic.h #include watchdog.h CARD_INFO card; const int pinBtnL = A0; const int pinBtnR = A1; // Carduino 32U4 #define OLED_DC 4 // INT #define OLED_CS 12 // OK #define OLED_RESET 6 // FAIL Adafruit_SSD1306 display(OLED_DC, OLED_RESET, OLED_CS); unsigned char sensorVal[10][6]; unsigned char addr_buf = 0; unsigned char cntDisp = 0; // MODE // 0 - all in one page // 1 - roll // 2 - right button to switch unsigned char dispMode = 1; unsigned char switchCnt = 0; void oledInit() { display.begin(SSD1306_SWITCHCAPVCC); display.display(); delay(2000); } void getSensor() { card.addr = getAddr(); if(card.addr == 0) { Serial.println( NO DEVICE ); waitForDevice(); return; } unsigned char dta[10]; unsigned char dtaLen = 0; for(int i=0; i card.senCnt; i++) { Wire.beginTransmission(card.addr); // transmit to device #8 Wire.write(0x30+i); Wire.endTransmission(); // stop transmitting delay(10); WDR(); Wire.requestFrom(card.addr, 6); // request 6 bytes from slave device #8 delay(10); WDR(); while (Wire.available()) { // slave may send less than requested dta[dtaLen++] = Wire.read(); } if(dtaLen) { for(int j=0; j dtaLen; j++) { sensorVal[i][j] = dta[j]; } memset(dta, 0, 10); dtaLen = 0; } delay(10); } } void modeSwitchBtn() { if(!digitalRead(pinBtnL)) { delay(10); if(!digitalRead(pinBtnL)) { cntDisp = 0; dispMode = (dispMode == 2) ? 0 : (1-dispMode); while(!digitalRead(pinBtnL)); Serial.print( MODE = ); Serial.println(dispMode); } } if(!digitalRead(pinBtnR)) { delay(10); if(!digitalRead(pinBtnR)) { if(dispMode == 2) { switchCnt++; if(switchCnt =card.senCnt) { switchCnt = 0; } } else { dispMode = 2; switchCnt = 0; } while(!digitalRead(pinBtnR)); Serial.print( SWITCH = ); Serial.println(switchCnt); } } } void dispModeAll() { display.clearDisplay(); display.setTextColor(WHITE); display.setTextSize(1); for(int i=0; i card.senCnt; i++) { display.setCursor(0, 10*i); switch(sensorVal[i][5]) { case UNIT_TEMPERATURE: dispSensorSmall(str2float( sensorVal[i][1]), UNIT_TEMPERATURE, 1, Temperature ); break; case UNIT_HUMIDITY: dispSensorSmall(str2float( sensorVal[i][1]), UNIT_HUMIDITY, 0, Humidity ); break; case UNIT_METER: dispSensorSmall(str2float( sensorVal[i][1]), UNIT_METER, 1, Meter ); break; case UNIT_MILLIMETER: dispSensorSmall(str2float( sensorVal[i][1]), UNIT_MILLIMETER, 0, Millimeter ); break; case UNIT_PRESS: dispSensorSmall(str2float( sensorVal[i][1]), UNIT_PRESS, 3, Press ); break; case UNIT_ANALOG: dispSensorSmall(str2float( sensorVal[i][1]), UNIT_ANALOG, 0, Value ); break; //case UNIT_ALTITUDE: //dispSensorSmall(str2float( sensorVal[i][1]), UNIT_ALTITUDE, 1, Altitude ); //break; default:; } } display.display(); display.display(); } void dispModeRoll() { if(card.addr == 0)return; static unsigned long timer_s = millis(); if(millis()-timer_s 3000) { cntDisp++; cntDisp = (cntDisp = card.senCnt) ? 0 : cntDisp; timer_s = millis(); } switch(sensorVal[cntDisp][5]) { case UNIT_TEMPERATURE: dispSensor(str2float( sensorVal[cntDisp][1]), UNIT_TEMPERATURE, 1, Temperature ); break; case UNIT_HUMIDITY: dispSensor(str2float( sensorVal[cntDisp][1]), UNIT_HUMIDITY, 0, Humidity ); break; case UNIT_METER: dispSensor(str2float( sensorVal[cntDisp][1]), UNIT_METER, 1, Meter ); break; case UNIT_MILLIMETER: dispSensor(str2float( sensorVal[cntDisp][1]), UNIT_MILLIMETER, 0, Millimeter ); break; case UNIT_PRESS: dispSensor(str2float( sensorVal[cntDisp][1]), UNIT_PRESS, 3, Press ); break; case UNIT_ANALOG: dispSensor(str2float( sensorVal[cntDisp][1]), UNIT_ANALOG, 0, Value ); break; //case UNIT_ALTITUDE: //dispSensor(str2float( sensorVal[cntDisp][1]), UNIT_ALTITUDE, 1, Altitude ); //break; default:; } } void dispModeSwitch() { if(card.addr == 0)return; switch(sensorVal[switchCnt][5]) { case UNIT_TEMPERATURE: dispSensor(str2float( sensorVal[switchCnt][1]), UNIT_TEMPERATURE, 1, Temperature ); break; case UNIT_HUMIDITY: dispSensor(str2float( sensorVal[switchCnt][1]), UNIT_HUMIDITY, 0, Humidity ); break; case UNIT_METER: dispSensor(str2float( sensorVal[switchCnt][1]), UNIT_METER, 1, Meter ); break; case UNIT_MILLIMETER: dispSensor(str2float( sensorVal[switchCnt][1]), UNIT_MILLIMETER, 0, Millimeter ); break; case UNIT_PRESS: dispSensor(str2float( sensorVal[switchCnt][1]), UNIT_PRESS, 3, Press ); break; case UNIT_ANALOG: dispSensor(str2float( sensorVal[switchCnt][1]), UNIT_ANALOG, 0, ); break; //case UNIT_ALTITUDE: //dispSensor(str2float( sensorVal[switchCnt][1]), UNIT_ALTITUDE, 1, Altitude ); //break; default:; } } void displaySensor() { switch (dispMode) { case 0: // all in one page dispModeAll(); break; case 1: // rool dispModeRoll(); break; case 2: // switch to change dispModeSwitch(); break; default:; } } unsigned char getAddr() { static long timer_s = -10001; if(millis()-timer_s 1000)return card.addr; timer_s = millis(); for(int i = 1; i 127; i++ ) { Wire.beginTransmission(i); unsigned char error = Wire.endTransmission(); if (error == 0) { return i; } } return 0; } void waitForDevice() { while(1) { Serial.println( GET ADDR FROM THE CARD ); card.addr = getAddr(); Serial.print( CARD ADDR = 0X ); Serial.println(card.addr, HEX); if(card.addr == 0) { Serial.println( NO DEVICE! ); display.clearDisplay(); display.setCursor(0, 0); display.setTextSize(1); display.setTextColor(WHITE); display.println( NO DEVICE ); display.display(); delay(500); WDR(); } else { if(card.addr != addr_buf) { addr_buf = card.addr; card.getInfo(); card.disp(); } break; } blinkblink(); } } void setup() { Wire.begin(); // join i2c bus (address optional for master) Serial.begin(115200); // start serial for output // while(!Serial.available()); Serial.println( start ); pinMode(pinBtnL, INPUT_PULLUP); pinMode(pinBtnR, INPUT_PULLUP); pinMode(13, OUTPUT); //card.addr = getAddr(); oledInit(); Serial.println( OLED INIT OK ); waitForDevice(); WD_SET(WD_RST, WDTO_1S); Serial.println( init done ); } void loop() { blinkblink(); WDR(); modeSwitchBtn(); WDR(); getSensor(); WDR(); displaySensor(); WDR(); delay(50); //Serial.println( # ); WDR(); } void printTstr(int x, int y, int size, char *str) { display.setTextSize(size); display.setCursor(x,y); display.println(str); } void printTnum(float num, int d) { int tmp = num; int a = 0; do { tmp /= 10; a++; }while(tmp); a += (d 0) ? (d+1) : 0; int x = (128-a*18.2)/2; int y = 20; display.setTextSize(3); display.setCursor(x, y); display.println(num, d); } void printUnit(int unit) { switch (unit) { case UNIT_TEMPERATURE: printTstr(80, 48, 1, o ); printTstr(88, 50, 2, C ); break; case UNIT_HUMIDITY: printTstr(88, 50, 2, % ); break; case UNIT_METER: //case UNIT_ALTITUDE: printTstr(88, 50, 2, m ); break; case UNIT_MILLIMETER: printTstr(88, 50, 2, mm ); break; case UNIT_PRESS: printTstr(88, 50, 2, kPa ); break; default:; } } void printUnitSmall(int unit) { switch (unit) { case UNIT_TEMPERATURE: display.print( C ); break; case UNIT_HUMIDITY: display.print( % ); break; case UNIT_METER: //case UNIT_ALTITUDE: display.print( m ); break; case UNIT_MILLIMETER: display.print( mm ); break; case UNIT_PRESS: display.print( kPa ); break; default:; } } void dispSensor(float num, unsigned char unit, unsigned char d, char *str) { display.clearDisplay(); display.setTextColor(WHITE); printTstr(0, 0, 1, str); printTnum(num, d); printUnit(unit); display.display(); } void dispSensorSmall(float num, unsigned char unit, unsigned char d, char *str) { //display.setCursor(0, 0); display.print(str); display.print( = ); display.print(num, d); display.print( ); printUnitSmall(unit); display.println(); } void blinkblink() { static unsigned long timer_s = millis(); if(millis()-timer_s 100)return; timer_s = millis(); digitalWrite(13, 1-digitalRead(13)); } // END FILE Connect the Type-C USB cable to the USB connector of the Carduino and connect the other end to your computer. Next, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards. Then select the proper port in Tools Port (the Serial/COM port of your Carduino). Next, upload the program by clicking Sketch Upload. It will take some time to compile and upload the sketch into the Carduino. Once uploaded, the OLED card will display the sensor value. You can press the left push button of the Sensor display card to toggle the display view of the OLED. Later, you can remove the USB plug from the Carduino and connect it with the USB slot of the Sensor display card or you can plug a battery card into the Sensor display board to make the unit protable. Resources Eagle Files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1016007_Sensor_Display_Board","title":"Sensor Display Board"},{"location":"1017007/#introduction","text":"The Sensor Display board allows you to connect Longan cards with Carduino for read sensor data, and display them with the OLED card. If you need more edge connector slots to connect more Longan card, plug an Extension board into one of the available slots. NOTE: Jue (vessel) A jue is a shape of Chinese ritual bronze, a tripod vessel or goblet used to serve warm wine. It was used for ceremonial purposes by the Chinese of the Xia, Shang, and Zhou dynasties. - Wikipedia","title":"Introduction"},{"location":"1017007/#whats-on","text":"There are 4 edge connector slots can be found on the front side of the Extension board: (three vertical slots and one horizontal slot). On the back side of the Sensor Display board, you can see following things. USB Type-C connector \u2013 connects with your computer through a Type-C USB cable. LED \u2013 Emits blue light to indicate power. Two programmable buttons \u2013 can be labelled an left button and right button.","title":"What's on"},{"location":"1017007/#buses","text":"Sensor display board shares following buses with all the edge connector slots. I2C bus Power bus","title":"Buses"},{"location":"1017007/#how-to-use","text":"First, plug a Longan card into one of the vertical edge connector slot of the sensor display board. When you plug, the white arrow head printed on the card near the gold fingers (edge connector) should be pointing toward the white arrow head printed near the edge connector slot of the board. Next, plug the Carduino into another horizontal edge connector slot. Then plud the OLED display card into the horizontal edge connector slot of the Sensor display board.","title":"How to Use"},{"location":"1017007/#displaying-sensor-data","text":"The sample code can be loaded to your Arduino IDE by clicking on File Examples LonganCards SensorBoard. If you have trouble loading the ReadSensor sketch from the examples, you can copy and paste the code below into the Arduino editor. // get data from card sensor #include Wire.h #include SPI.h #include Adafruit_GFX.h #include Adafruit_SSD1306.h #include LonganCards.h #include CardsDfs.h #include cardBasic.h #include watchdog.h CARD_INFO card; const int pinBtnL = A0; const int pinBtnR = A1; // Carduino 32U4 #define OLED_DC 4 // INT #define OLED_CS 12 // OK #define OLED_RESET 6 // FAIL Adafruit_SSD1306 display(OLED_DC, OLED_RESET, OLED_CS); unsigned char sensorVal[10][6]; unsigned char addr_buf = 0; unsigned char cntDisp = 0; // MODE // 0 - all in one page // 1 - roll // 2 - right button to switch unsigned char dispMode = 1; unsigned char switchCnt = 0; void oledInit() { display.begin(SSD1306_SWITCHCAPVCC); display.display(); delay(2000); } void getSensor() { card.addr = getAddr(); if(card.addr == 0) { Serial.println( NO DEVICE ); waitForDevice(); return; } unsigned char dta[10]; unsigned char dtaLen = 0; for(int i=0; i card.senCnt; i++) { Wire.beginTransmission(card.addr); // transmit to device #8 Wire.write(0x30+i); Wire.endTransmission(); // stop transmitting delay(10); WDR(); Wire.requestFrom(card.addr, 6); // request 6 bytes from slave device #8 delay(10); WDR(); while (Wire.available()) { // slave may send less than requested dta[dtaLen++] = Wire.read(); } if(dtaLen) { for(int j=0; j dtaLen; j++) { sensorVal[i][j] = dta[j]; } memset(dta, 0, 10); dtaLen = 0; } delay(10); } } void modeSwitchBtn() { if(!digitalRead(pinBtnL)) { delay(10); if(!digitalRead(pinBtnL)) { cntDisp = 0; dispMode = (dispMode == 2) ? 0 : (1-dispMode); while(!digitalRead(pinBtnL)); Serial.print( MODE = ); Serial.println(dispMode); } } if(!digitalRead(pinBtnR)) { delay(10); if(!digitalRead(pinBtnR)) { if(dispMode == 2) { switchCnt++; if(switchCnt =card.senCnt) { switchCnt = 0; } } else { dispMode = 2; switchCnt = 0; } while(!digitalRead(pinBtnR)); Serial.print( SWITCH = ); Serial.println(switchCnt); } } } void dispModeAll() { display.clearDisplay(); display.setTextColor(WHITE); display.setTextSize(1); for(int i=0; i card.senCnt; i++) { display.setCursor(0, 10*i); switch(sensorVal[i][5]) { case UNIT_TEMPERATURE: dispSensorSmall(str2float( sensorVal[i][1]), UNIT_TEMPERATURE, 1, Temperature ); break; case UNIT_HUMIDITY: dispSensorSmall(str2float( sensorVal[i][1]), UNIT_HUMIDITY, 0, Humidity ); break; case UNIT_METER: dispSensorSmall(str2float( sensorVal[i][1]), UNIT_METER, 1, Meter ); break; case UNIT_MILLIMETER: dispSensorSmall(str2float( sensorVal[i][1]), UNIT_MILLIMETER, 0, Millimeter ); break; case UNIT_PRESS: dispSensorSmall(str2float( sensorVal[i][1]), UNIT_PRESS, 3, Press ); break; case UNIT_ANALOG: dispSensorSmall(str2float( sensorVal[i][1]), UNIT_ANALOG, 0, Value ); break; //case UNIT_ALTITUDE: //dispSensorSmall(str2float( sensorVal[i][1]), UNIT_ALTITUDE, 1, Altitude ); //break; default:; } } display.display(); display.display(); } void dispModeRoll() { if(card.addr == 0)return; static unsigned long timer_s = millis(); if(millis()-timer_s 3000) { cntDisp++; cntDisp = (cntDisp = card.senCnt) ? 0 : cntDisp; timer_s = millis(); } switch(sensorVal[cntDisp][5]) { case UNIT_TEMPERATURE: dispSensor(str2float( sensorVal[cntDisp][1]), UNIT_TEMPERATURE, 1, Temperature ); break; case UNIT_HUMIDITY: dispSensor(str2float( sensorVal[cntDisp][1]), UNIT_HUMIDITY, 0, Humidity ); break; case UNIT_METER: dispSensor(str2float( sensorVal[cntDisp][1]), UNIT_METER, 1, Meter ); break; case UNIT_MILLIMETER: dispSensor(str2float( sensorVal[cntDisp][1]), UNIT_MILLIMETER, 0, Millimeter ); break; case UNIT_PRESS: dispSensor(str2float( sensorVal[cntDisp][1]), UNIT_PRESS, 3, Press ); break; case UNIT_ANALOG: dispSensor(str2float( sensorVal[cntDisp][1]), UNIT_ANALOG, 0, Value ); break; //case UNIT_ALTITUDE: //dispSensor(str2float( sensorVal[cntDisp][1]), UNIT_ALTITUDE, 1, Altitude ); //break; default:; } } void dispModeSwitch() { if(card.addr == 0)return; switch(sensorVal[switchCnt][5]) { case UNIT_TEMPERATURE: dispSensor(str2float( sensorVal[switchCnt][1]), UNIT_TEMPERATURE, 1, Temperature ); break; case UNIT_HUMIDITY: dispSensor(str2float( sensorVal[switchCnt][1]), UNIT_HUMIDITY, 0, Humidity ); break; case UNIT_METER: dispSensor(str2float( sensorVal[switchCnt][1]), UNIT_METER, 1, Meter ); break; case UNIT_MILLIMETER: dispSensor(str2float( sensorVal[switchCnt][1]), UNIT_MILLIMETER, 0, Millimeter ); break; case UNIT_PRESS: dispSensor(str2float( sensorVal[switchCnt][1]), UNIT_PRESS, 3, Press ); break; case UNIT_ANALOG: dispSensor(str2float( sensorVal[switchCnt][1]), UNIT_ANALOG, 0, ); break; //case UNIT_ALTITUDE: //dispSensor(str2float( sensorVal[switchCnt][1]), UNIT_ALTITUDE, 1, Altitude ); //break; default:; } } void displaySensor() { switch (dispMode) { case 0: // all in one page dispModeAll(); break; case 1: // rool dispModeRoll(); break; case 2: // switch to change dispModeSwitch(); break; default:; } } unsigned char getAddr() { static long timer_s = -10001; if(millis()-timer_s 1000)return card.addr; timer_s = millis(); for(int i = 1; i 127; i++ ) { Wire.beginTransmission(i); unsigned char error = Wire.endTransmission(); if (error == 0) { return i; } } return 0; } void waitForDevice() { while(1) { Serial.println( GET ADDR FROM THE CARD ); card.addr = getAddr(); Serial.print( CARD ADDR = 0X ); Serial.println(card.addr, HEX); if(card.addr == 0) { Serial.println( NO DEVICE! ); display.clearDisplay(); display.setCursor(0, 0); display.setTextSize(1); display.setTextColor(WHITE); display.println( NO DEVICE ); display.display(); delay(500); WDR(); } else { if(card.addr != addr_buf) { addr_buf = card.addr; card.getInfo(); card.disp(); } break; } blinkblink(); } } void setup() { Wire.begin(); // join i2c bus (address optional for master) Serial.begin(115200); // start serial for output // while(!Serial.available()); Serial.println( start ); pinMode(pinBtnL, INPUT_PULLUP); pinMode(pinBtnR, INPUT_PULLUP); pinMode(13, OUTPUT); //card.addr = getAddr(); oledInit(); Serial.println( OLED INIT OK ); waitForDevice(); WD_SET(WD_RST, WDTO_1S); Serial.println( init done ); } void loop() { blinkblink(); WDR(); modeSwitchBtn(); WDR(); getSensor(); WDR(); displaySensor(); WDR(); delay(50); //Serial.println( # ); WDR(); } void printTstr(int x, int y, int size, char *str) { display.setTextSize(size); display.setCursor(x,y); display.println(str); } void printTnum(float num, int d) { int tmp = num; int a = 0; do { tmp /= 10; a++; }while(tmp); a += (d 0) ? (d+1) : 0; int x = (128-a*18.2)/2; int y = 20; display.setTextSize(3); display.setCursor(x, y); display.println(num, d); } void printUnit(int unit) { switch (unit) { case UNIT_TEMPERATURE: printTstr(80, 48, 1, o ); printTstr(88, 50, 2, C ); break; case UNIT_HUMIDITY: printTstr(88, 50, 2, % ); break; case UNIT_METER: //case UNIT_ALTITUDE: printTstr(88, 50, 2, m ); break; case UNIT_MILLIMETER: printTstr(88, 50, 2, mm ); break; case UNIT_PRESS: printTstr(88, 50, 2, kPa ); break; default:; } } void printUnitSmall(int unit) { switch (unit) { case UNIT_TEMPERATURE: display.print( C ); break; case UNIT_HUMIDITY: display.print( % ); break; case UNIT_METER: //case UNIT_ALTITUDE: display.print( m ); break; case UNIT_MILLIMETER: display.print( mm ); break; case UNIT_PRESS: display.print( kPa ); break; default:; } } void dispSensor(float num, unsigned char unit, unsigned char d, char *str) { display.clearDisplay(); display.setTextColor(WHITE); printTstr(0, 0, 1, str); printTnum(num, d); printUnit(unit); display.display(); } void dispSensorSmall(float num, unsigned char unit, unsigned char d, char *str) { //display.setCursor(0, 0); display.print(str); display.print( = ); display.print(num, d); display.print( ); printUnitSmall(unit); display.println(); } void blinkblink() { static unsigned long timer_s = millis(); if(millis()-timer_s 100)return; timer_s = millis(); digitalWrite(13, 1-digitalRead(13)); } // END FILE Connect the Type-C USB cable to the USB connector of the Carduino and connect the other end to your computer. Next, tell the Arduino IDE to use the Carduino. To do this, click Tools Board Carduino 32U4 under Longen AVR Boards. Then select the proper port in Tools Port (the Serial/COM port of your Carduino). Next, upload the program by clicking Sketch Upload. It will take some time to compile and upload the sketch into the Carduino. Once uploaded, the OLED card will display the sensor value. You can press the left push button of the Sensor display card to toggle the display view of the OLED. Later, you can remove the USB plug from the Carduino and connect it with the USB slot of the Sensor display card or you can plug a battery card into the Sensor display board to make the unit protable.","title":"Displaying Sensor Data"},{"location":"1017007/#resources","text":"Eagle Files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1016007_Sensor_Display_Board","title":"Resources"},{"location":"1017008/","text":"Introduction The Open Game Station Player kit contains all the parts you need to build an Arduboy game controller. Kit Contents Game board Carduino 32U4 Buzzer card AAA battery card OLED display card Acrylic spacer plate Screws and standoffs Required Accessories Two AAA batteries (alkaline or rechargable) Assembly Tools 3mm Allen Wrench (hex key) Game Board The game board provides the base for the game board controller and features all the control buttons that can be found on the original Arduboy game controller. Following figure shows the things you can see on the front of the game board. Edge connector slots: Allow to plug cards such as Carduino, buzzer card, OLED display card, AAA battery card. Joystick buttons Control buttons The cards provided with the game board kit features following: Carduino 32U4: This is the microcontroller of the game board and powered with the Arduino Leonardo bootloader. You can upload any Arduboy game into the Carduino. Buzzer card: Provides sounds for game events AAA battery card: Provides portable power to your game controller OLED display card: This is the gaming screen. Assembly This section will guide you to through assembling the Open Game Station Player Kit into a complete Arduboy game controller. Take the acrylic spacer plate. If you want, peel the protective paper masking off both sides of the acrylic spacer plate. Alternatively, you can leave the masking on for additional thickness. Attach the four brass standoffs onto the acrylic spacer plate. The standoffs should be screwed into the holes from the bottom of the plate. Place the game board on top of the brass standoffs. The standoffs should be screwd into the holes from the top of the game board. Take the AAA battery card, insert two AAA batteries, and plug it in to a vertically mounted edge connector slot as shown in the following figure. The white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector. Make sure you have the battery card switched to the OFF position. Take the Buzzer card and plug it into a vertically mounted edge connector slot. Take the Carduino 32U4 card and plug it into a vertically mounted edge connector slot. Slide the switch on the Carduino to the D7 / 8 (game board) position. Take the OLED display card. Remove the protective film by gently pull up on the tab. Plug the OLED display card into the horizontally mounted edge connector slot on the game board. Following figure shows the completed assembly of the Arduboy Game Controller. Installing the Arduboy Uploader NOTE: This installation guide is applicable to the Windows operating system. Arduboy Uploader simplifies uploading new game to your Carduino 32U4. First, install the Arduino software on your computer to get the requied USB drivers. You can download the Arduino software from https://www.arduino.cc/en/Main/Software#download . Then download the Arduboy Uploader from https://github.com/eried/ArduboyUploader/releases/tag/1.3.1 . At the time of this writing, the Arduboy Uploader version is 1.3.1. You can choose between the Installer (.exe) and the Zip packages. Installer We suggest you use the installer that installs directly everything you need to use the Arduboy Uploader. Click on the ArduboyUploader_setup.exe. After downloading the setup, run the installer from your computer. Click I accept the agreement and then click Next. Choose all the additional tasks and then click Next. Click Install. Click Yes to associate the .hex files with Arduboy Uploader. Click Yes to associate the .arduboy files with the Arduboy Uploader. Click Yes to associate the arduboy protocol with the Arduboy Uploader. All done. Click Finsh to close the wizard. Don\u2019t run the Arduboy Uploader yet. Zip package The Zip file is useful if you want to create a portable installation. Click on the abupload_nosetup.zip. After downloading, extract the zip file into your hard drive. Next, run the Register associations as Adminstrator. You will get the following output on command window. Click Yes to associate the .hex files with Arduboy Uploader. Click Yes to associate the .arduboy files with the Arduboy Uploader. Click Yes to associate the arduboy protocol with the Arduboy Uploader. All done. Now you can close the command window. Don\u2019t run the Arduboy Uploader yet. Uplaoding a Game to the Carduino You will be uploading the game, Blackjack from the Erwin's Arduboy Collection. You can use one of the following options to upload the game. Directly from the website with a single click. Using hex file of the game. Directly from the Website Connect the Carduino 32U4 to your computer using a Type-C USB cable. Go to the https://arduboy.ried.cl/ . Scroll down the page until you find the game, Blackjack. Click Upload to my Arduboy. During the transferring of the game to your Carduino, the Arduboy Uploder shows the following animation on your computer. Once uploaded, you can see the following animation on your computer. Using hex File of the Game You can upload a game to the Carduino using the hex file of the game with Arduboy Uploader. Download the hex file of the game. Right-click on the Download hex button and from the short-cut menu, click Save link as\u2026 Then save the file on your computer\u2019s hard drive. Run the Arduboy uploader from the desktop (for installer) or run the abupload (for zip package). Choose the downloaded hex file of your game and click Open. During the transferring of the game to your Carduino, the Arduboy Uploder shows the following animation on your computer. Once uploaded, you can see the following animation on your computer. Get Ready for Gaming First, remove the Type-C USB cable from the Carduino. Then slide the power switch of the AAA battery card to the ON position. Woohoo! Press Play to start the game. Useful Messages Searching for an Arduboy game controller Uploading a game to Arduboy No Arduboy found error Input file is invalid Error transferring the file Resources Eagle Files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1016008_Game_Board The official Arduboy web site: https://arduboy.com/","title":"Game Board"},{"location":"1017008/#introduction","text":"The Open Game Station Player kit contains all the parts you need to build an Arduboy game controller.","title":"Introduction"},{"location":"1017008/#kit-contents","text":"Game board Carduino 32U4 Buzzer card AAA battery card OLED display card Acrylic spacer plate Screws and standoffs","title":"Kit Contents"},{"location":"1017008/#required-accessories","text":"Two AAA batteries (alkaline or rechargable)","title":"Required Accessories"},{"location":"1017008/#assembly-tools","text":"3mm Allen Wrench (hex key)","title":"Assembly Tools"},{"location":"1017008/#game-board","text":"The game board provides the base for the game board controller and features all the control buttons that can be found on the original Arduboy game controller. Following figure shows the things you can see on the front of the game board. Edge connector slots: Allow to plug cards such as Carduino, buzzer card, OLED display card, AAA battery card. Joystick buttons Control buttons The cards provided with the game board kit features following: Carduino 32U4: This is the microcontroller of the game board and powered with the Arduino Leonardo bootloader. You can upload any Arduboy game into the Carduino. Buzzer card: Provides sounds for game events AAA battery card: Provides portable power to your game controller OLED display card: This is the gaming screen.","title":"Game Board"},{"location":"1017008/#assembly","text":"This section will guide you to through assembling the Open Game Station Player Kit into a complete Arduboy game controller. Take the acrylic spacer plate. If you want, peel the protective paper masking off both sides of the acrylic spacer plate. Alternatively, you can leave the masking on for additional thickness. Attach the four brass standoffs onto the acrylic spacer plate. The standoffs should be screwed into the holes from the bottom of the plate. Place the game board on top of the brass standoffs. The standoffs should be screwd into the holes from the top of the game board. Take the AAA battery card, insert two AAA batteries, and plug it in to a vertically mounted edge connector slot as shown in the following figure. The white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector. Make sure you have the battery card switched to the OFF position. Take the Buzzer card and plug it into a vertically mounted edge connector slot. Take the Carduino 32U4 card and plug it into a vertically mounted edge connector slot. Slide the switch on the Carduino to the D7 / 8 (game board) position. Take the OLED display card. Remove the protective film by gently pull up on the tab. Plug the OLED display card into the horizontally mounted edge connector slot on the game board. Following figure shows the completed assembly of the Arduboy Game Controller.","title":"Assembly"},{"location":"1017008/#installing-the-arduboy-uploader","text":"NOTE: This installation guide is applicable to the Windows operating system. Arduboy Uploader simplifies uploading new game to your Carduino 32U4. First, install the Arduino software on your computer to get the requied USB drivers. You can download the Arduino software from https://www.arduino.cc/en/Main/Software#download . Then download the Arduboy Uploader from https://github.com/eried/ArduboyUploader/releases/tag/1.3.1 . At the time of this writing, the Arduboy Uploader version is 1.3.1. You can choose between the Installer (.exe) and the Zip packages.","title":"Installing the Arduboy Uploader"},{"location":"1017008/#installer","text":"We suggest you use the installer that installs directly everything you need to use the Arduboy Uploader. Click on the ArduboyUploader_setup.exe. After downloading the setup, run the installer from your computer. Click I accept the agreement and then click Next. Choose all the additional tasks and then click Next. Click Install. Click Yes to associate the .hex files with Arduboy Uploader. Click Yes to associate the .arduboy files with the Arduboy Uploader. Click Yes to associate the arduboy protocol with the Arduboy Uploader. All done. Click Finsh to close the wizard. Don\u2019t run the Arduboy Uploader yet.","title":"Installer"},{"location":"1017008/#zip-package","text":"The Zip file is useful if you want to create a portable installation. Click on the abupload_nosetup.zip. After downloading, extract the zip file into your hard drive. Next, run the Register associations as Adminstrator. You will get the following output on command window. Click Yes to associate the .hex files with Arduboy Uploader. Click Yes to associate the .arduboy files with the Arduboy Uploader. Click Yes to associate the arduboy protocol with the Arduboy Uploader. All done. Now you can close the command window. Don\u2019t run the Arduboy Uploader yet.","title":"Zip package"},{"location":"1017008/#uplaoding-a-game-to-the-carduino","text":"You will be uploading the game, Blackjack from the Erwin's Arduboy Collection. You can use one of the following options to upload the game. Directly from the website with a single click. Using hex file of the game.","title":"Uplaoding a Game to the Carduino"},{"location":"1017008/#directly-from-the-website","text":"Connect the Carduino 32U4 to your computer using a Type-C USB cable. Go to the https://arduboy.ried.cl/ . Scroll down the page until you find the game, Blackjack. Click Upload to my Arduboy. During the transferring of the game to your Carduino, the Arduboy Uploder shows the following animation on your computer. Once uploaded, you can see the following animation on your computer.","title":"Directly from the Website"},{"location":"1017008/#using-hex-file-of-the-game","text":"You can upload a game to the Carduino using the hex file of the game with Arduboy Uploader. Download the hex file of the game. Right-click on the Download hex button and from the short-cut menu, click Save link as\u2026 Then save the file on your computer\u2019s hard drive. Run the Arduboy uploader from the desktop (for installer) or run the abupload (for zip package). Choose the downloaded hex file of your game and click Open. During the transferring of the game to your Carduino, the Arduboy Uploder shows the following animation on your computer. Once uploaded, you can see the following animation on your computer.","title":"Using hex File of the Game"},{"location":"1017008/#get-ready-for-gaming","text":"First, remove the Type-C USB cable from the Carduino. Then slide the power switch of the AAA battery card to the ON position. Woohoo! Press Play to start the game.","title":"Get Ready for Gaming"},{"location":"1017008/#useful-messages","text":"Searching for an Arduboy game controller Uploading a game to Arduboy No Arduboy found error Input file is invalid Error transferring the file","title":"Useful Messages"},{"location":"1017008/#resources","text":"Eagle Files: https://github.com/Longan-Labs/EagleFile_Cards/tree/master/1016008_Game_Board The official Arduboy web site: https://arduboy.com/","title":"Resources"},{"location":"1030001/","text":"Introduction The Serial CAN BUS provide your Arduino or others MCU with the capability to communication to CAN Bus, such as hacking your vehicle. CAN Bus is a common industrial bus because of its long travel distance, medium communication speed and high reliability. This Serial CAN Bus module is based on MCP2551 and MCP2515 , which can provide speed up to 1Mb/s . Partlist Features Uart to CAN Bus communication Work with Arduino/BeagleBone board/Pi or any MCU that integrated with Uart. AT command Up to 115200 Uart baud rate (default 9600) Up to 1Mb/s CAN Bus baud rate TX and RX led indicator 4pin Grove connector 3.3 / 5V working voltage Easy-to-use Arduino library Small size: 20x40 mm Hardware Overview 4 pin 2.0mm Grove Connector Power and status led indicator Send and Recv led indicator 3.5mm terminal to connect to CAN Bus (CAN_H CAN_L) 120\u03a9 registor, default connected, if you don't need you cut this pad with a box cutter. Work at 3.3V The module is working at 5V most of time. If you want it to work at 3.3V IO, please try: V1.1 Verstion There's a jumper on the back side, please connect the pads together with a soldering iron. And VCC must connect to 5V. V1.0 Version Please try as below, and please note that VCC till need to connect to 5V. AT Command You can achieve the complete function of this Serial CAN Bus module with only a few AT command. CMD Description +++ Switch from Normal mode to Config mode AT+S=[value] Set serial baud rate AT+C=[value] Set CAN Bus baud rate AT+M=[N][EXT][value] Set mask AT+F=[N][EXT][value] Set filter AT+Q Switch to Normal Mode Note All of the cmd should end with '\\n' except +++ Set Serial Baud Rate You can set the serial baud rate of the module with this command. There're 5 rates available, up to 115200 b/s. AT+S=[value] value 0 1 2 3 4 baud rate(b/s) 9600 19200 38400 57600 115200 Note Default is 9600 Eg: Set serial baud rate to 57600 AT+S=3 Respose OK or ERROR Set CAN Bus Baudrate You can use this command to set the rate of CAN Bus, there's 18 rates available. Normally, if you want to hack your vehicle, 500k is the right one. AT+C=[value] value 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 rate(kb/s) 5 10 20 25 31.2 33 40 50 80 83.3 95 100 125 200 250 500 666 1000 Tip Default is 500K Eg: Set CAN BUS baud rate to 50K AT+C=08 Respose OK or ERROR Set Mask There're 2 Mask for the module, Mask0 and Mask1. AT+M=[N][EXT][value] N: 0: Mask0 1: Mask1 EXT: 0: Standard Frame 1: Extended Frame value: Neeed 8 bit of character, hexadecimal. Eg: Set Mask1 to 0x3DF, standard frame: AT+M=[1][0][000003DF] Respose OK or ERROR Set Filt There're 6 Mask for the module, Filt0 ~ Filt5 AT+F=[N][EXT][value] N: N 0 1 2 3 4 5 Filt Filt0 Filt1 Filt2 Filt3 Filt4 Filt5 EXT: 0: Standard Frame 1: Extended Frame value: Neeed 8 bit of character, hexadecimal. Eg: Set Filt3 to 0x2C, standard frame: AT+F=[1][0][0000002C] Respose OK or ERROR Normal Mode When the module working on Normal mode, you can send and recevie data from CAN Bus. Send You should send 14 byte of data per frame. Define as below, bit 0 1 2 3 4 5 6 7 8 9 10 11 12 13 define ID3 ID2 ID1 ID0 EXT RTR DTA0 DTA1 DTA2 DTA3 DTA4 DTA5 DTA6 DTA7 ID0~ID3: CAN ID EXT: 0 for standard frame, 1 for extended frame RTR: 0 for standard frame, 1 for remote frame DTA0~DTA7: 8 byte of data Eg. Send {1, 2, 3, 4, 5, 6, 7, 8} to ID:0x3DC, Standard frame: { 0 , 0 , 3 , 0xDC , 0 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 } Recv You will get 12 byte of data per frame. Define as below, bit 0 1 2 3 4 5 6 7 8 9 10 11 define ID3 ID2 ID1 ID0 DTA0 DTA1 DTA2 DTA3 DTA4 DTA5 DTA6 DTA7 ID0~ID3: CAN ID DTA0~DTA7: 8 byte of data Arduino Library We provide an library for Aruino Software Serial. Please download it at Github There're many examples for the library, which is consist of, send - How to send a frame to CAN Bus recv - How to recv a frame from CAN Bus debug - debug mode, you can send a cmd to the module set_can_baudrate - set can bus baudrate set_mask_filt - set mask and filt of the module Reference Arduino Library How to get ONE Schematics in Eagle File","title":"Serial CAN Bus Module"},{"location":"1030001/#introduction","text":"The Serial CAN BUS provide your Arduino or others MCU with the capability to communication to CAN Bus, such as hacking your vehicle. CAN Bus is a common industrial bus because of its long travel distance, medium communication speed and high reliability. This Serial CAN Bus module is based on MCP2551 and MCP2515 , which can provide speed up to 1Mb/s .","title":"Introduction"},{"location":"1030001/#partlist","text":"","title":"Partlist"},{"location":"1030001/#features","text":"Uart to CAN Bus communication Work with Arduino/BeagleBone board/Pi or any MCU that integrated with Uart. AT command Up to 115200 Uart baud rate (default 9600) Up to 1Mb/s CAN Bus baud rate TX and RX led indicator 4pin Grove connector 3.3 / 5V working voltage Easy-to-use Arduino library Small size: 20x40 mm","title":"Features"},{"location":"1030001/#hardware-overview","text":"4 pin 2.0mm Grove Connector Power and status led indicator Send and Recv led indicator 3.5mm terminal to connect to CAN Bus (CAN_H CAN_L) 120\u03a9 registor, default connected, if you don't need you cut this pad with a box cutter.","title":"Hardware Overview"},{"location":"1030001/#work-at-33v","text":"The module is working at 5V most of time. If you want it to work at 3.3V IO, please try:","title":"Work at 3.3V"},{"location":"1030001/#v11-verstion","text":"There's a jumper on the back side, please connect the pads together with a soldering iron. And VCC must connect to 5V.","title":"V1.1 Verstion"},{"location":"1030001/#v10-version","text":"Please try as below, and please note that VCC till need to connect to 5V.","title":"V1.0 Version"},{"location":"1030001/#at-command","text":"You can achieve the complete function of this Serial CAN Bus module with only a few AT command. CMD Description +++ Switch from Normal mode to Config mode AT+S=[value] Set serial baud rate AT+C=[value] Set CAN Bus baud rate AT+M=[N][EXT][value] Set mask AT+F=[N][EXT][value] Set filter AT+Q Switch to Normal Mode Note All of the cmd should end with '\\n' except +++","title":"AT Command"},{"location":"1030001/#set-serial-baud-rate","text":"You can set the serial baud rate of the module with this command. There're 5 rates available, up to 115200 b/s. AT+S=[value] value 0 1 2 3 4 baud rate(b/s) 9600 19200 38400 57600 115200 Note Default is 9600 Eg: Set serial baud rate to 57600 AT+S=3 Respose OK or ERROR","title":"Set Serial Baud Rate"},{"location":"1030001/#set-can-bus-baudrate","text":"You can use this command to set the rate of CAN Bus, there's 18 rates available. Normally, if you want to hack your vehicle, 500k is the right one. AT+C=[value] value 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 rate(kb/s) 5 10 20 25 31.2 33 40 50 80 83.3 95 100 125 200 250 500 666 1000 Tip Default is 500K Eg: Set CAN BUS baud rate to 50K AT+C=08 Respose OK or ERROR","title":"Set CAN Bus Baudrate"},{"location":"1030001/#set-mask","text":"There're 2 Mask for the module, Mask0 and Mask1. AT+M=[N][EXT][value] N: 0: Mask0 1: Mask1 EXT: 0: Standard Frame 1: Extended Frame value: Neeed 8 bit of character, hexadecimal. Eg: Set Mask1 to 0x3DF, standard frame: AT+M=[1][0][000003DF] Respose OK or ERROR","title":"Set Mask"},{"location":"1030001/#set-filt","text":"There're 6 Mask for the module, Filt0 ~ Filt5 AT+F=[N][EXT][value] N: N 0 1 2 3 4 5 Filt Filt0 Filt1 Filt2 Filt3 Filt4 Filt5 EXT: 0: Standard Frame 1: Extended Frame value: Neeed 8 bit of character, hexadecimal. Eg: Set Filt3 to 0x2C, standard frame: AT+F=[1][0][0000002C] Respose OK or ERROR","title":"Set Filt"},{"location":"1030001/#normal-mode","text":"When the module working on Normal mode, you can send and recevie data from CAN Bus.","title":"Normal Mode"},{"location":"1030001/#send","text":"You should send 14 byte of data per frame. Define as below, bit 0 1 2 3 4 5 6 7 8 9 10 11 12 13 define ID3 ID2 ID1 ID0 EXT RTR DTA0 DTA1 DTA2 DTA3 DTA4 DTA5 DTA6 DTA7 ID0~ID3: CAN ID EXT: 0 for standard frame, 1 for extended frame RTR: 0 for standard frame, 1 for remote frame DTA0~DTA7: 8 byte of data Eg. Send {1, 2, 3, 4, 5, 6, 7, 8} to ID:0x3DC, Standard frame: { 0 , 0 , 3 , 0xDC , 0 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 }","title":"Send"},{"location":"1030001/#recv","text":"You will get 12 byte of data per frame. Define as below, bit 0 1 2 3 4 5 6 7 8 9 10 11 define ID3 ID2 ID1 ID0 DTA0 DTA1 DTA2 DTA3 DTA4 DTA5 DTA6 DTA7 ID0~ID3: CAN ID DTA0~DTA7: 8 byte of data","title":"Recv"},{"location":"1030001/#arduino-library","text":"We provide an library for Aruino Software Serial. Please download it at Github There're many examples for the library, which is consist of, send - How to send a frame to CAN Bus recv - How to recv a frame from CAN Bus debug - debug mode, you can send a cmd to the module set_can_baudrate - set can bus baudrate set_mask_filt - set mask and filt of the module","title":"Arduino Library"},{"location":"1030001/#reference","text":"Arduino Library How to get ONE Schematics in Eagle File","title":"Reference"},{"location":"1030002/","text":"Introduction This kit allows you to interface with your vehicle's OBD-II interface. The kit includes a Serial CAN Bus module as well as a OBD-II Connector, with this kit you can get data from your vehicle easily. We provide an tutorial which is based on Arduino. OBD-II (short for On-Board Diagnostics, Second Generation) is a set of standards for implementing a computer based system to control emissions from vehicles. It was first introduced in the United States in 1994, and became a requirement on all 1996 and newer US vehicles. Other countries, including Canada, parts of the European Union, Japan, Australia, and Brazil adopted similar legislation. A large portion of the modern vehicle fleet supports OBD-II or one of its regional flavors. Features Up to 1Mb/s CAN Bus rate DIY kit Multi-platform avaiable (Arduino, Raspberry, Beaglebone Board, etc.) Serial Communication Tutorial for Arduino Partlist Serial CAN Bus Module OBD-II Connector Screw Driver Cable for CAN Bus Grove Cable Note The kit don't include a controller board. Hardware Overview of Serial CAN Bus Module 4 pin 2.0mm Grove Connector Power and status led indicator Send and Recv led indicator 3.5mm terminal to connect to CAN Bus (CAN_H CAN_L) 120\u03a9 registor, default connected, if you don't need you cut this pad with a box cutter. Hardware Connection The kit includes an OBD-II connector, below is pins define of the connector. The kit includes a cable as well, you need a soldering iron to connect the cable to the connector. As shown below. Getting Started with Arduino Here we will make a demo to read some value from a vehicle with an Arduino. Download Arduino library of the board from Github Open the example \"obd_demo\". For this example, we use D2 as RX of software serial, D3 as TX. So you should connect D2 to TX of Serial can bus module, and D3 to RX. After upload the sketch to Arduino, you can try connect OBD-II connector to your vehicle. Open you serial monitor, try to input an OBD-PIDs, see if you can get some values from your vehicle. Click to get more about OBD-PIDs . Reference Wiki for Serial CAN Bus module Arduino Library Schematics of Serial CAN Bus Module in Eagle File","title":"OBD-II CAN-BUS Development Kit"},{"location":"1030002/#introduction","text":"This kit allows you to interface with your vehicle's OBD-II interface. The kit includes a Serial CAN Bus module as well as a OBD-II Connector, with this kit you can get data from your vehicle easily. We provide an tutorial which is based on Arduino. OBD-II (short for On-Board Diagnostics, Second Generation) is a set of standards for implementing a computer based system to control emissions from vehicles. It was first introduced in the United States in 1994, and became a requirement on all 1996 and newer US vehicles. Other countries, including Canada, parts of the European Union, Japan, Australia, and Brazil adopted similar legislation. A large portion of the modern vehicle fleet supports OBD-II or one of its regional flavors.","title":"Introduction"},{"location":"1030002/#features","text":"Up to 1Mb/s CAN Bus rate DIY kit Multi-platform avaiable (Arduino, Raspberry, Beaglebone Board, etc.) Serial Communication Tutorial for Arduino","title":"Features"},{"location":"1030002/#partlist","text":"Serial CAN Bus Module OBD-II Connector Screw Driver Cable for CAN Bus Grove Cable Note The kit don't include a controller board.","title":"Partlist"},{"location":"1030002/#hardware-overview-of-serial-can-bus-module","text":"4 pin 2.0mm Grove Connector Power and status led indicator Send and Recv led indicator 3.5mm terminal to connect to CAN Bus (CAN_H CAN_L) 120\u03a9 registor, default connected, if you don't need you cut this pad with a box cutter.","title":"Hardware Overview of Serial CAN Bus Module"},{"location":"1030002/#hardware-connection","text":"The kit includes an OBD-II connector, below is pins define of the connector. The kit includes a cable as well, you need a soldering iron to connect the cable to the connector. As shown below.","title":"Hardware Connection"},{"location":"1030002/#getting-started-with-arduino","text":"Here we will make a demo to read some value from a vehicle with an Arduino. Download Arduino library of the board from Github Open the example \"obd_demo\". For this example, we use D2 as RX of software serial, D3 as TX. So you should connect D2 to TX of Serial can bus module, and D3 to RX. After upload the sketch to Arduino, you can try connect OBD-II connector to your vehicle. Open you serial monitor, try to input an OBD-PIDs, see if you can get some values from your vehicle. Click to get more about OBD-PIDs .","title":"Getting Started with Arduino"},{"location":"1030002/#reference","text":"Wiki for Serial CAN Bus module Arduino Library Schematics of Serial CAN Bus Module in Eagle File","title":"Reference"},{"location":"1030003/","text":"Introduction The OBD \u2161 Slaver allows you to hack your vehicle with the integrated OBD port and output all the data via serial interface. It supports the CAN bus protocol, integrates micro SD card slot. On top of that, with the help of a build-in Atmega32U4, it's compatible with arduino. Which means you can code it like a ardunio, then just plug it into your car's OBD port, you will get the output data via the Type C USB port or you can store all the data into your micro-SD card (TF card), easy-peasy. This Serial CAN Bus module is based on MCP2551 and MCP2515 , which can provide can baud rate from 5kb/s to 1Mb/s . One more thing, we integrate the GPS module, you can even track your car with this fantastic little module. It is obviously that you will love it, happy hacking\uff01 Features ODB \u2161 port Uart to CAN Bus communication Build-in Atmega32U4 Integraded GPS module Integraded Micro-SD(TF) card AT command support Up to 115200 Uart baud rate (default 9600) Up to 1Mb/s CAN Bus baud rate TX and RX led indicator Easy-to-use Arduino library Specifications Parameter Value MCU Atmega32U4 (with Arduino Leonardo bootloader) Clock Speed 16MHz Flash Memory 32KB SRAM 2.5KB EERROM 1KB Operate Voltage 5V Input Interface OBD-II Output Interface USB Type C Hardware Overview Part List OBD \u2161 Slaver(Base board) x 1 GPS Board x 1 Plastic Case x 1 Screw Driver x 1 Pin out Base Board 1.OBD-II Connector: On-board diagnostics (OBD) is an automotive term referring to a vehicle's self-diagnostic and reporting capability. OBD-II is an improvement over OBD-I in both capability and standardization. The OBD-II standard specifies the type of diagnostic connector and its pinout. 2.Reset Button: Reset the on-board Atmega chip 3.78L05: Provide a stable 5V to the whole system. 4.Atmega32U4: The master of the entire module, mainly used to store data on the TF card or transfer data to the computer through the type C cable. In addition, since it's arduino compatible, you can use it to implement some simple controls, such as triggering a buzzer alarm when the speed exceeds a certain value. 5.MCP2515: Microchip Technology\u2019s MCP2515 is a stand-alone Controller Area Network (CAN) controller that implements the CAN specification, version 2.0B. It is capable of transmitting and receiving both standard and extended data and remote frames. The MCP2515 has two acceptance masks and six acceptance filters that are used to filter out unwanted messages, thereby reducing the host MCUs overhead. The MCP2515 interfaces with microcontrollers (MCUs) via an industry standard Serial Peripheral Interface (SPI). 6.MCP2551 High-Speed CAN Transceiver\uff1aThe MCP2551 is a high-speed CAN, fault-tolerant device that serves as the interface between a CAN protocol controller and the physical bus. Typically, each node in a CAN system must have a device to convert the digital signals generated by a CAN controller to signals suitable for transmission over the bus cabling (differential output). It also provides a buffer between the CAN controller and the high-voltage spikes that can be generated on the CAN bus by outside sources (EMI, ESD, electrical transients, etc.). 7.2x8Pin Female Header for GPS module See the GPS section for specific pin definitions. Attention It should be noted that when assembling the GPS module, please align the white triangle on the development board and the module, otherwise the GPS module may be damaged. 8.CAN RX/TX Indicator 9.Power LED A.Type C USB connector for programming B.User LED, connect to D13 C.TF Card slot D.120\u03a9 resister ISO 11898 requires a cable with a nominal impedance of 120 \u03a9; therefore, you should use 120 \u03a9 resistors for termination. If you place multiple devices along the cable, only the devices on the ends of the cable need termination resistors. Figure 1 shows an example of how to terminate a high-speed network. So if you use this slaver on the end of the CAN bus, you need to solder a 120\u03a9 resister between the two pad, if not just leave them alone. For more detail about the CAN bus protocol, please refer to the NI CAN Physical Layer and Termination Guide E.ICSP pads for burning bootloader GPS Board 1.GPS Antenna 2.2x8Pin header 3.NEO-6 GPS module Refer to the GPS datasheet . 4. External Antenna Port NEO-6 modules are designed for use with passive and active13 antennas. Parameter Specification Antenna Type Passive and active antenna Minimum gain 15 dB (to compensate signal loss in RF cable) Maximum gain 50 dB Maximum noise figure 1.5 dB Assembly and Hardware Connection Assembly It is assembled when you get the development board. If you disassemble it, you can reassemble it by following the steps. Step 1. Please check each part. Step 2. Mount the base board to the bottom housing. Step 3. Insert the GPS board on the baseboard. Attention When inserting the GPS board, be careful to align the white triangles of the GPS and Base boards. Step 4. Close the top cover and fix it with screws. GPS Usage The GPS Module use serial port to output the GPS data, you just need to connect this module to your PC via the USB type C cable, using any serial tool such as putty, you will be able to get the GPS data. As shown below: In order to parse the received GPS data, you need to refer to the http://aprs.gids.nl/nmea/ . For more detail about the NEO-6 module, please refer to NEO-6 Datasheet CAN BUS Usage Arduino Code We provide an arduino library for OBD \u2161 Slaver. There're many examples for the library, which is consist of, send - How to send a frame to CAN Bus recv - How to recv a frame from CAN Bus debug - debug mode, you can send a cmd to the module set_can_baudrate - set can bus baudrate set_mask_filt - set mask and filt of the module Reference Base board eagle file GPS borad eagle file Arduino Library NEO-6 Datasheet","title":"OBD-II CAN Bus GPS Development Kit"},{"location":"1030003/#introduction","text":"The OBD \u2161 Slaver allows you to hack your vehicle with the integrated OBD port and output all the data via serial interface. It supports the CAN bus protocol, integrates micro SD card slot. On top of that, with the help of a build-in Atmega32U4, it's compatible with arduino. Which means you can code it like a ardunio, then just plug it into your car's OBD port, you will get the output data via the Type C USB port or you can store all the data into your micro-SD card (TF card), easy-peasy. This Serial CAN Bus module is based on MCP2551 and MCP2515 , which can provide can baud rate from 5kb/s to 1Mb/s . One more thing, we integrate the GPS module, you can even track your car with this fantastic little module. It is obviously that you will love it, happy hacking\uff01","title":"Introduction"},{"location":"1030003/#features","text":"ODB \u2161 port Uart to CAN Bus communication Build-in Atmega32U4 Integraded GPS module Integraded Micro-SD(TF) card AT command support Up to 115200 Uart baud rate (default 9600) Up to 1Mb/s CAN Bus baud rate TX and RX led indicator Easy-to-use Arduino library","title":"Features"},{"location":"1030003/#specifications","text":"Parameter Value MCU Atmega32U4 (with Arduino Leonardo bootloader) Clock Speed 16MHz Flash Memory 32KB SRAM 2.5KB EERROM 1KB Operate Voltage 5V Input Interface OBD-II Output Interface USB Type C","title":"Specifications"},{"location":"1030003/#hardware-overview","text":"","title":"Hardware Overview"},{"location":"1030003/#part-list","text":"OBD \u2161 Slaver(Base board) x 1 GPS Board x 1 Plastic Case x 1 Screw Driver x 1","title":"Part List"},{"location":"1030003/#pin-out","text":"Base Board 1.OBD-II Connector: On-board diagnostics (OBD) is an automotive term referring to a vehicle's self-diagnostic and reporting capability. OBD-II is an improvement over OBD-I in both capability and standardization. The OBD-II standard specifies the type of diagnostic connector and its pinout. 2.Reset Button: Reset the on-board Atmega chip 3.78L05: Provide a stable 5V to the whole system. 4.Atmega32U4: The master of the entire module, mainly used to store data on the TF card or transfer data to the computer through the type C cable. In addition, since it's arduino compatible, you can use it to implement some simple controls, such as triggering a buzzer alarm when the speed exceeds a certain value. 5.MCP2515: Microchip Technology\u2019s MCP2515 is a stand-alone Controller Area Network (CAN) controller that implements the CAN specification, version 2.0B. It is capable of transmitting and receiving both standard and extended data and remote frames. The MCP2515 has two acceptance masks and six acceptance filters that are used to filter out unwanted messages, thereby reducing the host MCUs overhead. The MCP2515 interfaces with microcontrollers (MCUs) via an industry standard Serial Peripheral Interface (SPI). 6.MCP2551 High-Speed CAN Transceiver\uff1aThe MCP2551 is a high-speed CAN, fault-tolerant device that serves as the interface between a CAN protocol controller and the physical bus. Typically, each node in a CAN system must have a device to convert the digital signals generated by a CAN controller to signals suitable for transmission over the bus cabling (differential output). It also provides a buffer between the CAN controller and the high-voltage spikes that can be generated on the CAN bus by outside sources (EMI, ESD, electrical transients, etc.). 7.2x8Pin Female Header for GPS module See the GPS section for specific pin definitions. Attention It should be noted that when assembling the GPS module, please align the white triangle on the development board and the module, otherwise the GPS module may be damaged. 8.CAN RX/TX Indicator 9.Power LED A.Type C USB connector for programming B.User LED, connect to D13 C.TF Card slot D.120\u03a9 resister ISO 11898 requires a cable with a nominal impedance of 120 \u03a9; therefore, you should use 120 \u03a9 resistors for termination. If you place multiple devices along the cable, only the devices on the ends of the cable need termination resistors. Figure 1 shows an example of how to terminate a high-speed network. So if you use this slaver on the end of the CAN bus, you need to solder a 120\u03a9 resister between the two pad, if not just leave them alone. For more detail about the CAN bus protocol, please refer to the NI CAN Physical Layer and Termination Guide E.ICSP pads for burning bootloader GPS Board 1.GPS Antenna 2.2x8Pin header 3.NEO-6 GPS module Refer to the GPS datasheet . 4. External Antenna Port NEO-6 modules are designed for use with passive and active13 antennas. Parameter Specification Antenna Type Passive and active antenna Minimum gain 15 dB (to compensate signal loss in RF cable) Maximum gain 50 dB Maximum noise figure 1.5 dB","title":"Pin out"},{"location":"1030003/#assembly-and-hardware-connection","text":"Assembly It is assembled when you get the development board. If you disassemble it, you can reassemble it by following the steps. Step 1. Please check each part. Step 2. Mount the base board to the bottom housing. Step 3. Insert the GPS board on the baseboard. Attention When inserting the GPS board, be careful to align the white triangles of the GPS and Base boards. Step 4. Close the top cover and fix it with screws.","title":"Assembly and Hardware Connection"},{"location":"1030003/#gps-usage","text":"The GPS Module use serial port to output the GPS data, you just need to connect this module to your PC via the USB type C cable, using any serial tool such as putty, you will be able to get the GPS data. As shown below: In order to parse the received GPS data, you need to refer to the http://aprs.gids.nl/nmea/ . For more detail about the NEO-6 module, please refer to NEO-6 Datasheet","title":"GPS Usage"},{"location":"1030003/#can-bus-usage","text":"","title":"CAN BUS Usage"},{"location":"1030003/#arduino-code","text":"We provide an arduino library for OBD \u2161 Slaver. There're many examples for the library, which is consist of, send - How to send a frame to CAN Bus recv - How to recv a frame from CAN Bus debug - debug mode, you can send a cmd to the module set_can_baudrate - set can bus baudrate set_mask_filt - set mask and filt of the module","title":"Arduino Code"},{"location":"1030003/#reference","text":"Base board eagle file GPS borad eagle file Arduino Library NEO-6 Datasheet","title":"Reference"},{"location":"1040001/","text":"An open source, programmable, Arduino-compatible USB infrared receiver that gives new life to old remote controls. Introduction Here we will take an example to show you how to use IRduino. I\u2019ve got a TV remote by hand, and I want to control my PC via this remote. I notice there\u2019s UP, DOWN, LEFT, RIGHT as well as an OK button on the remote, it\u2019s very coincidentally that there\u2019re such arrow key on the key board, so this example is to tell your PC press those key via IRduino and the TV remote, and the ok button will control the SPACE key. Specifications Microcontroller: Atmega32u4 Operating Voltage: 5V Flash Memory: 32KB of which 4KB used by bootloader SRAM: 2.5KB EEPROM: 1KB Clock Speed: 16MHz Remote Distance: 5m Remote Support: 95% of IR Remote on the market Download the Code About Arduino Arduino is an open-source electronics platform based on easy-to-use hardware and software. It's intended for anyone making interactive projects. You can download the code at Github , it\u2019s an Arduino Library. After download the code, extract it to the libraries folder of your Adruino. If there\u2019s \u201c-master\u201d in the folder name, just remove it, otherwise it may cause some compile error. Read Key Value of a Remote IRduino can support almost all the IR remote on the market, include RV remote, Air conditioning remote and even your DVD remote. Open Get_IR_Code example on the examples folder of IRduino library. Tool - booards to select Arduino Leonardo, then the right COM. Finally, upload the code to your IRduino. Open Serial Monitor, press a remote key, then you can get something on the monitor: We can find that Serial Monitor had printed a Char type data, which is from 0x00 to 0xff. I had press two button, so there\u2019s 2 key value on the above image, which is 0x0A and 0x40. Then in this way we can the values of the four button: KEY NUM UP 0xEE DOWN 0xAE LEFT 0xCE RIGHT 0x8E OK 0x5E: Remember this value, which is important in the next step. Write The Code Don\u2019t worry about the code, it\u2019s easy just like you use an Arduino. Actually I had finish this example, now we learn about it. Open Task_Mode_Arrow example. Now here we goto the code. We notice the remote key value is used here: // IR CODE DEFINE #define IR_CODE_UP 0xEE #define IR_CODE_DOWN 0xAE #define IR_CODE_LEFT 0xCE #define IR_CODE_RIGHT 0x8E #define IR_CODE_SPACE 0x5E Then the setup: // add task item IRduino . addItem ( IR_CODE_UP , task_up ); IRduino . addItem ( IR_CODE_DOWN , task_down ); IRduino . addItem ( IR_CODE_LEFT , task_left ); IRduino . addItem ( IR_CODE_RIGHT , task_right ); Here we add 5 tasks via the IRduino.addItem function. This function need two parameter, remote key value and a function pointer. Don\u2019t know funciton pointer? Just forget it, actually it\u2019s just the function name. As we had add four task, so we need 4 function, as following: // add task void task_up () { iRduino . keyPressRelease ( KEY_UP_ARROW ); } void task_down () { iRduino . keyPressRelease ( KEY_DOWN_ARROW ); } void task_left () { iRduino . keyPressRelease ( KEY_LEFT_ARROW ); } void task_right () { iRduino . keyPressRelease ( KEY_RIGHT_ARROW ); } void task_space () { iRduino . keyPressRelease ( KEY_SPACE ); } I guess you have had ideas about these four function. Yes, they just press and release some key on your PC. Then let\u2019s have a summary, to add a task, we need 3 steps: Write down the remote key value Write a task function, which will have some certain use, like press some key on PC Use addItem funciton to add the task, then your press the key on remote, IRduino will run the task function once. Resources Arduino Library at Github Eagle File","title":"IRduino"},{"location":"1040001/#introduction","text":"Here we will take an example to show you how to use IRduino. I\u2019ve got a TV remote by hand, and I want to control my PC via this remote. I notice there\u2019s UP, DOWN, LEFT, RIGHT as well as an OK button on the remote, it\u2019s very coincidentally that there\u2019re such arrow key on the key board, so this example is to tell your PC press those key via IRduino and the TV remote, and the ok button will control the SPACE key.","title":"Introduction"},{"location":"1040001/#specifications","text":"Microcontroller: Atmega32u4 Operating Voltage: 5V Flash Memory: 32KB of which 4KB used by bootloader SRAM: 2.5KB EEPROM: 1KB Clock Speed: 16MHz Remote Distance: 5m Remote Support: 95% of IR Remote on the market","title":"Specifications"},{"location":"1040001/#download-the-code","text":"About Arduino Arduino is an open-source electronics platform based on easy-to-use hardware and software. It's intended for anyone making interactive projects. You can download the code at Github , it\u2019s an Arduino Library. After download the code, extract it to the libraries folder of your Adruino. If there\u2019s \u201c-master\u201d in the folder name, just remove it, otherwise it may cause some compile error.","title":"Download the Code"},{"location":"1040001/#read-key-value-of-a-remote","text":"IRduino can support almost all the IR remote on the market, include RV remote, Air conditioning remote and even your DVD remote. Open Get_IR_Code example on the examples folder of IRduino library. Tool - booards to select Arduino Leonardo, then the right COM. Finally, upload the code to your IRduino. Open Serial Monitor, press a remote key, then you can get something on the monitor: We can find that Serial Monitor had printed a Char type data, which is from 0x00 to 0xff. I had press two button, so there\u2019s 2 key value on the above image, which is 0x0A and 0x40. Then in this way we can the values of the four button: KEY NUM UP 0xEE DOWN 0xAE LEFT 0xCE RIGHT 0x8E OK 0x5E: Remember this value, which is important in the next step.","title":"Read Key Value of a Remote"},{"location":"1040001/#write-the-code","text":"Don\u2019t worry about the code, it\u2019s easy just like you use an Arduino. Actually I had finish this example, now we learn about it. Open Task_Mode_Arrow example. Now here we goto the code. We notice the remote key value is used here: // IR CODE DEFINE #define IR_CODE_UP 0xEE #define IR_CODE_DOWN 0xAE #define IR_CODE_LEFT 0xCE #define IR_CODE_RIGHT 0x8E #define IR_CODE_SPACE 0x5E Then the setup: // add task item IRduino . addItem ( IR_CODE_UP , task_up ); IRduino . addItem ( IR_CODE_DOWN , task_down ); IRduino . addItem ( IR_CODE_LEFT , task_left ); IRduino . addItem ( IR_CODE_RIGHT , task_right ); Here we add 5 tasks via the IRduino.addItem function. This function need two parameter, remote key value and a function pointer. Don\u2019t know funciton pointer? Just forget it, actually it\u2019s just the function name. As we had add four task, so we need 4 function, as following: // add task void task_up () { iRduino . keyPressRelease ( KEY_UP_ARROW ); } void task_down () { iRduino . keyPressRelease ( KEY_DOWN_ARROW ); } void task_left () { iRduino . keyPressRelease ( KEY_LEFT_ARROW ); } void task_right () { iRduino . keyPressRelease ( KEY_RIGHT_ARROW ); } void task_space () { iRduino . keyPressRelease ( KEY_SPACE ); } I guess you have had ideas about these four function. Yes, they just press and release some key on your PC. Then let\u2019s have a summary, to add a task, we need 3 steps: Write down the remote key value Write a task function, which will have some certain use, like press some key on PC Use addItem funciton to add the task, then your press the key on remote, IRduino will run the task function once.","title":"Write The Code"},{"location":"1040001/#resources","text":"Arduino Library at Github Eagle File","title":"Resources"},{"location":"1040002/","text":"Introduction Heelight Core is a smart sound sensor that can recognize up to 500+ digital voice commands. It was originally used on the Heelight \u2013 a smart colorful bulb that can be controlled by digital sound waves. Now we introduce this sensor into the small and neat modules, allow you to control things via sound in your projects. Features Small Size: 20x17mm 500+ sound commands Android/iOS App Bread board or intrtged into PCBA 10m control distance UART output, default 9600 baudrate Size APP Android iOS Getting Started with Arduino First of all, you need to connect relay core to your Arduino, as bellow: Heelight Core Arduino GND GND VCC 3.3V TX 2 RX 3 Warning DON'T connect VCC to 5V, otherwise you may damage the module This is the basic example that can show the ability of the sensor, which is output different hex values in the serial monitor when it receives (or hear) different digital sounds. // heelight test code #include SoftwareSerial.h SoftwareSerial heelight ( 2 , 3 ); // RX, TX void setup () { Serial . begin ( 9600 ); heelight . begin ( 9600 ); // default baudrate is 9600 } void loop () { while ( heelight . available ()) { Serial . print ( heelight . read (), HEX ); Serial . print ( \\t ); Serial . print ( heelight . read (), HEX ); Serial . print ( \\t ); Serial . print ( heelight . read (), HEX ); Serial . print ( \\t ); Serial . print ( heelight . read (), HEX ); Serial . println (); } } Open the serial monitor, set baud rate to be 9600, then play the sound. We have prepared 511 different digital sounds for you. Every time one sound is played, the heelight sensor will output a hex value correspond to the sound, and the last 2 characters of the hex value is the same as the sounds value. Reference Eagle Library of Heelight Core 500 sound commands Heelight Relay","title":"Heelight Core"},{"location":"1040002/#introduction","text":"Heelight Core is a smart sound sensor that can recognize up to 500+ digital voice commands. It was originally used on the Heelight \u2013 a smart colorful bulb that can be controlled by digital sound waves. Now we introduce this sensor into the small and neat modules, allow you to control things via sound in your projects.","title":"Introduction"},{"location":"1040002/#features","text":"Small Size: 20x17mm 500+ sound commands Android/iOS App Bread board or intrtged into PCBA 10m control distance UART output, default 9600 baudrate","title":"Features"},{"location":"1040002/#size","text":"","title":"Size"},{"location":"1040002/#app","text":"Android iOS","title":"APP"},{"location":"1040002/#getting-started-with-arduino","text":"First of all, you need to connect relay core to your Arduino, as bellow: Heelight Core Arduino GND GND VCC 3.3V TX 2 RX 3 Warning DON'T connect VCC to 5V, otherwise you may damage the module This is the basic example that can show the ability of the sensor, which is output different hex values in the serial monitor when it receives (or hear) different digital sounds. // heelight test code #include SoftwareSerial.h SoftwareSerial heelight ( 2 , 3 ); // RX, TX void setup () { Serial . begin ( 9600 ); heelight . begin ( 9600 ); // default baudrate is 9600 } void loop () { while ( heelight . available ()) { Serial . print ( heelight . read (), HEX ); Serial . print ( \\t ); Serial . print ( heelight . read (), HEX ); Serial . print ( \\t ); Serial . print ( heelight . read (), HEX ); Serial . print ( \\t ); Serial . print ( heelight . read (), HEX ); Serial . println (); } } Open the serial monitor, set baud rate to be 9600, then play the sound. We have prepared 511 different digital sounds for you. Every time one sound is played, the heelight sensor will output a hex value correspond to the sound, and the last 2 characters of the hex value is the same as the sounds value.","title":"Getting Started with Arduino"},{"location":"1040002/#reference","text":"Eagle Library of Heelight Core 500 sound commands Heelight Relay","title":"Reference"},{"location":"1040003/","text":"Introduction Heelight relay provides many ways to contrl a relay. You can control your lamp or other appliances via the sound command. Part List Part Qty Heelight Relay Module 1 Screw 1 USB-Barrel Jack cable 1 Features 220V/5A App to control 2 User Button 5V Barrel Jack input 5mm Terminal Relay output Getting Started Step1. First of all, you need to install an APP Android iOS Step2. Connect the board to a 5V power, such as USB port of your PC. Step3. There're 2 buttons on the board, one for ON and the other for OFF, try click on them to control the relay Step4. Open then APP and will find an ON and OFF button on the bottom. Click on them to make a voice to control the relay. Tip If nothing happen, try to increase/lower the volume of your phone. Step5. If you want to change a voice to control, long press ON of OFF button untill the led blink, then release the button, and make a sound via your phone. The LED will stop blink if successed. 500+ sound commands We provides more that 500 sound commands , those are .wav files. If you don't want an app, you can just play those sound with a music player You can add those sounds to your own app to control the relay Refference Heelight Core","title":"Heelight Relay"},{"location":"1040003/#introduction","text":"Heelight relay provides many ways to contrl a relay. You can control your lamp or other appliances via the sound command.","title":"Introduction"},{"location":"1040003/#part-list","text":"Part Qty Heelight Relay Module 1 Screw 1 USB-Barrel Jack cable 1","title":"Part List"},{"location":"1040003/#features","text":"220V/5A App to control 2 User Button 5V Barrel Jack input 5mm Terminal Relay output","title":"Features"},{"location":"1040003/#getting-started","text":"Step1. First of all, you need to install an APP Android iOS Step2. Connect the board to a 5V power, such as USB port of your PC. Step3. There're 2 buttons on the board, one for ON and the other for OFF, try click on them to control the relay Step4. Open then APP and will find an ON and OFF button on the bottom. Click on them to make a voice to control the relay. Tip If nothing happen, try to increase/lower the volume of your phone. Step5. If you want to change a voice to control, long press ON of OFF button untill the led blink, then release the button, and make a sound via your phone. The LED will stop blink if successed.","title":"Getting Started"},{"location":"1040003/#500-sound-commands","text":"We provides more that 500 sound commands , those are .wav files. If you don't want an app, you can just play those sound with a music player You can add those sounds to your own app to control the relay","title":"500+ sound commands"},{"location":"1040003/#refference","text":"Heelight Core","title":"Refference"},{"location":"1040004/","text":"A badge with interactive lightning and music Introduction For KeyBoard, we just want to make PCB a fine look and more interesting. It is an interactive badge with touching, lightning, and melody. You can wear it on your neck or fix it to your bag. Press the lightning icon to switch between two modes. One is a mini piano while another is circular melody and chasing light. Enjoy a wonderful night at music live with KeyBoard! Part List KeyBoard \u00d7 1 Coin battery \u00d7 1 Brooch \u00d7 1 Neck sling \u00d7 1 Micro-USB cable \u00d7 1 Specification Microcontroller: ATMega328P Operating Voltage: 3.3V Flash Memory: 32KB of which 0.5KB used by bootloader SRAM: 2KB EEPROM: 1KB Clock Speed: 16MHz Working Current: 30mA (when buzzer on) Static Current: 8mA (when buzzer and led off) Sleep Current: 1mA Charge Time: 30 min Standby Time: 8 hours Keys: 10 LEDs: 8 Getting Started Insert the coin battery Turn the switch on Press the keys of keyboard Press the lightning key to switch the mode Fix the neck sling to wear it on your neck Fix the brooch to pin it to your bag Plug the micro-USB cable to recharge If you want to program the board, please download our Arduino library , and please note the the board was in Arduino Leonardo bootloader. Please contact if you need more help. Resources Schematics in Eagle File Arduino Library at Github","title":"Keyboard"},{"location":"1040004/#introduction","text":"For KeyBoard, we just want to make PCB a fine look and more interesting. It is an interactive badge with touching, lightning, and melody. You can wear it on your neck or fix it to your bag. Press the lightning icon to switch between two modes. One is a mini piano while another is circular melody and chasing light. Enjoy a wonderful night at music live with KeyBoard!","title":"Introduction"},{"location":"1040004/#part-list","text":"KeyBoard \u00d7 1 Coin battery \u00d7 1 Brooch \u00d7 1 Neck sling \u00d7 1 Micro-USB cable \u00d7 1","title":"Part List"},{"location":"1040004/#specification","text":"Microcontroller: ATMega328P Operating Voltage: 3.3V Flash Memory: 32KB of which 0.5KB used by bootloader SRAM: 2KB EEPROM: 1KB Clock Speed: 16MHz Working Current: 30mA (when buzzer on) Static Current: 8mA (when buzzer and led off) Sleep Current: 1mA Charge Time: 30 min Standby Time: 8 hours Keys: 10 LEDs: 8","title":"Specification"},{"location":"1040004/#getting-started","text":"Insert the coin battery Turn the switch on Press the keys of keyboard Press the lightning key to switch the mode Fix the neck sling to wear it on your neck Fix the brooch to pin it to your bag Plug the micro-USB cable to recharge If you want to program the board, please download our Arduino library , and please note the the board was in Arduino Leonardo bootloader. Please contact if you need more help.","title":"Getting Started"},{"location":"1040004/#resources","text":"Schematics in Eagle File Arduino Library at Github","title":"Resources"},{"location":"cards-system-summary/","text":"Introduction 'Longan Cards' is a unique open source development platform developed by Longan Labs. As a plug and play development platform, Longan cards allow you to quicky build wide array of prototypes and applications in no time. A full set of Arduino libraries and plenty of example codes are available to play with Longan cards platform. NOTE: Most of the Longan cards are based on the I2C communication protocol. Longan cards fall into following categories: Sensor Actuator Controller Display Communication Support You can use Longan Cards with following Longan boards. Game board Extension board Car board Sensor board Pi Hap All cards that support I2C communication protocol comes with a unique factory default I2C address can be found on the back of the card. Cards and Boards Following table presents the type, I2C address, and communication protocol of each Longan card. SKU Name Type I2C address Coomunication Protocol 1011001 Temperature Card Sensor 0x01 I2C 1011002 Sound Sensor Card Sensor 0x02 ADC 1011003 PIR Sensor Card Sensor 0x03 I/O 1011004 Gesture Sensor Card Sensor 0x04 I2C 1011007 Rotary Angle Card Sensor 0x07 ADC 1011008 BME280 Card Sensor 0x08 I2C 1011010 Light Sensor Card Sensor 0x0A ADC 1011012 RTC Card Sensor 0x0C I2C 1011021 9-Dof Sensor Card Sensor 0x15 I2C 1011027 Button Input Card Sensor 0x1B I/O 1011028 VOC eCO2 Gas Sensor Sensor 0x1C I2C 1011029 IR Recever Card Sensor 0x1D \u5176\u4ed6\u534f\u8bae (Other) 1011032 Line Finder Card Sensor 0x1E \u5176\u4ed6\u534f\u8bae (Other) 1012001 Relay Card Actuator 0x41 I/O 1012002 Buzzer Card Actuator 0x42 I/O 1012003 Motor Driver Card Actuator 0x43 I/O 1013001 Carduino 328 Controller - 1013007 Carduino 32U4 Controller - 1014001 OLED Card Display - SPI 1015003 IR Emitter Card Communication 0x44 \u5176\u4ed6\u534f\u8bae (Other) 1016006 Programmer Card Support - 1016007 AAA Battery Card Support - 1017002 Extension Board Board - 1017006 PI Hap for Longan Card Board - 1017007 Sensor Display Board - 1017008 Game Board - 1017009 Car Board Board - Pins The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the temperature card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the temperature card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. The gold fingers of each Longan card exposes all or subset of pins shown in the following figure. GPIO Pins This is the general purpose I/O pin set for the Carduino. GPIO consists of digital, analog, I2C, SPI, and UART pins. Most pins can do PWM output. Also, all pins can be used as interrupt pins. Digital (Front: pin #9, #11, #21 / Back: pin #10, #12, #22) Analog (Front: pin #13, #19 / Back: pin #14, #20) NOTE: Motor driver card uses analog pins to drive two motors. I2C Pins Following pins can be used for I2C communication. SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL: Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24) Power Pins Following pins connect with the common power bus of the board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28) Hardware SPI Pins These are the hardware SPI pins that can be used to communicate with high speed. SCK \u2013 Serial Clock (Front: pin #17) MISO - Master In Slave Out, takes data from the Carduino to the SPI device (Front: pin #15) MOSI \u2013 Master Out Slave In, takes data to the Carduino from the SPI device (Back: pin #16) Hardware UART / Serial Pins These pins can be used to connect devices support with UART using two wires. TX \u2013 Transmits data, connects with Carduino RX (Back: pin #22) RX \u2013 Receives data, connects with Carduino TX (Front: pin #21) NOTE: The pin functions of Carduino is exactly same with the pin functions of Arduino Leonardo. How to Use A card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board Pi Hap When you plugging, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board. I2C in Depth Some of the Longan cards (all sensor, actuator, and communication cards) use I2C interface to communicate with the Carduino. They use I2C for read/write data and share the same I2C register. This allows you to use a single code to read data from all the sensor cards. Following table presents the typical I2C register map of a Longan card. Address Name Type Reset Value Lenght (Byte) Description 0x01 DEVID R \\ 1 Device ID 0x02 SENSOR_CNT R \\ 1 Number of sensors on the card 0x03 SEN_NAME_LENGTH R \\ 1 Length of the name 0x04 ADDR R/W \\ 1 Device I2C address 0x10 NAME R \\ MAX 20 Device name 0x11 SKU R \\ 4 Device SKU 0x12 VERSION R \\ 4 Version 0x30 VALUE_0 R \\ 6 Sensor 0 ... 0X35 VALUE_5 R \\ 4 Sensor 5 ... Register Definitions Register 0x01 \u2013 DEVID (Read Only) Card ID. Return: 1 byte Register 0x02 - SENSOR_CNT (Read Only) Number of sensors on the board. As an example, the BME280 card has 4 sensors: temperature, humidity, pressure and altitude. Therefore the SENSOR_CNT value for BME280 card is 4. Return: 1 byte Register 0x03 - SEN_NAME_LEN\uff08Read Only) Length of the card name. Return: 1 byte Register 0x04 \u2013 ADDR (Read/Write) I2C Address of the card. Return: 1 byte Write: 1 byte Register 0x10 \u2013 NAME (Read Only) Name of the card as a string, max 20 bytes. Return 1~20 byte(s) Register 0x11 \u2013 SKU (Read Only) SKU of the card Return: 4 bytes Register 0x12 \u2013 VERSION (Read Only) Version Return: 4 bytes Register 0x30-0x3F: VALUE_n Sensor value Return: 6 bytes, define as below: 1 2 3 4 5 6 DTA_TYPE VAL0 VAL1 VAL2 VAL3 UNIT DTA_TYPE: Float: TYPE_FLOAT Int: DTA_TYPE_INT","title":"Cards System Summary"},{"location":"cards-system-summary/#introduction","text":"'Longan Cards' is a unique open source development platform developed by Longan Labs. As a plug and play development platform, Longan cards allow you to quicky build wide array of prototypes and applications in no time. A full set of Arduino libraries and plenty of example codes are available to play with Longan cards platform. NOTE: Most of the Longan cards are based on the I2C communication protocol. Longan cards fall into following categories: Sensor Actuator Controller Display Communication Support You can use Longan Cards with following Longan boards. Game board Extension board Car board Sensor board Pi Hap All cards that support I2C communication protocol comes with a unique factory default I2C address can be found on the back of the card.","title":"Introduction"},{"location":"cards-system-summary/#cards-and-boards","text":"Following table presents the type, I2C address, and communication protocol of each Longan card. SKU Name Type I2C address Coomunication Protocol 1011001 Temperature Card Sensor 0x01 I2C 1011002 Sound Sensor Card Sensor 0x02 ADC 1011003 PIR Sensor Card Sensor 0x03 I/O 1011004 Gesture Sensor Card Sensor 0x04 I2C 1011007 Rotary Angle Card Sensor 0x07 ADC 1011008 BME280 Card Sensor 0x08 I2C 1011010 Light Sensor Card Sensor 0x0A ADC 1011012 RTC Card Sensor 0x0C I2C 1011021 9-Dof Sensor Card Sensor 0x15 I2C 1011027 Button Input Card Sensor 0x1B I/O 1011028 VOC eCO2 Gas Sensor Sensor 0x1C I2C 1011029 IR Recever Card Sensor 0x1D \u5176\u4ed6\u534f\u8bae (Other) 1011032 Line Finder Card Sensor 0x1E \u5176\u4ed6\u534f\u8bae (Other) 1012001 Relay Card Actuator 0x41 I/O 1012002 Buzzer Card Actuator 0x42 I/O 1012003 Motor Driver Card Actuator 0x43 I/O 1013001 Carduino 328 Controller - 1013007 Carduino 32U4 Controller - 1014001 OLED Card Display - SPI 1015003 IR Emitter Card Communication 0x44 \u5176\u4ed6\u534f\u8bae (Other) 1016006 Programmer Card Support - 1016007 AAA Battery Card Support - 1017002 Extension Board Board - 1017006 PI Hap for Longan Card Board - 1017007 Sensor Display Board - 1017008 Game Board - 1017009 Car Board Board -","title":"Cards and Boards"},{"location":"cards-system-summary/#pins","text":"The edge connector (gold fingers) has total of 30 contacts (each side has 15 contacts). On the front side of the temperature card, a white arrow is printed near the edge connector indicates the pin #1. You can find some pin numbers printed on the edge connector itself (1, 15, and 29). You can count the pin numbers starting with 1 and count by twos from right to left would be 1, 3, 7, 9, 11, 15, 17, 19, 21, 23, 27, and 29. Notice that all the counts are odd numbers. On the back side of the temperature card, you also can find some pin numbers printed on the edge connector itself (2, 16, and 30). You can count the pin numbers starting with 2 and count by twos from left to right would be 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28 and 30. Notice that all the counts are even numbers. The gold fingers of each Longan card exposes all or subset of pins shown in the following figure.","title":"Pins"},{"location":"cards-system-summary/#gpio-pins","text":"This is the general purpose I/O pin set for the Carduino. GPIO consists of digital, analog, I2C, SPI, and UART pins. Most pins can do PWM output. Also, all pins can be used as interrupt pins. Digital (Front: pin #9, #11, #21 / Back: pin #10, #12, #22) Analog (Front: pin #13, #19 / Back: pin #14, #20) NOTE: Motor driver card uses analog pins to drive two motors.","title":"GPIO Pins"},{"location":"cards-system-summary/#i2c-pins","text":"Following pins can be used for I2C communication. SDA: Digital I/O, I2C bus serial bidirectional data line (Front: pin #5, #25 / Back: pin #6, #26) SCL: Digital Input, I2C bus serial clock input (Front: pin #7, #23 / Back: pin #8, #24)","title":"I2C Pins"},{"location":"cards-system-summary/#power-pins","text":"Following pins connect with the common power bus of the board. VCC: Power supply (Front: pin #1, #29 / Back: pin #2, #30) GND: To be connected to the system ground (Front: pin #3, #27 / Back: pin #4, #28)","title":"Power Pins"},{"location":"cards-system-summary/#hardware-spi-pins","text":"These are the hardware SPI pins that can be used to communicate with high speed. SCK \u2013 Serial Clock (Front: pin #17) MISO - Master In Slave Out, takes data from the Carduino to the SPI device (Front: pin #15) MOSI \u2013 Master Out Slave In, takes data to the Carduino from the SPI device (Back: pin #16)","title":"Hardware SPI Pins"},{"location":"cards-system-summary/#hardware-uart-serial-pins","text":"These pins can be used to connect devices support with UART using two wires. TX \u2013 Transmits data, connects with Carduino RX (Back: pin #22) RX \u2013 Receives data, connects with Carduino TX (Front: pin #21) NOTE: The pin functions of Carduino is exactly same with the pin functions of Arduino Leonardo.","title":"Hardware UART / Serial Pins"},{"location":"cards-system-summary/#how-to-use","text":"A card can be plugged into an edge connector slot of one of the following Longan boards. Game board Car board Sensor board Extension board Pi Hap When you plugging, the white arrow head printed on the card should be pointing toward the white arrow head printed near the edge connector slot of the board. Once plugged, it can communicate with the Carduino through the I2C bus line of the board. It will also connect to the common power bus of the board.","title":"How to Use"},{"location":"cards-system-summary/#i2c-in-depth","text":"Some of the Longan cards (all sensor, actuator, and communication cards) use I2C interface to communicate with the Carduino. They use I2C for read/write data and share the same I2C register. This allows you to use a single code to read data from all the sensor cards. Following table presents the typical I2C register map of a Longan card. Address Name Type Reset Value Lenght (Byte) Description 0x01 DEVID R \\ 1 Device ID 0x02 SENSOR_CNT R \\ 1 Number of sensors on the card 0x03 SEN_NAME_LENGTH R \\ 1 Length of the name 0x04 ADDR R/W \\ 1 Device I2C address 0x10 NAME R \\ MAX 20 Device name 0x11 SKU R \\ 4 Device SKU 0x12 VERSION R \\ 4 Version 0x30 VALUE_0 R \\ 6 Sensor 0 ... 0X35 VALUE_5 R \\ 4 Sensor 5 ...","title":"I2C in Depth"},{"location":"cards-system-summary/#register-definitions","text":"Register 0x01 \u2013 DEVID (Read Only) Card ID. Return: 1 byte Register 0x02 - SENSOR_CNT (Read Only) Number of sensors on the board. As an example, the BME280 card has 4 sensors: temperature, humidity, pressure and altitude. Therefore the SENSOR_CNT value for BME280 card is 4. Return: 1 byte Register 0x03 - SEN_NAME_LEN\uff08Read Only) Length of the card name. Return: 1 byte Register 0x04 \u2013 ADDR (Read/Write) I2C Address of the card. Return: 1 byte Write: 1 byte Register 0x10 \u2013 NAME (Read Only) Name of the card as a string, max 20 bytes. Return 1~20 byte(s) Register 0x11 \u2013 SKU (Read Only) SKU of the card Return: 4 bytes Register 0x12 \u2013 VERSION (Read Only) Version Return: 4 bytes Register 0x30-0x3F: VALUE_n Sensor value Return: 6 bytes, define as below: 1 2 3 4 5 6 DTA_TYPE VAL0 VAL1 VAL2 VAL3 UNIT DTA_TYPE: Float: TYPE_FLOAT Int: DTA_TYPE_INT","title":"Register Definitions"},{"location":"contributing/","text":"Contributing Interested in contributing to the Material theme? Want to report a bug? Before you do, please read the following guidelines. Submission context Got a question or problem? For quick questions there's no need to open an issue as you can reach us on gitter.im . Found a bug? If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. However, before doing so, please read the submission guidelines . Missing a feature? You can request a new feature by submitting an issue to our GitHub Repository. If you would like to implement a new feature, please submit an issue with a proposal for your work first, to be sure that it is of use for everyone, as the Material theme is highly opinionated. Please consider what kind of change it is: For a major feature , first open an issue and outline your proposal so that it can be discussed. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project. Small features and bugs can be crafted and directly submitted as a Pull Request. However, there is no guarantee that your feature will make it into the master, as it's always a matter of opinion whether if benefits the overall functionality of the theme. Submission guidelines Submitting an issue Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available. We want to fix all the issues as soon as possible, but before fixing a bug we need to reproduce and confirm it. In order to reproduce bugs we will systematically ask you to provide a minimal reproduction scenario using the custom issue template. Please stick to the issue template. Unfortunately we are not able to investigate / fix bugs without a minimal reproduction scenario, so if we don't hear back from you we may close the issue. Submitting a Pull Request (PR) Search GitHub for an open or closed PR that relates to your submission. You don't want to duplicate effort. If you do not find a related issue or PR, go ahead. Development : Fork the project, set up the development environment , make your changes in a separate git branch and add descriptive messages to your commits. Build : Before submitting a pull requests, build the theme. This is a mandatory requirement for your PR to get accepted, as the theme should at all times be installable through GitHub. Pull Request : After building the theme, commit the compiled output, push your branch to GitHub and send a PR to mkdocs-material:master . If we suggest changes, make the required updates, rebase your branch and push the changes to your GitHub repository, which will automatically update your PR. After your PR is merged, you can safely delete your branch and pull the changes from the main (upstream) repository.","title":"Contributing"},{"location":"contributing/#contributing","text":"Interested in contributing to the Material theme? Want to report a bug? Before you do, please read the following guidelines.","title":"Contributing"},{"location":"contributing/#submission-context","text":"","title":"Submission context"},{"location":"contributing/#got-a-question-or-problem","text":"For quick questions there's no need to open an issue as you can reach us on gitter.im .","title":"Got a question or problem?"},{"location":"contributing/#found-a-bug","text":"If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository. Even better, you can submit a Pull Request with a fix. However, before doing so, please read the submission guidelines .","title":"Found a bug?"},{"location":"contributing/#missing-a-feature","text":"You can request a new feature by submitting an issue to our GitHub Repository. If you would like to implement a new feature, please submit an issue with a proposal for your work first, to be sure that it is of use for everyone, as the Material theme is highly opinionated. Please consider what kind of change it is: For a major feature , first open an issue and outline your proposal so that it can be discussed. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project. Small features and bugs can be crafted and directly submitted as a Pull Request. However, there is no guarantee that your feature will make it into the master, as it's always a matter of opinion whether if benefits the overall functionality of the theme.","title":"Missing a feature?"},{"location":"contributing/#submission-guidelines","text":"","title":"Submission guidelines"},{"location":"contributing/#submitting-an-issue","text":"Before you submit an issue, please search the issue tracker, maybe an issue for your problem already exists and the discussion might inform you of workarounds readily available. We want to fix all the issues as soon as possible, but before fixing a bug we need to reproduce and confirm it. In order to reproduce bugs we will systematically ask you to provide a minimal reproduction scenario using the custom issue template. Please stick to the issue template. Unfortunately we are not able to investigate / fix bugs without a minimal reproduction scenario, so if we don't hear back from you we may close the issue.","title":"Submitting an issue"},{"location":"contributing/#submitting-a-pull-request-pr","text":"Search GitHub for an open or closed PR that relates to your submission. You don't want to duplicate effort. If you do not find a related issue or PR, go ahead. Development : Fork the project, set up the development environment , make your changes in a separate git branch and add descriptive messages to your commits. Build : Before submitting a pull requests, build the theme. This is a mandatory requirement for your PR to get accepted, as the theme should at all times be installable through GitHub. Pull Request : After building the theme, commit the compiled output, push your branch to GitHub and send a PR to mkdocs-material:master . If we suggest changes, make the required updates, rebase your branch and push the changes to your GitHub repository, which will automatically update your PR. After your PR is merged, you can safely delete your branch and pull the changes from the main (upstream) repository.","title":"Submitting a Pull Request (PR)"},{"location":"customization/","text":"Customization A great starting point Project documentation is as diverse as the projects themselves and the Material theme is a good starting point for making it look great. However, as you write your documentation, you may reach a point where some small adjustments are necessary to preserve the desired style. Adding assets MkDocs provides several ways to interfere with themes. In order to make a few tweaks to an existing theme, you can just add your stylesheets and JavaScript files to the docs directory. Additional stylesheets If you want to tweak some colors or change the spacing of certain elements, you can do this in a separate stylesheet. The easiest way is by creating a new stylesheet file in your docs directory: mkdir docs/stylesheets touch docs/stylesheets/extra.css Then, add the following line to your mkdocs.yml : extra_css : - stylesheets/extra.css Spin up the development server with mkdocs serve and start typing your changes in your additional stylesheet file \u2013 you can see them instantly after saving, as the MkDocs development server implements live reloading. Additional JavaScript The same is true for additional JavaScript. If you want to integrate another syntax highlighter or add some custom logic to your theme, create a new JavaScript file in your docs directory: mkdir docs/javascripts touch docs/javascripts/extra.js Then, add the following line to your mkdocs.yml : extra_javascript : - javascripts/extra.js Further assistance can be found in the MkDocs documentation . Extending the theme If you want to alter the HTML source (e.g. add or remove some part), you can extend the theme. From version 0.16 on MkDocs implements theme extension , an easy way to override parts of a theme without forking and changing the main theme. Setup and theme structure Reference the Material theme as usual in your mkdocs.yml , and create a new folder for overrides, e.g. theme , which you reference using theme_dir : theme : material theme_dir : theme Theme extension prerequisites As the theme_dir variable is used for the theme extension process, the Material theme needs to be installed via pip and referenced with the theme parameter in your mkdocs.yml . The structure in the theme directory must mirror the directory structure of the original theme, as any file in the theme directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the theme directory. The directory layout of the Material theme is as follows: . \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript \u2502 \u2514\u2500 stylesheets/ # Stylesheets \u251c\u2500 partials/ \u2502 \u251c\u2500 disqus.html # Disqus integration \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Localized labels \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 search.html # Search box \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 toc-item.html # Table of contents item \u2502 \u2514\u2500 toc.html # Table of contents \u251c\u2500 404 .html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page Overriding partials In order to override the footer, we can replace the footer.html partial with our own partial. To do this, create the file partials/footer.html in the theme directory. MkDocs will now use the new partial when rendering the theme. This can be done with any file. Overriding template blocks Besides overriding partials, one can also override so called template blocks, which are defined inside the Material theme and wrap specific features. To override a template block, create a main.html inside the theme directory and define the block, e.g.: {% extends base.html %} {% block htmltitle %} title Lorem ipsum dolor sit amet /title {% endblock %} The Material theme provides the following template blocks: Block name Wrapped contents analytics Wraps the Google Analytics integration content Wraps the main content disqus Wraps the disqus integration extrahead Empty block to define additional meta tags fonts Wraps the webfont definitions footer Wraps the footer with navigation and copyright header Wraps the fixed header bar htmltitle Wraps the title tag libs Wraps the JavaScript libraries, e.g. Modernizr repo Wraps the repository link in the header bar scripts Wraps the JavaScript application logic source Wraps the linked source files search_box Wraps the search form in the header bar site_meta Wraps the meta tags in the document head site_name Wraps the site name in the header bar site_nav Wraps the site navigation and table of contents social Wraps the social links in the footer styles Wraps the stylesheets (also extra sources) For more on this topic refer to the MkDocs documentation Theme development The Material theme is built on modern technologies like ES6, Webpack , Babel and SASS . If you want to make more fundamental changes, it may be necessary to make the adjustments directly in the source of the Material theme and recompile it. This is fairly easy. Environment setup In order to start development on the Material theme, a Node.js version of at least 5 is required, as well as the package manager yarn which is a better version of npm . First, clone the repository: git clone https://github.com/squidfunk/mkdocs-material Next, all dependencies need to be installed, which is done with: cd mkdocs-material pip install -r requirements.txt yarn install Development mode The Material theme uses a sophisticated asset pipeline using Gulp and Webpack which can be started with the following command: yarn start This will also start the MkDocs development server which will monitor changes on assets, templates and documentation. Point your browser to localhost:8000 and you should see this documentation in front of you. For example, changing the color palette is as simple as changing the $md-color-primary and $md-color-accent variables in src/assets/stylesheets/_config.scss : $ md-color-primary : $ clr-red-400 ; $ md-color-accent : $ clr-teal-a700 ; Automatically generated files Never make any changes in the material directory, as the contents of this directory are automatically generated from the src directory and will be overriden when the theme is built. Build process When you've finished making your changes, you can build the theme by invoking: yarn run build This triggers the production-level compilation and minification of all stylesheets and JavaScript sources. When the command exits, the final theme is located in the material directory. Add the theme_dir variable pointing to the aforementioned directory in your original mkdocs.yml . Now you can run mkdocs build and you should see your documentation with your changes to the original Material theme.","title":"Customization"},{"location":"customization/#customization","text":"","title":"Customization"},{"location":"customization/#a-great-starting-point","text":"Project documentation is as diverse as the projects themselves and the Material theme is a good starting point for making it look great. However, as you write your documentation, you may reach a point where some small adjustments are necessary to preserve the desired style.","title":"A great starting point"},{"location":"customization/#adding-assets","text":"MkDocs provides several ways to interfere with themes. In order to make a few tweaks to an existing theme, you can just add your stylesheets and JavaScript files to the docs directory.","title":"Adding assets"},{"location":"customization/#additional-stylesheets","text":"If you want to tweak some colors or change the spacing of certain elements, you can do this in a separate stylesheet. The easiest way is by creating a new stylesheet file in your docs directory: mkdir docs/stylesheets touch docs/stylesheets/extra.css Then, add the following line to your mkdocs.yml : extra_css : - stylesheets/extra.css Spin up the development server with mkdocs serve and start typing your changes in your additional stylesheet file \u2013 you can see them instantly after saving, as the MkDocs development server implements live reloading.","title":"Additional stylesheets"},{"location":"customization/#additional-javascript","text":"The same is true for additional JavaScript. If you want to integrate another syntax highlighter or add some custom logic to your theme, create a new JavaScript file in your docs directory: mkdir docs/javascripts touch docs/javascripts/extra.js Then, add the following line to your mkdocs.yml : extra_javascript : - javascripts/extra.js Further assistance can be found in the MkDocs documentation .","title":"Additional JavaScript"},{"location":"customization/#extending-the-theme","text":"If you want to alter the HTML source (e.g. add or remove some part), you can extend the theme. From version 0.16 on MkDocs implements theme extension , an easy way to override parts of a theme without forking and changing the main theme.","title":"Extending the theme"},{"location":"customization/#setup-and-theme-structure","text":"Reference the Material theme as usual in your mkdocs.yml , and create a new folder for overrides, e.g. theme , which you reference using theme_dir : theme : material theme_dir : theme Theme extension prerequisites As the theme_dir variable is used for the theme extension process, the Material theme needs to be installed via pip and referenced with the theme parameter in your mkdocs.yml . The structure in the theme directory must mirror the directory structure of the original theme, as any file in the theme directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the theme directory. The directory layout of the Material theme is as follows: . \u251c\u2500 assets/ \u2502 \u251c\u2500 images/ # Images and icons \u2502 \u251c\u2500 javascripts/ # JavaScript \u2502 \u2514\u2500 stylesheets/ # Stylesheets \u251c\u2500 partials/ \u2502 \u251c\u2500 disqus.html # Disqus integration \u2502 \u251c\u2500 footer.html # Footer bar \u2502 \u251c\u2500 header.html # Header bar \u2502 \u251c\u2500 language.html # Localized labels \u2502 \u251c\u2500 nav-item.html # Main navigation item \u2502 \u251c\u2500 nav.html # Main navigation \u2502 \u251c\u2500 search.html # Search box \u2502 \u251c\u2500 social.html # Social links \u2502 \u251c\u2500 source.html # Repository information \u2502 \u251c\u2500 tabs-item.html # Tabs navigation item \u2502 \u251c\u2500 tabs.html # Tabs navigation \u2502 \u251c\u2500 toc-item.html # Table of contents item \u2502 \u2514\u2500 toc.html # Table of contents \u251c\u2500 404 .html # 404 error page \u251c\u2500 base.html # Base template \u2514\u2500 main.html # Default page","title":"Setup and theme structure"},{"location":"customization/#overriding-partials","text":"In order to override the footer, we can replace the footer.html partial with our own partial. To do this, create the file partials/footer.html in the theme directory. MkDocs will now use the new partial when rendering the theme. This can be done with any file.","title":"Overriding partials"},{"location":"customization/#overriding-template-blocks","text":"Besides overriding partials, one can also override so called template blocks, which are defined inside the Material theme and wrap specific features. To override a template block, create a main.html inside the theme directory and define the block, e.g.: {% extends base.html %} {% block htmltitle %} title Lorem ipsum dolor sit amet /title {% endblock %} The Material theme provides the following template blocks: Block name Wrapped contents analytics Wraps the Google Analytics integration content Wraps the main content disqus Wraps the disqus integration extrahead Empty block to define additional meta tags fonts Wraps the webfont definitions footer Wraps the footer with navigation and copyright header Wraps the fixed header bar htmltitle Wraps the title tag libs Wraps the JavaScript libraries, e.g. Modernizr repo Wraps the repository link in the header bar scripts Wraps the JavaScript application logic source Wraps the linked source files search_box Wraps the search form in the header bar site_meta Wraps the meta tags in the document head site_name Wraps the site name in the header bar site_nav Wraps the site navigation and table of contents social Wraps the social links in the footer styles Wraps the stylesheets (also extra sources) For more on this topic refer to the MkDocs documentation","title":"Overriding template blocks"},{"location":"customization/#theme-development","text":"The Material theme is built on modern technologies like ES6, Webpack , Babel and SASS . If you want to make more fundamental changes, it may be necessary to make the adjustments directly in the source of the Material theme and recompile it. This is fairly easy.","title":"Theme development"},{"location":"customization/#environment-setup","text":"In order to start development on the Material theme, a Node.js version of at least 5 is required, as well as the package manager yarn which is a better version of npm . First, clone the repository: git clone https://github.com/squidfunk/mkdocs-material Next, all dependencies need to be installed, which is done with: cd mkdocs-material pip install -r requirements.txt yarn install","title":"Environment setup"},{"location":"customization/#development-mode","text":"The Material theme uses a sophisticated asset pipeline using Gulp and Webpack which can be started with the following command: yarn start This will also start the MkDocs development server which will monitor changes on assets, templates and documentation. Point your browser to localhost:8000 and you should see this documentation in front of you. For example, changing the color palette is as simple as changing the $md-color-primary and $md-color-accent variables in src/assets/stylesheets/_config.scss : $ md-color-primary : $ clr-red-400 ; $ md-color-accent : $ clr-teal-a700 ; Automatically generated files Never make any changes in the material directory, as the contents of this directory are automatically generated from the src directory and will be overriden when the theme is built.","title":"Development mode"},{"location":"customization/#build-process","text":"When you've finished making your changes, you can build the theme by invoking: yarn run build This triggers the production-level compilation and minification of all stylesheets and JavaScript sources. When the command exits, the final theme is located in the material directory. Add the theme_dir variable pointing to the aforementioned directory in your original mkdocs.yml . Now you can run mkdocs build and you should see your documentation with your changes to the original Material theme.","title":"Build process"},{"location":"getting-started/","text":"Getting started Installation Set up Material using Docker The official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image (23MB compressed). Installing MkDocs Before installing MkDocs , you need to make sure you have Python and pip \u2013 the Python package manager \u2013 up and running. You can verify if you're already good to go with the following commands: python --version # Python 2.7.13 pip --version # pip 9.0.1 Installing and verifying MkDocs is as simple as: pip install mkdocs mkdocs --version # mkdocs, version 0.16.0 MkDocs version requirements Material requires MkDocs = 0.16. Installing Material using pip Material can be installed with pip : pip install mkdocs-material using choco If you're on Windows you can use Chocolatey to install Material : choco install mkdocs-material This will install all required dependencies like Python and MkDocs . cloning from GitHub Material can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github.com/squidfunk/mkdocs-material.git This is especially useful if you want to extend the theme and override some parts of the theme. The theme will reside in the folder mkdocs-material/material . Troubleshooting Installation on macOS When you're running the pre-installed version of Python on macOS, pip tries to install packages in a folder for which your user might not have the adequate permissions. There are two possible solutions for this: Installing in user space (recommended): Provide the --user flag to the install command and pip will install the package in a user-site location. This is the recommended way. Switching to a homebrewed Python : Upgrade your Python installation to a self-contained solution by installing Python with Homebrew. This should eliminate a lot of problems you may be having with pip . Error: unrecognized theme 'material' If you run into this error, the most common reason is that you installed MkDocs through some package manager (e.g. Homebrew or apt-get ) and the Material theme through pip , so both packages end up in different locations. MkDocs only checks it's install location for themes. Usage In order to enable the theme just add one of the following lines to your project's mkdocs.yml . If you installed Material using pip: theme : material If you cloned Material from GitHub: theme_dir : mkdocs-material/material MkDocs includes a development server, so you can review your changes as you go. The development server can be started with the following command: mkdocs serve Now you can point your browser to http://localhost:8000 and the Material theme should be visible. From here on, you can start writing your documentation, or read on and customize the theme through some options. Options The Material theme adds some extra variables for configuration via your project's mkdocs.yml . See the following sections for all available options. Changing the color palette A default is hue is defined for every primary and accent color on Google's Material Design color palette , which makes it very easy to change the overall look of the theme. Just set the primary and accent colors using the following variables: extra : palette : primary : indigo accent : light blue Color names are case-insensitive, but must match the names of the Material Design color palette. Valid values are: red , pink , purple , deep purple , indigo , blue , light blue , cyan , teal , green , light green , lime , yellow , amber , orange , deep orange , brown , grey and blue grey . The last three colors can only be used as a primary color. If the color is set via this configuration, an additional CSS file that defines the color palette is automatically included. If you want to keep things lean, clone the repository and recompile the theme with your custom colors set. See the guide on customization for more information. Primary colors Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) }) Accent colors Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) }) Changing the font family By default the Roboto font family is included with the theme, specifically the regular sans-serif type for text and the monospaced type for code. Both fonts are loaded from Google Fonts and can be changed to other fonts, like for example the Ubuntu font family : extra : font : text : Ubuntu code : Ubuntu Mono The text font will be loaded in weights 400 and 700 , the monospaced font in regular weight. If you want to load fonts from other destinations or don't want to use the Google Fonts loading magic, just set font to false : extra : font : false Adding a source repository To include a link to the repository of your project within your documentation, set the following variables via your project's mkdocs.yml : repo_name : my-github-handle/my-project repo_url : https://github.com/my-github-handle/my-project The name of the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Furthermore, if repo_url points to a GitHub, BitBucket or GitLab repository, the respective service logo will be shown next to the name of the repository. Additionally, for GitHub, the number of stars and forks is shown. Why is there an edit button at the top of every article? If the repo_url is set to a GitHub or BitBucket repository, and the repo_name is set to GitHub or BitBucket (implied by default), an edit button will appear at the top of every article. This is the automatic behavior that MkDocs implements. See the MkDocs documentation on more guidance regarding the edit_uri attribute, which defines whether the edit button is shown or not. Adding a favicon A favicon can be added by setting the site_favicon variable to an .ico or image file: site_favicon : images/favicon.ico Adding a logo Your logo should have rectangular shape with a minimum resolution of 128x128, leave some room towards the edges and be composed of high contrast areas on a transparent ground, as it will be placed on the colored header bar and drawer. Simply create the folder docs/images , add your logo and embed it with: extra : logo : images/logo.svg Adding social links Social accounts can be linked in the footer of the documentation using the automatically included FontAwesome webfont. The type must denote the name of the social service, e.g. github , twitter or linkedin and the link must contain the URL you want to link to: extra : social : - type : github link : https://github.com/squidfunk - type : twitter link : https://twitter.com/squidfunk - type : linkedin link : https://de.linkedin.com/in/martin-donath-20a95039 The links are generated in order and the type of the links must match the name of the FontAwesome glyph. The fa is automatically added, so github will result in fa fa-github . Google Analytics integration MkDocs makes it easy to integrate site tracking with Google Analytics. Besides basic tracking, clicks on all outgoing links can be tracked as well as how site search is used. Tracking can be activated in your project's mkdocs.yml : google_analytics : - UA-XXXXXXXX-X - auto Disqus integation Material for MkDocs is integrated with Disqus , so if you want to add a comments section to your documentation set the shortname of your Disqus project in your mkdocs.yml : extra : disqus : your-disqus-shortname A new entry at the bottom of the table of contents is generated that is linking to the comments section. The necessary JavaScript is automatically included. Requirements site_url value must be set in mkdocs.yml for the Discus integration to load properly. Localization Translations Material for MkDocs supports internationalization (i18n). In order to translate the labels (e.g. Previous and Next in the footer), you can override the file partials/language.html and provide your own translations inside the macro t : {% macro t ( key ) %}{{ { language : en , edit.link.title : Edit this page , footer.previous : Previous , footer.next : Next , meta.comments : Comments , meta.source : Source , search.languages : , search.placeholder : Search , search.result.placeholder : Type to start searching , search.result.none : No matching documents , search.result.one : 1 matching document , search.result.other : # matching documents , source.link.title : Go to repository , toc.title : Table of contents }[ key ] }}{% endmacro %} Just copy the file from the original theme and make your adjustments. See the section on overriding partials and the general guide on theme extension in the customization guide. Furthermore, see the example configuration for a head start. Site search Site search is implemented using lunr.js , which includes stemmers for the English language by default, while stemmers for other languages are included with lunr-languages , both of which are integrated with this theme. Support for other languages and even multilingual search can be activated by setting the key search.languages to a comma-separated list of supported 2-letter language codes, e.g.: {% macro t ( key ) %}{{ { ... search.languages : en, de, ru , ... }[ key ] }}{% endmacro %} This will automatically load the stemmers for the specified languages and set them up with site search, nothing else to be done. At the time of writing, the following languages are supported: English en , French fr , Spanish es , Italian it , Japanese jp , Dutch du , Danish da , Portguese pt , Finnish fi , Romanian ro , Hungarian hu , Russian ru , Norwegian no , Swedish sv and Turkish tr . Only specify the languages you really need Be aware that including suppport for other languages increases the general JavaScript payload by around 20kb (without gzip) and by another 15-30kb per language. Tabs From version 1.1.0 on, Material supports another layer on top of the main navigation for larger screens in the form of tabs. This is especially useful for larger documentation projects with only few top-level sections. Tabs can be enabled by setting the respective feature flag to true: extra : feature : tabs : true More advanced customization If you want to change the general appearance of the Material theme, see this article for more information on advanced customization. Extensions MkDocs supports several Markdown extensions . The following extensions are not enabled by default (see the link for which are enabled by default) but highly recommended, so they should be switched on at all times: markdown_extensions : - admonition - codehilite(guess_lang=false) - toc(permalink=true) For more information, see the following list of extensions supported by the Material theme including more information regarding installation and usage: Admonition Codehilite Footnotes Metadata Permalinks PyMdown Extensions Full example Below is a full example configuration for a mkdocs.yml : # Project information site_name : My Project site_description : A short description of my project site_author : John Doe site_url : https://john-doe.github.io/my-project # Repository repo_name : my-github-handle/my-project repo_url : https://github.com/john-doe/my-project # Copyright copyright : Copyright copy; 2016 - 2017 John Doe # Documentation and theme theme : material # Options extra : logo : images/logo.svg palette : primary : indigo accent : indigo font : text : Roboto code : Roboto Mono social : - type : github link : https://github.com/john-doe - type : twitter link : https://twitter.com/john-doe - type : linkedin link : https://de.linkedin.com/in/john-doe # Google Analytics google_analytics : - UA-XXXXXXXX-X - auto # Extensions markdown_extensions : - admonition - codehilite(guess_lang=false) - toc(permalink=true)","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#installation","text":"Set up Material using Docker The official Docker image for Material comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI, packaged in a very small image (23MB compressed).","title":"Installation"},{"location":"getting-started/#installing-mkdocs","text":"Before installing MkDocs , you need to make sure you have Python and pip \u2013 the Python package manager \u2013 up and running. You can verify if you're already good to go with the following commands: python --version # Python 2.7.13 pip --version # pip 9.0.1 Installing and verifying MkDocs is as simple as: pip install mkdocs mkdocs --version # mkdocs, version 0.16.0 MkDocs version requirements Material requires MkDocs = 0.16.","title":"Installing MkDocs"},{"location":"getting-started/#installing-material","text":"","title":"Installing Material"},{"location":"getting-started/#using-pip","text":"Material can be installed with pip : pip install mkdocs-material","title":"using pip"},{"location":"getting-started/#using-choco","text":"If you're on Windows you can use Chocolatey to install Material : choco install mkdocs-material This will install all required dependencies like Python and MkDocs .","title":"using choco"},{"location":"getting-started/#cloning-from-github","text":"Material can also be used without a system-wide installation by cloning the repository into a subfolder of your project's root directory: git clone https://github.com/squidfunk/mkdocs-material.git This is especially useful if you want to extend the theme and override some parts of the theme. The theme will reside in the folder mkdocs-material/material .","title":"cloning from GitHub"},{"location":"getting-started/#troubleshooting","text":"Installation on macOS When you're running the pre-installed version of Python on macOS, pip tries to install packages in a folder for which your user might not have the adequate permissions. There are two possible solutions for this: Installing in user space (recommended): Provide the --user flag to the install command and pip will install the package in a user-site location. This is the recommended way. Switching to a homebrewed Python : Upgrade your Python installation to a self-contained solution by installing Python with Homebrew. This should eliminate a lot of problems you may be having with pip . Error: unrecognized theme 'material' If you run into this error, the most common reason is that you installed MkDocs through some package manager (e.g. Homebrew or apt-get ) and the Material theme through pip , so both packages end up in different locations. MkDocs only checks it's install location for themes.","title":"Troubleshooting"},{"location":"getting-started/#usage","text":"In order to enable the theme just add one of the following lines to your project's mkdocs.yml . If you installed Material using pip: theme : material If you cloned Material from GitHub: theme_dir : mkdocs-material/material MkDocs includes a development server, so you can review your changes as you go. The development server can be started with the following command: mkdocs serve Now you can point your browser to http://localhost:8000 and the Material theme should be visible. From here on, you can start writing your documentation, or read on and customize the theme through some options.","title":"Usage"},{"location":"getting-started/#options","text":"The Material theme adds some extra variables for configuration via your project's mkdocs.yml . See the following sections for all available options.","title":"Options"},{"location":"getting-started/#changing-the-color-palette","text":"A default is hue is defined for every primary and accent color on Google's Material Design color palette , which makes it very easy to change the overall look of the theme. Just set the primary and accent colors using the following variables: extra : palette : primary : indigo accent : light blue Color names are case-insensitive, but must match the names of the Material Design color palette. Valid values are: red , pink , purple , deep purple , indigo , blue , light blue , cyan , teal , green , light green , lime , yellow , amber , orange , deep orange , brown , grey and blue grey . The last three colors can only be used as a primary color. If the color is set via this configuration, an additional CSS file that defines the color palette is automatically included. If you want to keep things lean, clone the repository and recompile the theme with your custom colors set. See the guide on customization for more information.","title":"Changing the color palette"},{"location":"getting-started/#primary-colors","text":"Click on a tile to change the primary color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; }) })","title":"Primary colors"},{"location":"getting-started/#accent-colors","text":"Click on a tile to change the accent color of the theme: Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; }) })","title":"Accent colors"},{"location":"getting-started/#changing-the-font-family","text":"By default the Roboto font family is included with the theme, specifically the regular sans-serif type for text and the monospaced type for code. Both fonts are loaded from Google Fonts and can be changed to other fonts, like for example the Ubuntu font family : extra : font : text : Ubuntu code : Ubuntu Mono The text font will be loaded in weights 400 and 700 , the monospaced font in regular weight. If you want to load fonts from other destinations or don't want to use the Google Fonts loading magic, just set font to false : extra : font : false","title":"Changing the font family"},{"location":"getting-started/#adding-a-source-repository","text":"To include a link to the repository of your project within your documentation, set the following variables via your project's mkdocs.yml : repo_name : my-github-handle/my-project repo_url : https://github.com/my-github-handle/my-project The name of the repository will be rendered next to the search bar on big screens and as part of the main navigation drawer on smaller screen sizes. Furthermore, if repo_url points to a GitHub, BitBucket or GitLab repository, the respective service logo will be shown next to the name of the repository. Additionally, for GitHub, the number of stars and forks is shown. Why is there an edit button at the top of every article? If the repo_url is set to a GitHub or BitBucket repository, and the repo_name is set to GitHub or BitBucket (implied by default), an edit button will appear at the top of every article. This is the automatic behavior that MkDocs implements. See the MkDocs documentation on more guidance regarding the edit_uri attribute, which defines whether the edit button is shown or not.","title":"Adding a source repository"},{"location":"getting-started/#adding-a-favicon","text":"A favicon can be added by setting the site_favicon variable to an .ico or image file: site_favicon : images/favicon.ico","title":"Adding a favicon"},{"location":"getting-started/#adding-a-logo","text":"Your logo should have rectangular shape with a minimum resolution of 128x128, leave some room towards the edges and be composed of high contrast areas on a transparent ground, as it will be placed on the colored header bar and drawer. Simply create the folder docs/images , add your logo and embed it with: extra : logo : images/logo.svg","title":"Adding a logo"},{"location":"getting-started/#adding-social-links","text":"Social accounts can be linked in the footer of the documentation using the automatically included FontAwesome webfont. The type must denote the name of the social service, e.g. github , twitter or linkedin and the link must contain the URL you want to link to: extra : social : - type : github link : https://github.com/squidfunk - type : twitter link : https://twitter.com/squidfunk - type : linkedin link : https://de.linkedin.com/in/martin-donath-20a95039 The links are generated in order and the type of the links must match the name of the FontAwesome glyph. The fa is automatically added, so github will result in fa fa-github .","title":"Adding social links"},{"location":"getting-started/#google-analytics-integration","text":"MkDocs makes it easy to integrate site tracking with Google Analytics. Besides basic tracking, clicks on all outgoing links can be tracked as well as how site search is used. Tracking can be activated in your project's mkdocs.yml : google_analytics : - UA-XXXXXXXX-X - auto","title":"Google Analytics integration"},{"location":"getting-started/#disqus-integation","text":"Material for MkDocs is integrated with Disqus , so if you want to add a comments section to your documentation set the shortname of your Disqus project in your mkdocs.yml : extra : disqus : your-disqus-shortname A new entry at the bottom of the table of contents is generated that is linking to the comments section. The necessary JavaScript is automatically included. Requirements site_url value must be set in mkdocs.yml for the Discus integration to load properly.","title":"Disqus integation"},{"location":"getting-started/#localization","text":"","title":"Localization"},{"location":"getting-started/#translations","text":"Material for MkDocs supports internationalization (i18n). In order to translate the labels (e.g. Previous and Next in the footer), you can override the file partials/language.html and provide your own translations inside the macro t : {% macro t ( key ) %}{{ { language : en , edit.link.title : Edit this page , footer.previous : Previous , footer.next : Next , meta.comments : Comments , meta.source : Source , search.languages : , search.placeholder : Search , search.result.placeholder : Type to start searching , search.result.none : No matching documents , search.result.one : 1 matching document , search.result.other : # matching documents , source.link.title : Go to repository , toc.title : Table of contents }[ key ] }}{% endmacro %} Just copy the file from the original theme and make your adjustments. See the section on overriding partials and the general guide on theme extension in the customization guide. Furthermore, see the example configuration for a head start.","title":"Translations"},{"location":"getting-started/#site-search","text":"Site search is implemented using lunr.js , which includes stemmers for the English language by default, while stemmers for other languages are included with lunr-languages , both of which are integrated with this theme. Support for other languages and even multilingual search can be activated by setting the key search.languages to a comma-separated list of supported 2-letter language codes, e.g.: {% macro t ( key ) %}{{ { ... search.languages : en, de, ru , ... }[ key ] }}{% endmacro %} This will automatically load the stemmers for the specified languages and set them up with site search, nothing else to be done. At the time of writing, the following languages are supported: English en , French fr , Spanish es , Italian it , Japanese jp , Dutch du , Danish da , Portguese pt , Finnish fi , Romanian ro , Hungarian hu , Russian ru , Norwegian no , Swedish sv and Turkish tr . Only specify the languages you really need Be aware that including suppport for other languages increases the general JavaScript payload by around 20kb (without gzip) and by another 15-30kb per language.","title":"Site search"},{"location":"getting-started/#tabs","text":"From version 1.1.0 on, Material supports another layer on top of the main navigation for larger screens in the form of tabs. This is especially useful for larger documentation projects with only few top-level sections. Tabs can be enabled by setting the respective feature flag to true: extra : feature : tabs : true","title":"Tabs"},{"location":"getting-started/#more-advanced-customization","text":"If you want to change the general appearance of the Material theme, see this article for more information on advanced customization.","title":"More advanced customization"},{"location":"getting-started/#extensions","text":"MkDocs supports several Markdown extensions . The following extensions are not enabled by default (see the link for which are enabled by default) but highly recommended, so they should be switched on at all times: markdown_extensions : - admonition - codehilite(guess_lang=false) - toc(permalink=true) For more information, see the following list of extensions supported by the Material theme including more information regarding installation and usage: Admonition Codehilite Footnotes Metadata Permalinks PyMdown Extensions","title":"Extensions"},{"location":"getting-started/#full-example","text":"Below is a full example configuration for a mkdocs.yml : # Project information site_name : My Project site_description : A short description of my project site_author : John Doe site_url : https://john-doe.github.io/my-project # Repository repo_name : my-github-handle/my-project repo_url : https://github.com/john-doe/my-project # Copyright copyright : Copyright copy; 2016 - 2017 John Doe # Documentation and theme theme : material # Options extra : logo : images/logo.svg palette : primary : indigo accent : indigo font : text : Roboto code : Roboto Mono social : - type : github link : https://github.com/john-doe - type : twitter link : https://twitter.com/john-doe - type : linkedin link : https://de.linkedin.com/in/john-doe # Google Analytics google_analytics : - UA-XXXXXXXX-X - auto # Extensions markdown_extensions : - admonition - codehilite(guess_lang=false) - toc(permalink=true)","title":"Full example"},{"location":"license/","text":"License MIT License Copyright 2014 - 2017 Longan Labs Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"MIT License Copyright 2014 - 2017 Longan Labs Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"release-notes/","text":"Release notes Upgrading To upgrade Material to the latest version, use pip: pip install --upgrade mkdocs-material To determine the currently installed version, use the following command: pip show mkdocs-material | grep -E ^Version # Version 1.7.4 Changelog 1.7.4 _ June 21, 2017 Fixed functional link colors in table of contents for active palette Fixed #368 : Compatibility issues with IE11 1.7.3 _ June 7, 2017 Fixed error when setting language to Japanese for site search 1.7.2 _ June 6, 2017 Fixed offset of search box when repo_url is not set Fixed non-disappearing tooltip 1.7.1 _ June 1, 2017 Fixed wrong z-index order of header, overlay and drawer Fixed wrong offset of targeted footnote back references 1.7.0 _ June 1, 2017 Added \"copy to clipboard\" buttons to code blocks Added support for multilingual site search Fixed search term highlighting for non-latin languages 1.6.4 _ May 24, 2017 Fixed #337 : JavaScript error for GitHub organization URLs 1.6.3 _ May 16, 2017 Fixed #329 : Broken source stats for private or unknown GitHub repos 1.6.2 _ May 15, 2017 Fixed #316 : Fatal error for git clone on Windows Fixed #320 : Chrome 58 creates double underline for abbr tags Fixed #323 : Ligatures rendered inside code blocks Fixed miscalculated sidebar height due to missing margin collapse Changed deprecated MathJax CDN to Cloudflare 1.6.1 _ April 23, 2017 Fixed following of active/focused element if search input is focused Fixed layer order of search component elements 1.6.0 _ April 22, 2017 Added build test for Docker image on Travis Added search overlay for better user experience (focus) Added language from localizations to html tag Fixed #270 : source links broken for absolute URLs Fixed missing top spacing for first targeted element in content Fixed too small footnote divider when using larger font sizes 1.5.5 _ April 20, 2017 Fixed #282 : Browser search ( Meta + F ) is hijacked 1.5.4 _ April 8, 2017 Fixed broken highlighting for two or more search terms Fixed missing search results when only a h1 is present Fixed unresponsive overlay on Android 1.5.3 _ April 7, 2017 Fixed deprecated calls for template variables Fixed wrong palette color for focused search result Fixed JavaScript errors on 404 page Fixed missing top spacing on 404 page Fixed missing right spacing on overflow of source container 1.5.2 _ April 5, 2017 Added requirements as explicit dependencies in setup.py Fixed non-synchronized transitions in search form 1.5.1 _ March 30, 2017 Fixed rendering and offset of targetted footnotes Fixed #238 : Link on logo is not set to site_url 1.5.0 _ March 24, 2017 Added support for localization of search placeholder Added keyboard events for quick access of search Added keyboard events for search control Added opacity on hover for search buttons Added git hook to skip CI build on non-src changes Fixed non-resetting search placeholder when input is cleared Fixed error for unescaped parentheses in search term Fixed #229 : Button to clear search missing Fixed #231 : Escape key doesn't exit search Removed old-style figures from font feature settings 1.4.1 _ March 16, 2017 Fixed invalid destructuring attempt on NodeList (in Safari, Edge, IE) 1.4.0 _ March 16, 2017 Added support for grouping searched sections by documents Added support for highlighting of search terms Added support for localization of search results Fixed #216 : table of contents icon doesn't show if h1 is not present Reworked style and layout of search results for better usability 1.3.0 _ March 11, 2017 Added support for page-specific title and description using metadata Added support for linking source files to documentation Fixed jitter and offset of sidebar when zooming browser Fixed incorrectly initialized tablet sidebar height Fixed regression for #1 : GitHub stars break if repo_url ends with a / Fixed undesired white line below copyright footer due to base font scaling Fixed issue with whitespace in path for scripts Fixed #205 : support non-fixed (static) header Refactored footnote references for better visibility Reduced repaints to a minimum for non-tabs configuration Reduced contrast of edit button (slightly) 1.2.0 _ March 3, 2017 Added quote (synonym: cite ) style for Admonition Added help message to build pipeline Fixed wrong navigation link colors when applying palette Fixed #197 : Link missing in tabs navigation on deeply nested items Removed unnecessary dev dependencies 1.1.1 _ February 26, 2017 Fixed incorrectly displayed nested lists when using tabs 1.1.0 _ February 26, 2017 Added tabs navigation feature (optional) Added Disqus integration (optional) Added a high resolution Favicon with the new logo Added static type checking using Facebook's Flow Fixed #173 : Dictionary elements have no bottom spacing Fixed #175 : Tables cannot be set to 100% width Fixed race conditions in build related to asset revisioning Fixed accidentally re-introduced Permalink on top-level headline Fixed alignment of logo in drawer on IE11 Refactored styles related to tables Refactored and automated Docker build and PyPI release Refactored build scripts 1.0.5 _ February 18, 2017 Fixed #153 : Sidebar flows out of constrained area in Chrome 56 Fixed #159 : Footer jitter due to JavaScript if content is short 1.0.4 _ February 16, 2017 Fixed #142 : Documentation build errors if h1 is defined as raw HTML Fixed #164 : PyPI release does not build and install Fixed offsets of targeted headlines Increased sidebar font size by 0.12rem 1.0.3 _ January 22, 2017 Fixed #117 : Table of contents items don't blur on fast scrolling Refactored sidebar positioning logic Further reduction of repaints 1.0.2 _ January 15, 2017 Fixed #108 : Horizontal scrollbar in content area 1.0.1 _ January 14, 2017 Fixed massive repaints happening when scrolling Fixed footer back reference positions in case of overflow Fixed header logo from showing when the menu icon is rendered Changed scrollbar behavior to only show when content overflows 1.0.0 _ January 13, 2017 Introduced Webpack for more sophisticated JavaScript bundling Introduced ESLint and Stylelint for code style checks Introduced more accurate Material Design colors and shadows Introduced modular scales for harmonic font sizing Introduced git-hooks for better development workflow Rewrite of CSS using the BEM methodology and SassDoc guidelines Rewrite of JavaScript using ES6 and Babel as a transpiler Rewrite of Admonition, Permalinks and CodeHilite integration Rewrite of the complete typographical system Rewrite of Gulp asset pipeline in ES6 and separation of tasks Removed Bower as a dependency in favor of NPM Removed custom icon build in favor of the Material Design iconset Removed _blank targets on links due to vulnerability: http://bit.ly/1Mk2Rtw Removed unversioned assets from build directory Restructured templates into base templates and partials Added build and watch scripts in package.json Added support for Metadata and Footnotes Markdown extensions Added support for PyMdown Extensions package Added support for collapsible sections in navigation Added support for separate table of contents Added support for better accessibility through REM-based layout Added icons for GitHub, GitLab and BitBucket integrations Added more detailed documentation on specimen, extensions etc. Added a 404.html error page for deployment on GitHub Pages Fixed live reload chain in watch mode when saving a template Fixed variable references to work with MkDocs 0.16 0.2.4 _ June 26, 2016 Fixed improperly set default favicon Fixed #33 : Protocol relative URL for webfonts doesn't work with file:// Fixed #34 : IE11 on Windows 7 doesn't honor max-width on main tag Fixed #35 : Add styling for blockquotes 0.2.3 _ May 16, 2016 Fixed #25 : Highlight inline fenced blocks Fixed #26 : Better highlighting for keystrokes Fixed #30 : Suboptimal syntax highlighting for PHP 0.2.2 _ March 20, 2016 Fixed #15 : Document Pygments dependency for CodeHilite Fixed #16 : Favicon could not be set through mkdocs.yml Fixed #17 : Put version into own container for styling Fixed #20 : Fix rounded borders for tables 0.2.1 _ March 12, 2016 Fixed #10 : Invisible header after closing search bar with ESC key Fixed #13 : Table cells don't wrap Fixed empty list in table of contents when no headline is defined Corrected wrong path for static asset monitoring in Gulpfile.js Set up tracking of site search for Google Analytics 0.2.0 _ February 24, 2016 Fixed #6 : Include multiple color palettes via mkdocs.yml Fixed #7 : Better colors for links inside admonition notes and warnings Fixed #9 : Text for prev/next footer navigation should be customizable Refactored templates (replaced if / else with modifiers where possible) 0.1.3 _ February 21, 2016 Fixed #3 : Ordered lists within an unordered list have ::before content Fixed #4 : Click on Logo/Title without Github-Repository: \"None\" Fixed #5 : Page without headlines renders empty list in table of contents Moved Modernizr to top to ensure basic usability in IE8 0.1.2 _ February 16, 2016 Fixed styles for deep navigational hierarchies Fixed webfont delivery problem when hosted in subdirectories Fixed print styles in mobile/tablet configuration Added option to configure fonts in mkdocs.yml with fallbacks Changed styles for admonition notes and warnings Set download link to latest version if available Set up tracking of outgoing links and actions for Google Analytics 0.1.1 _ February 11, 2016 Fixed #1 : GitHub stars don't work if the repo_url ends with a / Updated NPM and Bower dependencies to most recent versions Changed footer/copyright link to Material theme to GitHub pages Made MkDocs building/serving in build process optional Set up continuous integration with Travis 0.1.0 _ February 9, 2016 Initial release","title":"Release notes"},{"location":"release-notes/#release-notes","text":"","title":"Release notes"},{"location":"release-notes/#upgrading","text":"To upgrade Material to the latest version, use pip: pip install --upgrade mkdocs-material To determine the currently installed version, use the following command: pip show mkdocs-material | grep -E ^Version # Version 1.7.4","title":"Upgrading"},{"location":"release-notes/#changelog","text":"","title":"Changelog"},{"location":"release-notes/#174-_-june-21-2017","text":"Fixed functional link colors in table of contents for active palette Fixed #368 : Compatibility issues with IE11","title":"1.7.4  _ June 21, 2017"},{"location":"release-notes/#173-_-june-7-2017","text":"Fixed error when setting language to Japanese for site search","title":"1.7.3  _ June 7, 2017"},{"location":"release-notes/#172-_-june-6-2017","text":"Fixed offset of search box when repo_url is not set Fixed non-disappearing tooltip","title":"1.7.2  _ June 6, 2017"},{"location":"release-notes/#171-_-june-1-2017","text":"Fixed wrong z-index order of header, overlay and drawer Fixed wrong offset of targeted footnote back references","title":"1.7.1  _ June 1, 2017"},{"location":"release-notes/#170-_-june-1-2017","text":"Added \"copy to clipboard\" buttons to code blocks Added support for multilingual site search Fixed search term highlighting for non-latin languages","title":"1.7.0  _ June 1, 2017"},{"location":"release-notes/#164-_-may-24-2017","text":"Fixed #337 : JavaScript error for GitHub organization URLs","title":"1.6.4  _ May 24, 2017"},{"location":"release-notes/#163-_-may-16-2017","text":"Fixed #329 : Broken source stats for private or unknown GitHub repos","title":"1.6.3  _ May 16, 2017"},{"location":"release-notes/#162-_-may-15-2017","text":"Fixed #316 : Fatal error for git clone on Windows Fixed #320 : Chrome 58 creates double underline for abbr tags Fixed #323 : Ligatures rendered inside code blocks Fixed miscalculated sidebar height due to missing margin collapse Changed deprecated MathJax CDN to Cloudflare","title":"1.6.2  _ May 15, 2017"},{"location":"release-notes/#161-_-april-23-2017","text":"Fixed following of active/focused element if search input is focused Fixed layer order of search component elements","title":"1.6.1  _ April 23, 2017"},{"location":"release-notes/#160-_-april-22-2017","text":"Added build test for Docker image on Travis Added search overlay for better user experience (focus) Added language from localizations to html tag Fixed #270 : source links broken for absolute URLs Fixed missing top spacing for first targeted element in content Fixed too small footnote divider when using larger font sizes","title":"1.6.0  _ April 22, 2017"},{"location":"release-notes/#155-_-april-20-2017","text":"Fixed #282 : Browser search ( Meta + F ) is hijacked","title":"1.5.5  _ April 20, 2017"},{"location":"release-notes/#154-_-april-8-2017","text":"Fixed broken highlighting for two or more search terms Fixed missing search results when only a h1 is present Fixed unresponsive overlay on Android","title":"1.5.4  _ April 8, 2017"},{"location":"release-notes/#153-_-april-7-2017","text":"Fixed deprecated calls for template variables Fixed wrong palette color for focused search result Fixed JavaScript errors on 404 page Fixed missing top spacing on 404 page Fixed missing right spacing on overflow of source container","title":"1.5.3  _ April 7, 2017"},{"location":"release-notes/#152-_-april-5-2017","text":"Added requirements as explicit dependencies in setup.py Fixed non-synchronized transitions in search form","title":"1.5.2  _ April 5, 2017"},{"location":"release-notes/#151-_-march-30-2017","text":"Fixed rendering and offset of targetted footnotes Fixed #238 : Link on logo is not set to site_url","title":"1.5.1  _ March 30, 2017"},{"location":"release-notes/#150-_-march-24-2017","text":"Added support for localization of search placeholder Added keyboard events for quick access of search Added keyboard events for search control Added opacity on hover for search buttons Added git hook to skip CI build on non-src changes Fixed non-resetting search placeholder when input is cleared Fixed error for unescaped parentheses in search term Fixed #229 : Button to clear search missing Fixed #231 : Escape key doesn't exit search Removed old-style figures from font feature settings","title":"1.5.0  _ March 24, 2017"},{"location":"release-notes/#141-_-march-16-2017","text":"Fixed invalid destructuring attempt on NodeList (in Safari, Edge, IE)","title":"1.4.1  _ March 16, 2017"},{"location":"release-notes/#140-_-march-16-2017","text":"Added support for grouping searched sections by documents Added support for highlighting of search terms Added support for localization of search results Fixed #216 : table of contents icon doesn't show if h1 is not present Reworked style and layout of search results for better usability","title":"1.4.0  _ March 16, 2017"},{"location":"release-notes/#130-_-march-11-2017","text":"Added support for page-specific title and description using metadata Added support for linking source files to documentation Fixed jitter and offset of sidebar when zooming browser Fixed incorrectly initialized tablet sidebar height Fixed regression for #1 : GitHub stars break if repo_url ends with a / Fixed undesired white line below copyright footer due to base font scaling Fixed issue with whitespace in path for scripts Fixed #205 : support non-fixed (static) header Refactored footnote references for better visibility Reduced repaints to a minimum for non-tabs configuration Reduced contrast of edit button (slightly)","title":"1.3.0  _ March 11, 2017"},{"location":"release-notes/#120-_-march-3-2017","text":"Added quote (synonym: cite ) style for Admonition Added help message to build pipeline Fixed wrong navigation link colors when applying palette Fixed #197 : Link missing in tabs navigation on deeply nested items Removed unnecessary dev dependencies","title":"1.2.0  _ March 3, 2017"},{"location":"release-notes/#111-_-february-26-2017","text":"Fixed incorrectly displayed nested lists when using tabs","title":"1.1.1  _ February 26, 2017"},{"location":"release-notes/#110-_-february-26-2017","text":"Added tabs navigation feature (optional) Added Disqus integration (optional) Added a high resolution Favicon with the new logo Added static type checking using Facebook's Flow Fixed #173 : Dictionary elements have no bottom spacing Fixed #175 : Tables cannot be set to 100% width Fixed race conditions in build related to asset revisioning Fixed accidentally re-introduced Permalink on top-level headline Fixed alignment of logo in drawer on IE11 Refactored styles related to tables Refactored and automated Docker build and PyPI release Refactored build scripts","title":"1.1.0  _ February 26, 2017"},{"location":"release-notes/#105-_-february-18-2017","text":"Fixed #153 : Sidebar flows out of constrained area in Chrome 56 Fixed #159 : Footer jitter due to JavaScript if content is short","title":"1.0.5  _ February 18, 2017"},{"location":"release-notes/#104-_-february-16-2017","text":"Fixed #142 : Documentation build errors if h1 is defined as raw HTML Fixed #164 : PyPI release does not build and install Fixed offsets of targeted headlines Increased sidebar font size by 0.12rem","title":"1.0.4  _ February 16, 2017"},{"location":"release-notes/#103-_-january-22-2017","text":"Fixed #117 : Table of contents items don't blur on fast scrolling Refactored sidebar positioning logic Further reduction of repaints","title":"1.0.3  _ January 22, 2017"},{"location":"release-notes/#102-_-january-15-2017","text":"Fixed #108 : Horizontal scrollbar in content area","title":"1.0.2  _ January 15, 2017"},{"location":"release-notes/#101-_-january-14-2017","text":"Fixed massive repaints happening when scrolling Fixed footer back reference positions in case of overflow Fixed header logo from showing when the menu icon is rendered Changed scrollbar behavior to only show when content overflows","title":"1.0.1  _ January 14, 2017"},{"location":"release-notes/#100-_-january-13-2017","text":"Introduced Webpack for more sophisticated JavaScript bundling Introduced ESLint and Stylelint for code style checks Introduced more accurate Material Design colors and shadows Introduced modular scales for harmonic font sizing Introduced git-hooks for better development workflow Rewrite of CSS using the BEM methodology and SassDoc guidelines Rewrite of JavaScript using ES6 and Babel as a transpiler Rewrite of Admonition, Permalinks and CodeHilite integration Rewrite of the complete typographical system Rewrite of Gulp asset pipeline in ES6 and separation of tasks Removed Bower as a dependency in favor of NPM Removed custom icon build in favor of the Material Design iconset Removed _blank targets on links due to vulnerability: http://bit.ly/1Mk2Rtw Removed unversioned assets from build directory Restructured templates into base templates and partials Added build and watch scripts in package.json Added support for Metadata and Footnotes Markdown extensions Added support for PyMdown Extensions package Added support for collapsible sections in navigation Added support for separate table of contents Added support for better accessibility through REM-based layout Added icons for GitHub, GitLab and BitBucket integrations Added more detailed documentation on specimen, extensions etc. Added a 404.html error page for deployment on GitHub Pages Fixed live reload chain in watch mode when saving a template Fixed variable references to work with MkDocs 0.16","title":"1.0.0  _ January 13, 2017"},{"location":"release-notes/#024-_-june-26-2016","text":"Fixed improperly set default favicon Fixed #33 : Protocol relative URL for webfonts doesn't work with file:// Fixed #34 : IE11 on Windows 7 doesn't honor max-width on main tag Fixed #35 : Add styling for blockquotes","title":"0.2.4  _ June 26, 2016"},{"location":"release-notes/#023-_-may-16-2016","text":"Fixed #25 : Highlight inline fenced blocks Fixed #26 : Better highlighting for keystrokes Fixed #30 : Suboptimal syntax highlighting for PHP","title":"0.2.3  _ May 16, 2016"},{"location":"release-notes/#022-_-march-20-2016","text":"Fixed #15 : Document Pygments dependency for CodeHilite Fixed #16 : Favicon could not be set through mkdocs.yml Fixed #17 : Put version into own container for styling Fixed #20 : Fix rounded borders for tables","title":"0.2.2  _ March 20, 2016"},{"location":"release-notes/#021-_-march-12-2016","text":"Fixed #10 : Invisible header after closing search bar with ESC key Fixed #13 : Table cells don't wrap Fixed empty list in table of contents when no headline is defined Corrected wrong path for static asset monitoring in Gulpfile.js Set up tracking of site search for Google Analytics","title":"0.2.1  _ March 12, 2016"},{"location":"release-notes/#020-_-february-24-2016","text":"Fixed #6 : Include multiple color palettes via mkdocs.yml Fixed #7 : Better colors for links inside admonition notes and warnings Fixed #9 : Text for prev/next footer navigation should be customizable Refactored templates (replaced if / else with modifiers where possible)","title":"0.2.0  _ February 24, 2016"},{"location":"release-notes/#013-_-february-21-2016","text":"Fixed #3 : Ordered lists within an unordered list have ::before content Fixed #4 : Click on Logo/Title without Github-Repository: \"None\" Fixed #5 : Page without headlines renders empty list in table of contents Moved Modernizr to top to ensure basic usability in IE8","title":"0.1.3  _ February 21, 2016"},{"location":"release-notes/#012-_-february-16-2016","text":"Fixed styles for deep navigational hierarchies Fixed webfont delivery problem when hosted in subdirectories Fixed print styles in mobile/tablet configuration Added option to configure fonts in mkdocs.yml with fallbacks Changed styles for admonition notes and warnings Set download link to latest version if available Set up tracking of outgoing links and actions for Google Analytics","title":"0.1.2  _ February 16, 2016"},{"location":"release-notes/#011-_-february-11-2016","text":"Fixed #1 : GitHub stars don't work if the repo_url ends with a / Updated NPM and Bower dependencies to most recent versions Changed footer/copyright link to Material theme to GitHub pages Made MkDocs building/serving in build process optional Set up continuous integration with Travis","title":"0.1.1  _ February 11, 2016"},{"location":"release-notes/#010-_-february-9-2016","text":"Initial release","title":"0.1.0  _ February 9, 2016"},{"location":"specimen/","text":"Specimen Body copy Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras arcu libero, mollis sed massa vel, ornare viverra ex . Mauris a ullamcorper lacus. Nullam urna elit, malesuada eget finibus ut, ullamcorper ac tortor. Vestibulum sodales pulvinar nisl, pharetra aliquet est. Quisque volutpat erat ac nisi accumsan tempor. Sed suscipit , orci non pretium pretium, quam mi gravida metus, vel venenatis justo est condimentum diam. Maecenas non ornare justo. Nam a ipsum eros. Nulla aliquam orci sit amet nisl posuere malesuada. Proin aliquet nulla velit, quis ultricies orci feugiat et. Ut tincidunt sollicitudin tincidunt. Aenean ullamcorper sit amet nulla at interdum. Headings The 3 rd level The 4 th level The 5 th level The 6 th level Headings with secondary text The 3 rd level with secondary text The 4 th level with secondary text The 5 th level with secondary text The 6 th level with secondary text Blockquotes Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed molestie imperdiet consectetur. Blockquote nesting Sed aliquet , neque at rutrum mollis, neque nisi tincidunt nibh, vitae faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem libero fermentum urna, ut efficitur elit ligula et nunc. Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla. Ut sit amet placerat ante. Proin sed elementum nulla. Nunc vitae sem odio. Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum. eu odio. Suspendisse rutrum facilisis risus , eu posuere neque commodo a. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo bibendum, sodales mauris ut, tincidunt massa. Other content blocks Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. var _extends = function ( target ) { for ( var i = 1 ; i arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Praesent at return target , sodales nibh vel, tempor felis. Fusce vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices. Donec consectetur mauris non neque imperdiet, eget volutpat libero. Lists Unordered lists Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris. Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam. Ordered lists Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aliquam ornare feugiat quam et egestas. Nunc id erat et quam pellentesque lacinia eu vel odio. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Sed aliquet, neque at rutrum mollis, neque nisi tincidunt nibh. Pellentesque eget var _extends ornare tellus, ut gravida mi. var _extends = function ( target ) { for ( var i = 1 ; i arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. Definition lists Lorem ipsum dolor sit amet Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Cras arcu libero Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris. Code blocks Inline Morbi eget dapibus felis . Vivamus venenatis porttitor tortor sit amet rutrum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Pellentesque aliquet quam enim , eu volutpat urna rutrum a. Nam vehicula nunc return target mauris, a ultricies libero efficitur sed. Sed molestie imperdiet consectetur. Vivamus a pharetra leo. Pellentesque eget ornare tellus, ut gravida mi. Fusce vel lacinia lacus. Listing 1 2 3 4 5 6 7 8 9 var _extends = function ( target ) { for ( var i = 1 ; i arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Horizontal rules Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales. Data tables Sollicitudo / Pellentesi consectetur adipiscing elit arcu sed Vivamus a pharetra yes yes yes yes yes Ornare viverra ex yes yes yes yes yes Mauris a ullamcorper yes yes partial yes yes Nullam urna elit yes yes yes yes yes Malesuada eget finibus yes yes yes yes yes Ullamcorper yes yes yes yes yes Vestibulum sodales yes - yes - yes Pulvinar nisl yes yes yes - - Pharetra aliquet est yes yes yes yes yes Sed suscipit yes yes yes yes yes Orci non pretium yes partial - - - Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Left Center Right Lorem dolor amet ipsum sit Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. Table with colgroups (Pandoc) Lorem ipsum dolor sit amet. Sed sagittis eleifend rutrum. Donec vitae suscipit est.","title":"Specimen"},{"location":"specimen/#specimen","text":"","title":"Specimen"},{"location":"specimen/#body-copy","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras arcu libero, mollis sed massa vel, ornare viverra ex . Mauris a ullamcorper lacus. Nullam urna elit, malesuada eget finibus ut, ullamcorper ac tortor. Vestibulum sodales pulvinar nisl, pharetra aliquet est. Quisque volutpat erat ac nisi accumsan tempor. Sed suscipit , orci non pretium pretium, quam mi gravida metus, vel venenatis justo est condimentum diam. Maecenas non ornare justo. Nam a ipsum eros. Nulla aliquam orci sit amet nisl posuere malesuada. Proin aliquet nulla velit, quis ultricies orci feugiat et. Ut tincidunt sollicitudin tincidunt. Aenean ullamcorper sit amet nulla at interdum.","title":"Body copy"},{"location":"specimen/#headings","text":"","title":"Headings"},{"location":"specimen/#the-3rd-level","text":"","title":"The 3rd level"},{"location":"specimen/#the-4th-level","text":"","title":"The 4th level"},{"location":"specimen/#the-5th-level","text":"","title":"The 5th level"},{"location":"specimen/#the-6th-level","text":"","title":"The 6th level"},{"location":"specimen/#headings-with-secondary-text","text":"","title":"Headings with secondary text"},{"location":"specimen/#the-3rd-level-with-secondary-text","text":"","title":"The 3rd level with secondary text"},{"location":"specimen/#the-4th-level-with-secondary-text","text":"","title":"The 4th level with secondary text"},{"location":"specimen/#the-5th-level-with-secondary-text","text":"","title":"The 5th level with secondary text"},{"location":"specimen/#the-6th-level-with-secondary-text","text":"","title":"The 6th level with secondary text"},{"location":"specimen/#blockquotes","text":"Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed molestie imperdiet consectetur.","title":"Blockquotes"},{"location":"specimen/#blockquote-nesting","text":"Sed aliquet , neque at rutrum mollis, neque nisi tincidunt nibh, vitae faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem libero fermentum urna, ut efficitur elit ligula et nunc. Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla. Ut sit amet placerat ante. Proin sed elementum nulla. Nunc vitae sem odio. Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum. eu odio. Suspendisse rutrum facilisis risus , eu posuere neque commodo a. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo bibendum, sodales mauris ut, tincidunt massa.","title":"Blockquote nesting"},{"location":"specimen/#other-content-blocks","text":"Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. var _extends = function ( target ) { for ( var i = 1 ; i arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Praesent at return target , sodales nibh vel, tempor felis. Fusce vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices. Donec consectetur mauris non neque imperdiet, eget volutpat libero.","title":"Other content blocks"},{"location":"specimen/#lists","text":"","title":"Lists"},{"location":"specimen/#unordered-lists","text":"Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris. Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam.","title":"Unordered lists"},{"location":"specimen/#ordered-lists","text":"Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aliquam ornare feugiat quam et egestas. Nunc id erat et quam pellentesque lacinia eu vel odio. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Sed aliquet, neque at rutrum mollis, neque nisi tincidunt nibh. Pellentesque eget var _extends ornare tellus, ut gravida mi. var _extends = function ( target ) { for ( var i = 1 ; i arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo.","title":"Ordered lists"},{"location":"specimen/#definition-lists","text":"Lorem ipsum dolor sit amet Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Cras arcu libero Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris.","title":"Definition lists"},{"location":"specimen/#code-blocks","text":"","title":"Code blocks"},{"location":"specimen/#inline","text":"Morbi eget dapibus felis . Vivamus venenatis porttitor tortor sit amet rutrum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Pellentesque aliquet quam enim , eu volutpat urna rutrum a. Nam vehicula nunc return target mauris, a ultricies libero efficitur sed. Sed molestie imperdiet consectetur. Vivamus a pharetra leo. Pellentesque eget ornare tellus, ut gravida mi. Fusce vel lacinia lacus.","title":"Inline"},{"location":"specimen/#listing","text":"1 2 3 4 5 6 7 8 9 var _extends = function ( target ) { for ( var i = 1 ; i arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; };","title":"Listing"},{"location":"specimen/#horizontal-rules","text":"Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales.","title":"Horizontal rules"},{"location":"specimen/#data-tables","text":"Sollicitudo / Pellentesi consectetur adipiscing elit arcu sed Vivamus a pharetra yes yes yes yes yes Ornare viverra ex yes yes yes yes yes Mauris a ullamcorper yes yes partial yes yes Nullam urna elit yes yes yes yes yes Malesuada eget finibus yes yes yes yes yes Ullamcorper yes yes yes yes yes Vestibulum sodales yes - yes - yes Pulvinar nisl yes yes yes - - Pharetra aliquet est yes yes yes yes yes Sed suscipit yes yes yes yes yes Orci non pretium yes partial - - - Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Left Center Right Lorem dolor amet ipsum sit Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. Table with colgroups (Pandoc) Lorem ipsum dolor sit amet. Sed sagittis eleifend rutrum. Donec vitae suscipit est.","title":"Data tables"},{"location":"extensions/admonition/","text":"Admonition Admonition is an extension included in the standard Markdown library that makes it possible to add block-styled side content to your documentation, for example summaries, notes, hints or warnings. Installation Add the following lines to your mkdocs.yml : markdown_extensions : - admonition Usage Admonition blocks follow a simple syntax: every block is started with !!! , followed by a single keyword which is used as the type qualifier of the block. The content of the block then follows on the next line, indented by four spaces. Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Changing the title By default, the block title will equal the type qualifier in titlecase. However, it can easily be changed by adding a quoted string after the type qualifier. Example: !!! note Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Removing the title Similar to setting a custom title , the icon and title can be omitted by providing an empty string after the type qualifier: Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Embedded code blocks Blocks can contain all kinds of text content, including headlines, lists, paragraphs and other blocks \u2013 except code blocks, because the parser from the standard Markdown library does not account for those. However, the PyMdown Extensions package adds an extension called SuperFences , which makes it possible to nest code blocks within other blocks. Example: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = 087652 ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Types Admonition supports user-defined type qualifiers which may influence the style of the inserted block. Following is a list of type qualifiers supported by the Material theme, whereas the default type, and thus fallback for unknown type qualifiers, is note . Note Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: note seealso Summary Example: !!! summary Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Summary Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: summary tldr Tip Example: !!! tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: tip hint important Success Example: !!! success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: success check done Warning Example: !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: warning caution attention Failure Example: !!! failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: failure fail missing Danger Example: !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: danger error Bug Example: !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: bug Quote Example: !!! quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: quote cite","title":"Admonition"},{"location":"extensions/admonition/#admonition","text":"Admonition is an extension included in the standard Markdown library that makes it possible to add block-styled side content to your documentation, for example summaries, notes, hints or warnings.","title":"Admonition"},{"location":"extensions/admonition/#installation","text":"Add the following lines to your mkdocs.yml : markdown_extensions : - admonition","title":"Installation"},{"location":"extensions/admonition/#usage","text":"Admonition blocks follow a simple syntax: every block is started with !!! , followed by a single keyword which is used as the type qualifier of the block. The content of the block then follows on the next line, indented by four spaces. Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Usage"},{"location":"extensions/admonition/#changing-the-title","text":"By default, the block title will equal the type qualifier in titlecase. However, it can easily be changed by adding a quoted string after the type qualifier. Example: !!! note Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Changing the title"},{"location":"extensions/admonition/#removing-the-title","text":"Similar to setting a custom title , the icon and title can be omitted by providing an empty string after the type qualifier: Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Removing the title"},{"location":"extensions/admonition/#embedded-code-blocks","text":"Blocks can contain all kinds of text content, including headlines, lists, paragraphs and other blocks \u2013 except code blocks, because the parser from the standard Markdown library does not account for those. However, the PyMdown Extensions package adds an extension called SuperFences , which makes it possible to nest code blocks within other blocks. Example: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = 087652 ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.","title":"Embedded code blocks"},{"location":"extensions/admonition/#types","text":"Admonition supports user-defined type qualifiers which may influence the style of the inserted block. Following is a list of type qualifiers supported by the Material theme, whereas the default type, and thus fallback for unknown type qualifiers, is note .","title":"Types"},{"location":"extensions/admonition/#note","text":"Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: note seealso","title":"Note"},{"location":"extensions/admonition/#summary","text":"Example: !!! summary Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Summary Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: summary tldr","title":"Summary"},{"location":"extensions/admonition/#tip","text":"Example: !!! tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: tip hint important","title":"Tip"},{"location":"extensions/admonition/#success","text":"Example: !!! success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: success check done","title":"Success"},{"location":"extensions/admonition/#warning","text":"Example: !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: warning caution attention","title":"Warning"},{"location":"extensions/admonition/#failure","text":"Example: !!! failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: failure fail missing","title":"Failure"},{"location":"extensions/admonition/#danger","text":"Example: !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: danger error","title":"Danger"},{"location":"extensions/admonition/#bug","text":"Example: !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: bug","title":"Bug"},{"location":"extensions/admonition/#quote","text":"Example: !!! quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: quote cite","title":"Quote"},{"location":"extensions/codehilite/","text":"CodeHilite CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed. Installation CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over 300 languages , CodeHilite will also highlight the code block. Pygments can be installed with the following command: pip install pygments To enable CodeHilite, add the following lines to your mkdocs.yml : markdown_extensions : - codehilite Migrating from Material 0.2.x In 0.2.x the CodeHilite extension was included with codehilite(css_class=code) which switched the CSS class from .codehilite to .code . The current version of the theme doesn't require that and defines styles for the default .codehilite class, so the part css_class=code needs to be removed. Usage Specifying the language The CodeHilite extension uses the same syntax as regular Markdown code blocks, but needs to know the language of the code block. This can be done in three different ways. via Markdown syntax recommended In Markdown, code blocks can be opened and closed by writing three backticks on separate lines. To add code highlighting to those blocks, the easiest way is to specify the language directly after the opening block. Example: ``` python import tensorflow as tf ``` Result: import tensorflow as tf via Shebang Alternatively, if the first line of a code block contains a shebang, the language is derived from the path referenced in the shebang. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: #!/usr/bin/python import tensorflow as tf Result: #!/usr/bin/python import tensorflow as tf via three colons If the first line starts with three colons followed by a language identifier, the first line is stripped. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: :::python import tensorflow as tf Result: import tensorflow as tf Adding line numbers Line numbers can be added by enabling the linenums flag in your mkdocs.yml : markdown_extensions : - codehilite(linenums=true) Example: ``` python Bubble sort def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 Bubble sort def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Highlighting specific lines Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language identifier. Line counts start at 1. Example: ``` python hl_lines= 3 4 Bubble sort def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 Bubble sort def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Supported languages excerpt CodeHilite uses Pygments , a generic syntax highlighter with support for over 300 languages , so the following list of examples is just an excerpt. Bash #!/bin/bash for OPT in $@ do case $OPT in -f ) canonicalize = 1 ;; -n ) switchlf = -n ;; esac done # readlink -f function __readlink_f { target = $1 while test -n $target ; do filepath = $target cd ` dirname $filepath ` target = ` readlink $filepath ` done /bin/echo $switchlf ` pwd -P ` / ` basename $filepath ` } if [ ! $canonicalize ] ; then readlink $switchlf $@ else for file in $@ do case $file in -* ) ;; * ) __readlink_f $file ;; esac done fi exit $? C extern size_t pb_varint_scan ( const uint8_t data [], size_t left ) { assert ( data left ); left = left 10 ? 10 : left ; #ifdef __SSE2__ /* Mapping: remaining bytes == bitmask */ static const int mask_map [] = { 0x0000 , 0x0001 , 0x0003 , 0x0007 , 0x000F , 0x001F , 0x003F , 0x007F , 0x00FF , 0x01FF , 0x03FF }; /* Load buffer into 128-bit integer and create high-bit mask */ __m128i temp = _mm_loadu_si128 (( const __m128i * ) data ); __m128i high = _mm_set1_epi8 ( 0x80 ); /* Intersect and extract mask with high-bits set */ int mask = _mm_movemask_epi8 ( _mm_and_si128 ( temp , high )); mask = ( mask mask_map [ left ]) ^ mask_map [ left ]; /* Count trailing zeroes */ return mask ? __builtin_ctz ( mask ) + 1 : 0 ; #else /* Linear scan */ size_t size = 0 ; while ( data [ size ++ ] 0x80 ) if ( !-- left ) return 0 ; return size ; #endif /* __SSE2__ */ } C++ Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ signature ] = descriptor_ - full_name (); /* Prepare message symbol */ variables_ [ message ] = StringReplace ( variables_ [ signature ], . , _ , true ); LowerString ( ( variables_ [ message ])); /* Suffix scope to identifiers, if given */ string suffix ( ); if ( scope_ ) { suffix = scope_ - full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ - file () - package (). compare ( descriptor_ - file () - package ())) suffix = StripPrefixString ( suffix , scope_ - file () - package () + . ); /* Append to signature */ variables_ [ signature ] += .[ + suffix + ] ; suffix = _ + suffix ; } /* Prepare extension symbol */ variables_ [ extension ] = StringReplace ( suffix , . , _ , true ); LowerString ( ( variables_ [ extension ])); } C public static void Send ( Socket socket , byte [] buffer , int offset , int size , int timeout ) { int startTickCount = Environment . TickCount ; int sent = 0 ; do { if ( Environment . TickCount startTickCount + timeout ) throw new Exception ( Timeout. ); try { sent += socket . Send ( buffer , offset + sent , size - sent , SocketFlags . None ); } catch ( SocketException ex ) { if ( ex . SocketErrorCode == SocketError . WouldBlock || ex . SocketErrorCode == SocketError . IOPending || ex . SocketErrorCode == SocketError . NoBufferSpaceAvailable ) { /* Socket buffer is probably full, wait and try again */ Thread . Sleep ( 30 ); } else { throw ex ; } } } while ( sent size ); } Clojure ( clojure-version ) ( defn partition-when [ f ] ( fn [ rf ] ( let [ a ( java.util.ArrayList. ) fval ( volatile! false )] ( fn ([] ( rf )) ([ result ] ( let [ result ( if ( .isEmpty a ) result ( let [ v ( vec ( .toArray a ))] ;; Clear first ( .clear a ) ( unreduced ( rf result v ))))] ( rf result ))) ([ result input ] ( if-not ( and ( f input ) @ fval ) ( do ( vreset! fval true ) ( .add a input ) result ) ( let [ v ( vec ( .toArray a ))] ( .clear a ) ( let [ ret ( rf result v )] ( when-not ( reduced? ret ) ( .add a input )) ret )))))))) ( into [] ( partition-when # ( .startsWith % )) [ 1d 33 1 2 22 3 ]) Diff Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log( hello world ); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ packages/services.web/{!(test)/**/,}*.js , packages/error/**/*.js ], - scripts: [ - grunt.js , - db/**/*.js - ], browser: [ packages/web/server.js , packages/web/server/**/*.js , Docker FROM ubuntu # Install vnc, xvfb in order to create a fake display and firefox RUN apt-get update apt-get install -y x11vnc xvfb firefox RUN mkdir ~/.vnc # Setup a password RUN x11vnc -storepasswd 1234 ~/.vnc/passwd # Autostart firefox (might not be the best way, but it does the trick) RUN bash -c echo firefox /.bashrc EXPOSE 5900 CMD [ x11vnc , -forever , -usepw , -create ] Elixir require Logger def accept ( port ) do { :ok , socket } = :gen_tcp . listen ( port , [ :binary , packet : :line , active : false , reuseaddr : true ]) Logger . info Accepting connections on port #{ port } loop_acceptor ( socket ) end defp loop_acceptor ( socket ) do { :ok , client } = :gen_tcp . accept ( socket ) serve ( client ) loop_acceptor ( socket ) end defp serve ( socket ) do socket | read_line () | write_line ( socket ) serve ( socket ) end defp read_line ( socket ) do { :ok , data } = :gen_tcp . recv ( socket , 0 ) data end defp write_line ( line , socket ) do :gen_tcp . send ( socket , line ) end Erlang circular ( Defs ) - [ { { Type , Base }, Fields } || { { Type , Base }, Fields } - Defs , Type == msg , circular ( Base , Defs ) ]. circular ( Base , Defs ) - Fields = proplists : get_value ({ msg , Base }, Defs ), circular ( Defs , Fields , [ Base ]). circular (_ Defs , [], _ Path ) - false ; circular ( Defs , [ Field | Fields ], Path ) - case Field #field.type of { msg , Type } - case lists : member ( Type , Path ) of false - Children = proplists : get_value ({ msg , Type }, Defs ), case circular ( Defs , Children , [ Type | Path ]) of false - circular ( Defs , Fields , Path ); true - true end ; true - Type == lists : last ( Path ) andalso ( length ( Path ) == 1 orelse not is_tree ( Path )) end ; _ - circular ( Defs , Fields , Path ) end . F /// Asynchronously download retangles from the server /// and decode the JSON format to F# Rectangle record let [ Js ] getRectangles () : Async Rectangle [] = async { let req = XMLHttpRequest () req . Open ( POST , /get , true ) let! resp = req . AsyncSend () return JSON . parse ( resp ) } /// Repeatedly update rectangles after 0.5 sec let [ Js ] updateLoop () = async { while true do do ! Async . Sleep ( 500 ) let! rects = getRectangles () cleanRectangles () rects | Array . iter createRectangle } Go package main import fmt func counter ( id int , channel chan int , closer bool ) { for i := 0 ; i 10000000 ; i ++ { fmt . Println ( process , id , send , i ) channel - 1 } if closer { close ( channel ) } } func main () { channel := make ( chan int ) go counter ( 1 , channel , false ) go counter ( 2 , channel , true ) x := 0 // receiving data from channel for i := range channel { fmt . Println ( receiving ) x += i } fmt . Println ( x ) } HTML !doctype html html class = no-js lang = head meta charset = utf-8 meta http-equiv = x-ua-compatible content = ie=edge title HTML5 Boilerplate / title meta name = description content = meta name = viewport content = width=device-width, initial-scale=1 link rel = apple-touch-icon href = apple-touch-icon.png link rel = stylesheet href = css/normalize.css link rel = stylesheet href = css/main.css script src = js/vendor/modernizr-2.8.3.min.js / script / head body p Hello world! This is HTML5 Boilerplate. / p / body / html Java import java.util.LinkedList ; import java.lang.reflect.Array ; public class UnsortedHashSet E { private static final double LOAD_FACTOR_LIMIT = 0.7 ; private int size ; private LinkedList E [] con ; public UnsortedHashSet () { con = ( LinkedList E [])( new LinkedList [ 10 ]); } public boolean add ( E obj ) { int oldSize = size ; int index = Math . abs ( obj . hashCode ()) % con . length ; if ( con [ index ] == null ) con [ index ] = new LinkedList E (); if (! con [ index ]. contains ( obj )) { con [ index ]. add ( obj ); size ++; } if ( 1.0 * size / con . length LOAD_FACTOR_LIMIT ) resize (); return oldSize != size ; } private void resize () { UnsortedHashSet E temp = new UnsortedHashSet E (); temp . con = ( LinkedList E [])( new LinkedList [ con . length * 2 + 1 ]); for ( int i = 0 ; i con . length ; i ++) { if ( con [ i ] != null ) for ( E e : con [ i ]) temp . add ( e ); } con = temp . con ; } public int size () { return size ; } } JavaScript var Math = require ( lib/math ); var _extends = function ( target ) { for ( var i = 1 ; i arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; var e = exports . e = 2.71828182846 ; exports [ default ] = function ( x ) { return Math . exp ( x ); }; module . exports = _extends ( exports [ default ], exports ); JSON { name : mkdocs-material , version : 0.2.4 , description : A Material Design theme for MkDocs , homepage : http://squidfunk.github.io/mkdocs-material/ , authors : [ squidfunk martin.donath@squidfunk.com ], license : MIT , main : Gulpfile.js , scripts : { start : ./node_modules/.bin/gulp watch --mkdocs , build : ./node_modules/.bin/gulp build --production } ... } Julia using MXNet mlp = @mx . chain mx . Variable ( : data ) = mx . FullyConnected ( name =: fc1 , num_hidden = 128 ) = mx . Activation ( name =: relu1 , act_type =: relu ) = mx . FullyConnected ( name =: fc2 , num_hidden = 64 ) = mx . Activation ( name =: relu2 , act_type =: relu ) = mx . FullyConnected ( name =: fc3 , num_hidden = 10 ) = mx . SoftmaxOutput ( name =: softmax ) # data provider batch_size = 100 include ( Pkg . dir ( MXNet , examples , mnist , mnist-data.jl )) train_provider , eval_provider = get_mnist_providers ( batch_size ) # setup model model = mx . FeedForward ( mlp , context = mx . cpu ()) # optimization algorithm optimizer = mx . SGD ( lr = 0.1 , momentum = 0.9 ) # fit parameters mx . fit ( model , optimizer , train_provider , n_epoch = 20 , eval_data = eval_provider ) Lua local ffi = require ( ffi ) ffi . cdef [[ void Sleep(int ms); int poll(struct pollfd *fds, unsigned long nfds, int timeout); ]] local sleep if ffi . os == Windows then function sleep ( s ) ffi . C . Sleep ( s * 1000 ) end else function sleep ( s ) ffi . C . poll ( nil , 0 , s * 1000 ) end end for i = 1 , 160 do io.write ( . ); io.flush () sleep ( 0.01 ) end io.write ( \\n ) MySQL SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = 087652 ; PHP ?php // src/AppBundle/Controller/LuckyController.php namespace AppBundle\\Controller ; use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route ; use Symfony\\Component\\HttpFoundation\\Response ; class LuckyController { /** * @Route( /lucky/number ) */ public function numberAction () { $number = mt_rand ( 0 , 100 ); return new Response ( html body Lucky number: . $number . /body /html ); } } Protocol Buffers syntax = proto2 ; package caffe ; // Specifies the shape (dimensions) of a Blob. message BlobShape { repeated int64 dim = 1 [ packed = true ]; } message BlobProto { optional BlobShape shape = 7 ; repeated float data = 5 [ packed = true ]; repeated float diff = 6 [ packed = true ]; // 4D dimensions -- deprecated. Use shape instead. optional int32 num = 1 [ default = 0 ]; optional int32 channels = 2 [ default = 0 ]; optional int32 height = 3 [ default = 0 ]; optional int32 width = 4 [ default = 0 ]; } Python A very simple MNIST classifier. See extensive documentation at http://tensorflow.org/tutorials/mnist/beginners/index.md from __future__ import absolute_import from __future__ import division from __future__ import print_function # Import data from tensorflow.examples.tutorials.mnist import input_data import tensorflow as tf flags = tf . app . flags FLAGS = flags . FLAGS flags . DEFINE_string ( data_dir , /tmp/data/ , Directory for storing data ) mnist = input_data . read_data_sets ( FLAGS . data_dir , one_hot = True ) sess = tf . InteractiveSession () # Create the model x = tf . placeholder ( tf . float32 , [ None , 784 ]) W = tf . Variable ( tf . zeros ([ 784 , 10 ])) b = tf . Variable ( tf . zeros ([ 10 ])) y = tf . nn . softmax ( tf . matmul ( x , W ) + b ) Ruby require finity/event require finity/machine require finity/state require finity/transition require finity/version module Finity class InvalidCallback StandardError ; end class MissingCallback StandardError ; end class InvalidState StandardError ; end # Class methods to be injected into the including class upon inclusion. module ClassMethods # Instantiate a new state machine for the including class by accepting a # block with state and event (and subsequent transition) definitions. def finity options = {}, block @finity ||= Machine . new self , options , block end # Return the names of all registered states. def states @finity . states . map { | name , _ | name } end # Return the names of all registered events. def events @finity . events . map { | name , _ | name } end end # Inject methods into the including class upon inclusion. def self . included base base . extend ClassMethods end end XML ?xml version= 1.0 encoding= UTF-8 ? !DOCTYPE mainTag SYSTEM some.dtd [ENTITY % entity] ?oxygen RNGSchema= some.rng type= xml ? xs:main-Tag xmlns:xs= http://www.w3.org/2001/XMLSchema !-- This is a sample comment -- childTag attribute= Quoted Value another-attribute= Single quoted value a-third-attribute= 123 withTextContent Some text content /withTextContent withEntityContent Some text content with lt; entities gt; and mentioning uint8_t and int32_t /withEntityContent otherTag attribute= Single quoted Value / /childTag ![CDATA[ some CData ]] /main-Tag","title":"CodeHilite"},{"location":"extensions/codehilite/#codehilite","text":"CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed.","title":"CodeHilite"},{"location":"extensions/codehilite/#installation","text":"CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over 300 languages , CodeHilite will also highlight the code block. Pygments can be installed with the following command: pip install pygments To enable CodeHilite, add the following lines to your mkdocs.yml : markdown_extensions : - codehilite Migrating from Material 0.2.x In 0.2.x the CodeHilite extension was included with codehilite(css_class=code) which switched the CSS class from .codehilite to .code . The current version of the theme doesn't require that and defines styles for the default .codehilite class, so the part css_class=code needs to be removed.","title":"Installation"},{"location":"extensions/codehilite/#usage","text":"","title":"Usage"},{"location":"extensions/codehilite/#specifying-the-language","text":"The CodeHilite extension uses the same syntax as regular Markdown code blocks, but needs to know the language of the code block. This can be done in three different ways.","title":"Specifying the language"},{"location":"extensions/codehilite/#via-markdown-syntax-recommended","text":"In Markdown, code blocks can be opened and closed by writing three backticks on separate lines. To add code highlighting to those blocks, the easiest way is to specify the language directly after the opening block. Example: ``` python import tensorflow as tf ``` Result: import tensorflow as tf","title":"via Markdown syntax recommended"},{"location":"extensions/codehilite/#via-shebang","text":"Alternatively, if the first line of a code block contains a shebang, the language is derived from the path referenced in the shebang. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: #!/usr/bin/python import tensorflow as tf Result: #!/usr/bin/python import tensorflow as tf","title":"via Shebang"},{"location":"extensions/codehilite/#via-three-colons","text":"If the first line starts with three colons followed by a language identifier, the first line is stripped. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: :::python import tensorflow as tf Result: import tensorflow as tf","title":"via three colons"},{"location":"extensions/codehilite/#adding-line-numbers","text":"Line numbers can be added by enabling the linenums flag in your mkdocs.yml : markdown_extensions : - codehilite(linenums=true) Example: ``` python Bubble sort def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 Bubble sort def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Adding line numbers"},{"location":"extensions/codehilite/#highlighting-specific-lines","text":"Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language identifier. Line counts start at 1. Example: ``` python hl_lines= 3 4 Bubble sort def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 Bubble sort def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Highlighting specific lines"},{"location":"extensions/codehilite/#supported-languages-excerpt","text":"CodeHilite uses Pygments , a generic syntax highlighter with support for over 300 languages , so the following list of examples is just an excerpt.","title":"Supported languages excerpt"},{"location":"extensions/codehilite/#bash","text":"#!/bin/bash for OPT in $@ do case $OPT in -f ) canonicalize = 1 ;; -n ) switchlf = -n ;; esac done # readlink -f function __readlink_f { target = $1 while test -n $target ; do filepath = $target cd ` dirname $filepath ` target = ` readlink $filepath ` done /bin/echo $switchlf ` pwd -P ` / ` basename $filepath ` } if [ ! $canonicalize ] ; then readlink $switchlf $@ else for file in $@ do case $file in -* ) ;; * ) __readlink_f $file ;; esac done fi exit $?","title":"Bash"},{"location":"extensions/codehilite/#c","text":"extern size_t pb_varint_scan ( const uint8_t data [], size_t left ) { assert ( data left ); left = left 10 ? 10 : left ; #ifdef __SSE2__ /* Mapping: remaining bytes == bitmask */ static const int mask_map [] = { 0x0000 , 0x0001 , 0x0003 , 0x0007 , 0x000F , 0x001F , 0x003F , 0x007F , 0x00FF , 0x01FF , 0x03FF }; /* Load buffer into 128-bit integer and create high-bit mask */ __m128i temp = _mm_loadu_si128 (( const __m128i * ) data ); __m128i high = _mm_set1_epi8 ( 0x80 ); /* Intersect and extract mask with high-bits set */ int mask = _mm_movemask_epi8 ( _mm_and_si128 ( temp , high )); mask = ( mask mask_map [ left ]) ^ mask_map [ left ]; /* Count trailing zeroes */ return mask ? __builtin_ctz ( mask ) + 1 : 0 ; #else /* Linear scan */ size_t size = 0 ; while ( data [ size ++ ] 0x80 ) if ( !-- left ) return 0 ; return size ; #endif /* __SSE2__ */ }","title":"C"},{"location":"extensions/codehilite/#c_1","text":"Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ signature ] = descriptor_ - full_name (); /* Prepare message symbol */ variables_ [ message ] = StringReplace ( variables_ [ signature ], . , _ , true ); LowerString ( ( variables_ [ message ])); /* Suffix scope to identifiers, if given */ string suffix ( ); if ( scope_ ) { suffix = scope_ - full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ - file () - package (). compare ( descriptor_ - file () - package ())) suffix = StripPrefixString ( suffix , scope_ - file () - package () + . ); /* Append to signature */ variables_ [ signature ] += .[ + suffix + ] ; suffix = _ + suffix ; } /* Prepare extension symbol */ variables_ [ extension ] = StringReplace ( suffix , . , _ , true ); LowerString ( ( variables_ [ extension ])); }","title":"C++"},{"location":"extensions/codehilite/#c_2","text":"public static void Send ( Socket socket , byte [] buffer , int offset , int size , int timeout ) { int startTickCount = Environment . TickCount ; int sent = 0 ; do { if ( Environment . TickCount startTickCount + timeout ) throw new Exception ( Timeout. ); try { sent += socket . Send ( buffer , offset + sent , size - sent , SocketFlags . None ); } catch ( SocketException ex ) { if ( ex . SocketErrorCode == SocketError . WouldBlock || ex . SocketErrorCode == SocketError . IOPending || ex . SocketErrorCode == SocketError . NoBufferSpaceAvailable ) { /* Socket buffer is probably full, wait and try again */ Thread . Sleep ( 30 ); } else { throw ex ; } } } while ( sent size ); }","title":"C&#35;"},{"location":"extensions/codehilite/#clojure","text":"( clojure-version ) ( defn partition-when [ f ] ( fn [ rf ] ( let [ a ( java.util.ArrayList. ) fval ( volatile! false )] ( fn ([] ( rf )) ([ result ] ( let [ result ( if ( .isEmpty a ) result ( let [ v ( vec ( .toArray a ))] ;; Clear first ( .clear a ) ( unreduced ( rf result v ))))] ( rf result ))) ([ result input ] ( if-not ( and ( f input ) @ fval ) ( do ( vreset! fval true ) ( .add a input ) result ) ( let [ v ( vec ( .toArray a ))] ( .clear a ) ( let [ ret ( rf result v )] ( when-not ( reduced? ret ) ( .add a input )) ret )))))))) ( into [] ( partition-when # ( .startsWith % )) [ 1d 33 1 2 22 3 ])","title":"Clojure"},{"location":"extensions/codehilite/#diff","text":"Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log( hello world ); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ packages/services.web/{!(test)/**/,}*.js , packages/error/**/*.js ], - scripts: [ - grunt.js , - db/**/*.js - ], browser: [ packages/web/server.js , packages/web/server/**/*.js ,","title":"Diff"},{"location":"extensions/codehilite/#docker","text":"FROM ubuntu # Install vnc, xvfb in order to create a fake display and firefox RUN apt-get update apt-get install -y x11vnc xvfb firefox RUN mkdir ~/.vnc # Setup a password RUN x11vnc -storepasswd 1234 ~/.vnc/passwd # Autostart firefox (might not be the best way, but it does the trick) RUN bash -c echo firefox /.bashrc EXPOSE 5900 CMD [ x11vnc , -forever , -usepw , -create ]","title":"Docker"},{"location":"extensions/codehilite/#elixir","text":"require Logger def accept ( port ) do { :ok , socket } = :gen_tcp . listen ( port , [ :binary , packet : :line , active : false , reuseaddr : true ]) Logger . info Accepting connections on port #{ port } loop_acceptor ( socket ) end defp loop_acceptor ( socket ) do { :ok , client } = :gen_tcp . accept ( socket ) serve ( client ) loop_acceptor ( socket ) end defp serve ( socket ) do socket | read_line () | write_line ( socket ) serve ( socket ) end defp read_line ( socket ) do { :ok , data } = :gen_tcp . recv ( socket , 0 ) data end defp write_line ( line , socket ) do :gen_tcp . send ( socket , line ) end","title":"Elixir"},{"location":"extensions/codehilite/#erlang","text":"circular ( Defs ) - [ { { Type , Base }, Fields } || { { Type , Base }, Fields } - Defs , Type == msg , circular ( Base , Defs ) ]. circular ( Base , Defs ) - Fields = proplists : get_value ({ msg , Base }, Defs ), circular ( Defs , Fields , [ Base ]). circular (_ Defs , [], _ Path ) - false ; circular ( Defs , [ Field | Fields ], Path ) - case Field #field.type of { msg , Type } - case lists : member ( Type , Path ) of false - Children = proplists : get_value ({ msg , Type }, Defs ), case circular ( Defs , Children , [ Type | Path ]) of false - circular ( Defs , Fields , Path ); true - true end ; true - Type == lists : last ( Path ) andalso ( length ( Path ) == 1 orelse not is_tree ( Path )) end ; _ - circular ( Defs , Fields , Path ) end .","title":"Erlang"},{"location":"extensions/codehilite/#f","text":"/// Asynchronously download retangles from the server /// and decode the JSON format to F# Rectangle record let [ Js ] getRectangles () : Async Rectangle [] = async { let req = XMLHttpRequest () req . Open ( POST , /get , true ) let! resp = req . AsyncSend () return JSON . parse ( resp ) } /// Repeatedly update rectangles after 0.5 sec let [ Js ] updateLoop () = async { while true do do ! Async . Sleep ( 500 ) let! rects = getRectangles () cleanRectangles () rects | Array . iter createRectangle }","title":"F&#35;"},{"location":"extensions/codehilite/#go","text":"package main import fmt func counter ( id int , channel chan int , closer bool ) { for i := 0 ; i 10000000 ; i ++ { fmt . Println ( process , id , send , i ) channel - 1 } if closer { close ( channel ) } } func main () { channel := make ( chan int ) go counter ( 1 , channel , false ) go counter ( 2 , channel , true ) x := 0 // receiving data from channel for i := range channel { fmt . Println ( receiving ) x += i } fmt . Println ( x ) }","title":"Go"},{"location":"extensions/codehilite/#html","text":"!doctype html html class = no-js lang = head meta charset = utf-8 meta http-equiv = x-ua-compatible content = ie=edge title HTML5 Boilerplate / title meta name = description content = meta name = viewport content = width=device-width, initial-scale=1 link rel = apple-touch-icon href = apple-touch-icon.png link rel = stylesheet href = css/normalize.css link rel = stylesheet href = css/main.css script src = js/vendor/modernizr-2.8.3.min.js / script / head body p Hello world! This is HTML5 Boilerplate. / p / body / html","title":"HTML"},{"location":"extensions/codehilite/#java","text":"import java.util.LinkedList ; import java.lang.reflect.Array ; public class UnsortedHashSet E { private static final double LOAD_FACTOR_LIMIT = 0.7 ; private int size ; private LinkedList E [] con ; public UnsortedHashSet () { con = ( LinkedList E [])( new LinkedList [ 10 ]); } public boolean add ( E obj ) { int oldSize = size ; int index = Math . abs ( obj . hashCode ()) % con . length ; if ( con [ index ] == null ) con [ index ] = new LinkedList E (); if (! con [ index ]. contains ( obj )) { con [ index ]. add ( obj ); size ++; } if ( 1.0 * size / con . length LOAD_FACTOR_LIMIT ) resize (); return oldSize != size ; } private void resize () { UnsortedHashSet E temp = new UnsortedHashSet E (); temp . con = ( LinkedList E [])( new LinkedList [ con . length * 2 + 1 ]); for ( int i = 0 ; i con . length ; i ++) { if ( con [ i ] != null ) for ( E e : con [ i ]) temp . add ( e ); } con = temp . con ; } public int size () { return size ; } }","title":"Java"},{"location":"extensions/codehilite/#javascript","text":"var Math = require ( lib/math ); var _extends = function ( target ) { for ( var i = 1 ; i arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; var e = exports . e = 2.71828182846 ; exports [ default ] = function ( x ) { return Math . exp ( x ); }; module . exports = _extends ( exports [ default ], exports );","title":"JavaScript"},{"location":"extensions/codehilite/#json","text":"{ name : mkdocs-material , version : 0.2.4 , description : A Material Design theme for MkDocs , homepage : http://squidfunk.github.io/mkdocs-material/ , authors : [ squidfunk martin.donath@squidfunk.com ], license : MIT , main : Gulpfile.js , scripts : { start : ./node_modules/.bin/gulp watch --mkdocs , build : ./node_modules/.bin/gulp build --production } ... }","title":"JSON"},{"location":"extensions/codehilite/#julia","text":"using MXNet mlp = @mx . chain mx . Variable ( : data ) = mx . FullyConnected ( name =: fc1 , num_hidden = 128 ) = mx . Activation ( name =: relu1 , act_type =: relu ) = mx . FullyConnected ( name =: fc2 , num_hidden = 64 ) = mx . Activation ( name =: relu2 , act_type =: relu ) = mx . FullyConnected ( name =: fc3 , num_hidden = 10 ) = mx . SoftmaxOutput ( name =: softmax ) # data provider batch_size = 100 include ( Pkg . dir ( MXNet , examples , mnist , mnist-data.jl )) train_provider , eval_provider = get_mnist_providers ( batch_size ) # setup model model = mx . FeedForward ( mlp , context = mx . cpu ()) # optimization algorithm optimizer = mx . SGD ( lr = 0.1 , momentum = 0.9 ) # fit parameters mx . fit ( model , optimizer , train_provider , n_epoch = 20 , eval_data = eval_provider )","title":"Julia"},{"location":"extensions/codehilite/#lua","text":"local ffi = require ( ffi ) ffi . cdef [[ void Sleep(int ms); int poll(struct pollfd *fds, unsigned long nfds, int timeout); ]] local sleep if ffi . os == Windows then function sleep ( s ) ffi . C . Sleep ( s * 1000 ) end else function sleep ( s ) ffi . C . poll ( nil , 0 , s * 1000 ) end end for i = 1 , 160 do io.write ( . ); io.flush () sleep ( 0.01 ) end io.write ( \\n )","title":"Lua"},{"location":"extensions/codehilite/#mysql","text":"SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = 087652 ;","title":"MySQL"},{"location":"extensions/codehilite/#php","text":"?php // src/AppBundle/Controller/LuckyController.php namespace AppBundle\\Controller ; use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route ; use Symfony\\Component\\HttpFoundation\\Response ; class LuckyController { /** * @Route( /lucky/number ) */ public function numberAction () { $number = mt_rand ( 0 , 100 ); return new Response ( html body Lucky number: . $number . /body /html ); } }","title":"PHP"},{"location":"extensions/codehilite/#protocol-buffers","text":"syntax = proto2 ; package caffe ; // Specifies the shape (dimensions) of a Blob. message BlobShape { repeated int64 dim = 1 [ packed = true ]; } message BlobProto { optional BlobShape shape = 7 ; repeated float data = 5 [ packed = true ]; repeated float diff = 6 [ packed = true ]; // 4D dimensions -- deprecated. Use shape instead. optional int32 num = 1 [ default = 0 ]; optional int32 channels = 2 [ default = 0 ]; optional int32 height = 3 [ default = 0 ]; optional int32 width = 4 [ default = 0 ]; }","title":"Protocol Buffers"},{"location":"extensions/codehilite/#python","text":"A very simple MNIST classifier. See extensive documentation at http://tensorflow.org/tutorials/mnist/beginners/index.md from __future__ import absolute_import from __future__ import division from __future__ import print_function # Import data from tensorflow.examples.tutorials.mnist import input_data import tensorflow as tf flags = tf . app . flags FLAGS = flags . FLAGS flags . DEFINE_string ( data_dir , /tmp/data/ , Directory for storing data ) mnist = input_data . read_data_sets ( FLAGS . data_dir , one_hot = True ) sess = tf . InteractiveSession () # Create the model x = tf . placeholder ( tf . float32 , [ None , 784 ]) W = tf . Variable ( tf . zeros ([ 784 , 10 ])) b = tf . Variable ( tf . zeros ([ 10 ])) y = tf . nn . softmax ( tf . matmul ( x , W ) + b )","title":"Python"},{"location":"extensions/codehilite/#ruby","text":"require finity/event require finity/machine require finity/state require finity/transition require finity/version module Finity class InvalidCallback StandardError ; end class MissingCallback StandardError ; end class InvalidState StandardError ; end # Class methods to be injected into the including class upon inclusion. module ClassMethods # Instantiate a new state machine for the including class by accepting a # block with state and event (and subsequent transition) definitions. def finity options = {}, block @finity ||= Machine . new self , options , block end # Return the names of all registered states. def states @finity . states . map { | name , _ | name } end # Return the names of all registered events. def events @finity . events . map { | name , _ | name } end end # Inject methods into the including class upon inclusion. def self . included base base . extend ClassMethods end end","title":"Ruby"},{"location":"extensions/codehilite/#xml","text":"?xml version= 1.0 encoding= UTF-8 ? !DOCTYPE mainTag SYSTEM some.dtd [ENTITY % entity] ?oxygen RNGSchema= some.rng type= xml ? xs:main-Tag xmlns:xs= http://www.w3.org/2001/XMLSchema !-- This is a sample comment -- childTag attribute= Quoted Value another-attribute= Single quoted value a-third-attribute= 123 withTextContent Some text content /withTextContent withEntityContent Some text content with lt; entities gt; and mentioning uint8_t and int32_t /withEntityContent otherTag attribute= Single quoted Value / /childTag ![CDATA[ some CData ]] /main-Tag","title":"XML"},{"location":"extensions/footnotes/","text":"Footnotes Footnotes is another extension included in the standard Markdown library. As the name says, it adds the ability to add footnotes to your documentation. Installation Add the following lines to your mkdocs.yml : markdown_extensions : - footnotes Usage The markup for footnotes is similar to the standard Markdown markup for links. A reference is inserted in the text, which can then be defined at any point in the document. Inserting the reference The footnote reference is enclosed in square brackets and starts with a caret, followed by an arbitrary label which may contain numeric identifiers [1, 2, 3, ...] or names [Granovetter et al. 1998]. The rendered references are always consecutive superscripted numbers. Example: Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Result: Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 Inserting the content The footnote content is also declared with a label, which must match the label used for the footnote reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink is automatically added to the footnote reference. on a single line Short statements can be written on the same line. Example: [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Result: Jump to footnote at the bottom of the page on multiple lines Paragraphs should be written on the next line. As with all Markdown blocks, the content must be indented by four spaces. Example: [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Jump to footnote at the bottom of the page Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Footnotes"},{"location":"extensions/footnotes/#footnotes","text":"Footnotes is another extension included in the standard Markdown library. As the name says, it adds the ability to add footnotes to your documentation.","title":"Footnotes"},{"location":"extensions/footnotes/#installation","text":"Add the following lines to your mkdocs.yml : markdown_extensions : - footnotes","title":"Installation"},{"location":"extensions/footnotes/#usage","text":"The markup for footnotes is similar to the standard Markdown markup for links. A reference is inserted in the text, which can then be defined at any point in the document.","title":"Usage"},{"location":"extensions/footnotes/#inserting-the-reference","text":"The footnote reference is enclosed in square brackets and starts with a caret, followed by an arbitrary label which may contain numeric identifiers [1, 2, 3, ...] or names [Granovetter et al. 1998]. The rendered references are always consecutive superscripted numbers. Example: Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Result: Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2","title":"Inserting the reference"},{"location":"extensions/footnotes/#inserting-the-content","text":"The footnote content is also declared with a label, which must match the label used for the footnote reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink is automatically added to the footnote reference.","title":"Inserting the content"},{"location":"extensions/footnotes/#on-a-single-line","text":"Short statements can be written on the same line. Example: [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Result: Jump to footnote at the bottom of the page","title":"on a single line"},{"location":"extensions/footnotes/#on-multiple-lines","text":"Paragraphs should be written on the next line. As with all Markdown blocks, the content must be indented by four spaces. Example: [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Jump to footnote at the bottom of the page Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"on multiple lines"},{"location":"extensions/metadata/","text":"Metadata The Metadata extension makes it possible to add metadata to a document which gives more control over the theme in a page-specific context. Installation Add the following lines to your mkdocs.yml : markdown_extensions : - meta Usage Metadata is written as a series of key-value pairs at the beginning of the Markdown document, delimited by a blank line which ends the metadata context. Naturally, the metadata is stripped from the document before rendering the actual page content and made available to the theme. Example: title: Lorem ipsum dolor sit amet description: Nullam urna elit, malesuada eget finibus ut, ac tortor. path: path/to/file source: file.js # Headline ... See the next section which covers the metadata that is supported by Material. Overriding the title The page title can be overridden on a per-document level: title: Lorem ipsum dolor sit amet This will set the title tag inside the document head for the current page to the provided value. It will also override the default behavior of Material for MkDocs which appends the site title using a dash as a separator to the page title. Overriding the description The page description can also be overridden on a per-document level: description : Nullam urna elit, malesuada eget finibus ut, ac tortor. This will set the meta tag containing the site description inside the document head for the current page to the provided value. Linking sources When a document is related to a specific set of source files and the repo_url is defined inside the project's mkdocs.yml , the files can be linked using the source key: source: file.js A new entry at the bottom of the table of contents is generated that is linking to the section listing the linked source files. Multiple files can be linked by adding filenames on separate lines: source: file.js file.css The filenames are appended to the repo_url set in your mkdocs.yml , but can be prefixed with a path to ensure correct path resolving: Example: path: tree/master/docs/extensions source: metadata.md Result: See the source section for the resulting output.","title":"Metadata"},{"location":"extensions/metadata/#metadata","text":"The Metadata extension makes it possible to add metadata to a document which gives more control over the theme in a page-specific context.","title":"Metadata"},{"location":"extensions/metadata/#installation","text":"Add the following lines to your mkdocs.yml : markdown_extensions : - meta","title":"Installation"},{"location":"extensions/metadata/#usage","text":"Metadata is written as a series of key-value pairs at the beginning of the Markdown document, delimited by a blank line which ends the metadata context. Naturally, the metadata is stripped from the document before rendering the actual page content and made available to the theme. Example: title: Lorem ipsum dolor sit amet description: Nullam urna elit, malesuada eget finibus ut, ac tortor. path: path/to/file source: file.js # Headline ... See the next section which covers the metadata that is supported by Material.","title":"Usage"},{"location":"extensions/metadata/#overriding-the-title","text":"The page title can be overridden on a per-document level: title: Lorem ipsum dolor sit amet This will set the title tag inside the document head for the current page to the provided value. It will also override the default behavior of Material for MkDocs which appends the site title using a dash as a separator to the page title.","title":"Overriding the title"},{"location":"extensions/metadata/#overriding-the-description","text":"The page description can also be overridden on a per-document level: description : Nullam urna elit, malesuada eget finibus ut, ac tortor. This will set the meta tag containing the site description inside the document head for the current page to the provided value.","title":"Overriding the description"},{"location":"extensions/metadata/#linking-sources","text":"When a document is related to a specific set of source files and the repo_url is defined inside the project's mkdocs.yml , the files can be linked using the source key: source: file.js A new entry at the bottom of the table of contents is generated that is linking to the section listing the linked source files. Multiple files can be linked by adding filenames on separate lines: source: file.js file.css The filenames are appended to the repo_url set in your mkdocs.yml , but can be prefixed with a path to ensure correct path resolving: Example: path: tree/master/docs/extensions source: metadata.md Result: See the source section for the resulting output.","title":"Linking sources"},{"location":"extensions/permalinks/","text":"Permalinks Permalinks are a feature of the Table of Contents extension, which is part of the standard Markdown library. The extension inserts an anchor at the end of each headline, which makes it possible to directly link to a subpart of the document. Installation To enable permalinks, add the following to your mkdocs.yml : markdown_extensions : - toc(permalink=true) This will add a link containing the paragraph symbol \u00b6 at the end of each headline (exactly like on the page you're currently viewing), which the Material theme will make appear on hover. In order to change the text of the permalink, a string can be passed, e.g.: markdown_extensions: - toc(permalink=Link) Usage When enabled, permalinks are inserted automatically.","title":"Permalinks"},{"location":"extensions/permalinks/#permalinks","text":"Permalinks are a feature of the Table of Contents extension, which is part of the standard Markdown library. The extension inserts an anchor at the end of each headline, which makes it possible to directly link to a subpart of the document.","title":"Permalinks"},{"location":"extensions/permalinks/#installation","text":"To enable permalinks, add the following to your mkdocs.yml : markdown_extensions : - toc(permalink=true) This will add a link containing the paragraph symbol \u00b6 at the end of each headline (exactly like on the page you're currently viewing), which the Material theme will make appear on hover. In order to change the text of the permalink, a string can be passed, e.g.: markdown_extensions: - toc(permalink=Link)","title":"Installation"},{"location":"extensions/permalinks/#usage","text":"When enabled, permalinks are inserted automatically.","title":"Usage"},{"location":"extensions/pymdown/","text":"PyMdown Extensions PyMdown Extensions is a collection of Markdown extensions that add some great features to the standard Markdown library. For this reason, the installation of this package is highly recommended as it's well-integrated with the Material theme. Installation The PyMdown Extensions package can be installed with the following command: pip install pymdown-extensions The following list of extensions that are part of the PyMdown Extensions package are recommended to be used together with the Material theme: markdown_extensions : - pymdownx.arithmatex - pymdownx.betterem(smart_enable=all) - pymdownx.caret - pymdownx.critic - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist(custom_checkbox=true) - pymdownx.tilde Usage GitHub Flavored Markdown Most of the extensions included in the PyMdown Extensions package try to bring the Markdown experience closer to GitHub Flavored Markdown (GFM). The PyMdown Extensions package adds a shorthand to enable all of the included extensions that provide the GFM experience. However, usage of the shorthand is discouraged, because some extensions are not supported, as the Material theme uses some incompatible extensions included in the standard Markdown library. BetterEm BetterEm improves the handling of emphasis markup ( bold and italic ) within Markdown by providing a more sophisticated parser for better detecting start and end tokens. Read the documentation for usage notes . Emoji Emoji adds the ability to insert a -load of emojis that we use in our daily lives. See the EmojiOne demo for a list of all available emojis. Happy scrolling Legal disclaimer Material has no affiliation with EmojiOne which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license to ensure proper usage and attribution. MagicLink MagicLink detects links in Markdown and auto-generates the necessary markup, so no special syntax is required. It auto-links http[s]:// and ftp:// links, as well as references to email addresses: SuperFences SuperFences provides the ability to nest code blocks under blockquotes, lists and other block elements, which the Fenced Code Blocks extension from the standard Markdown library doesn't parse correctly. Tasklist Tasklist adds support for styled checkbox lists. This is useful for keeping track of tasks and showing what has been done and has yet to be done. Checkbox lists are like regular lists, but prefixed with [ ] for empty or [x] for filled checkboxes. Example: * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [x] Nulla lobortis egestas semper * [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque * [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Tilde Tilde provides an easy way to strike through cross out text. The portion of text that should be erased must be enclosed in two tildes ~~...~~ and the extension will take care of the rest. More syntactic sugar Caret Caret is the sister extension of Tilde and makes it possible to highlight inserted text . The portion of text that should be marked as added must be enclosed in two carets ^^...^^ . Mark Mark adds the ability to highlight text like it was marked with a yellow text marker . The portion of text that should be highlighted must be enclosed in two equal signs ==...== . SmartSymbols SmartSymbols converts markup for special characters into their corresponding symbols, e.g. arrows ( , , ), trademark and copyright symbols ( , , ) and fractions ( , , ...). Critic Critic implements Critic Markup , a Markdown extension that enables the tracking of changes (additions, deletions and comments) on documents. During compilation of the Markdown document, changes can be rendered (default), accepted or rejected. Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content. Arithmatex MathJax Arithmatex integrates Material with MathJax which parses block-style and inline equations written in TeX markup and outputs them in mathematical notation. See this thread for a short introduction and quick reference on how to write equations in TeX syntax. Besides activating the extension in the mkdocs.yml , the MathJax JavaScript runtime needs to be included. This must be done with additional JavaScript : extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML If you want to override the default MathJax configuration, you can do this by adding another JavaScript file before the MathJax runtime in extra_javascript which contains your MathJax configuration, e.g.: window . MathJax = { tex2jax : { inlineMath : [ [ \\\\( , \\\\) ] ], displayMath : [ [ \\\\[ , \\\\] ] ] }, TeX : { TagSide : right , TagIndent : .8em , MultLineWidth : 85% , equationNumbers : { autoNumber : AMS , }, unicode : { fonts : STIXGeneral, Arial Unicode MS } }, displayAlign : left , showProcessingMessages : false , messageStyle : none }; In your mkdocs.yml , include it with: extra_javascript : - javascripts/extra.js - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML Blocks Blocks are enclosed in $$ ... $$ which are placed on separate lines. Example: $$ \\frac {n ! }{k !( n - k )! } = \\binom {n}{k} $$ Result: \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} Inline Inline equations need to be enclosed in $ ... $ : Example: Lorem ipsum dolor sit amet: $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ Result: Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} InlineHilite InlineHilite adds support for inline code highlighting. It's useful for short snippets included within body copy, e.g. var test = 0 ; and can be achived by prefixing inline code with a shebang and language identifier, e.g. #!js .","title":"PyMdown Extensions"},{"location":"extensions/pymdown/#pymdown-extensions","text":"PyMdown Extensions is a collection of Markdown extensions that add some great features to the standard Markdown library. For this reason, the installation of this package is highly recommended as it's well-integrated with the Material theme.","title":"PyMdown Extensions"},{"location":"extensions/pymdown/#installation","text":"The PyMdown Extensions package can be installed with the following command: pip install pymdown-extensions The following list of extensions that are part of the PyMdown Extensions package are recommended to be used together with the Material theme: markdown_extensions : - pymdownx.arithmatex - pymdownx.betterem(smart_enable=all) - pymdownx.caret - pymdownx.critic - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist(custom_checkbox=true) - pymdownx.tilde","title":"Installation"},{"location":"extensions/pymdown/#usage","text":"","title":"Usage"},{"location":"extensions/pymdown/#github-flavored-markdown","text":"Most of the extensions included in the PyMdown Extensions package try to bring the Markdown experience closer to GitHub Flavored Markdown (GFM). The PyMdown Extensions package adds a shorthand to enable all of the included extensions that provide the GFM experience. However, usage of the shorthand is discouraged, because some extensions are not supported, as the Material theme uses some incompatible extensions included in the standard Markdown library.","title":"GitHub Flavored Markdown"},{"location":"extensions/pymdown/#betterem","text":"BetterEm improves the handling of emphasis markup ( bold and italic ) within Markdown by providing a more sophisticated parser for better detecting start and end tokens. Read the documentation for usage notes .","title":"BetterEm"},{"location":"extensions/pymdown/#emoji","text":"Emoji adds the ability to insert a -load of emojis that we use in our daily lives. See the EmojiOne demo for a list of all available emojis. Happy scrolling Legal disclaimer Material has no affiliation with EmojiOne which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license to ensure proper usage and attribution.","title":"Emoji"},{"location":"extensions/pymdown/#magiclink","text":"MagicLink detects links in Markdown and auto-generates the necessary markup, so no special syntax is required. It auto-links http[s]:// and ftp:// links, as well as references to email addresses:","title":"MagicLink"},{"location":"extensions/pymdown/#superfences","text":"SuperFences provides the ability to nest code blocks under blockquotes, lists and other block elements, which the Fenced Code Blocks extension from the standard Markdown library doesn't parse correctly.","title":"SuperFences"},{"location":"extensions/pymdown/#tasklist","text":"Tasklist adds support for styled checkbox lists. This is useful for keeping track of tasks and showing what has been done and has yet to be done. Checkbox lists are like regular lists, but prefixed with [ ] for empty or [x] for filled checkboxes. Example: * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [x] Nulla lobortis egestas semper * [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque * [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi","title":"Tasklist"},{"location":"extensions/pymdown/#tilde","text":"Tilde provides an easy way to strike through cross out text. The portion of text that should be erased must be enclosed in two tildes ~~...~~ and the extension will take care of the rest.","title":"Tilde"},{"location":"extensions/pymdown/#more-syntactic-sugar","text":"","title":"More syntactic sugar"},{"location":"extensions/pymdown/#caret","text":"Caret is the sister extension of Tilde and makes it possible to highlight inserted text . The portion of text that should be marked as added must be enclosed in two carets ^^...^^ .","title":"Caret"},{"location":"extensions/pymdown/#mark","text":"Mark adds the ability to highlight text like it was marked with a yellow text marker . The portion of text that should be highlighted must be enclosed in two equal signs ==...== .","title":"Mark"},{"location":"extensions/pymdown/#smartsymbols","text":"SmartSymbols converts markup for special characters into their corresponding symbols, e.g. arrows ( , , ), trademark and copyright symbols ( , , ) and fractions ( , , ...).","title":"SmartSymbols"},{"location":"extensions/pymdown/#critic","text":"Critic implements Critic Markup , a Markdown extension that enables the tracking of changes (additions, deletions and comments) on documents. During compilation of the Markdown document, changes can be rendered (default), accepted or rejected. Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.","title":"Critic"},{"location":"extensions/pymdown/#arithmatex-mathjax","text":"Arithmatex integrates Material with MathJax which parses block-style and inline equations written in TeX markup and outputs them in mathematical notation. See this thread for a short introduction and quick reference on how to write equations in TeX syntax. Besides activating the extension in the mkdocs.yml , the MathJax JavaScript runtime needs to be included. This must be done with additional JavaScript : extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML If you want to override the default MathJax configuration, you can do this by adding another JavaScript file before the MathJax runtime in extra_javascript which contains your MathJax configuration, e.g.: window . MathJax = { tex2jax : { inlineMath : [ [ \\\\( , \\\\) ] ], displayMath : [ [ \\\\[ , \\\\] ] ] }, TeX : { TagSide : right , TagIndent : .8em , MultLineWidth : 85% , equationNumbers : { autoNumber : AMS , }, unicode : { fonts : STIXGeneral, Arial Unicode MS } }, displayAlign : left , showProcessingMessages : false , messageStyle : none }; In your mkdocs.yml , include it with: extra_javascript : - javascripts/extra.js - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-MML-AM_CHTML","title":"Arithmatex MathJax"},{"location":"extensions/pymdown/#blocks","text":"Blocks are enclosed in $$ ... $$ which are placed on separate lines. Example: $$ \\frac {n ! }{k !( n - k )! } = \\binom {n}{k} $$ Result: \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k}","title":"Blocks"},{"location":"extensions/pymdown/#inline","text":"Inline equations need to be enclosed in $ ... $ : Example: Lorem ipsum dolor sit amet: $ p ( x|y ) = \\frac {p ( y|x ) p ( x ) }{p ( y ) } $ Result: Lorem ipsum dolor sit amet: p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)}","title":"Inline"},{"location":"extensions/pymdown/#inlinehilite","text":"InlineHilite adds support for inline code highlighting. It's useful for short snippets included within body copy, e.g. var test = 0 ; and can be achived by prefixing inline code with a shebang and language identifier, e.g. #!js .","title":"InlineHilite"}]}